{"version":3,"file":"ink.0.9.0.js","sources":["../src/Path.ts","../src/Debug.ts","../src/Value.ts","../src/PushPop.ts","../src/TypeAssertion.ts","../src/NullException.ts","../src/Object.ts","../src/StringBuilder.ts","../src/InkList.ts","../src/StoryException.ts","../src/TryGetResult.ts","../src/SearchResult.ts","../src/Container.ts","../src/Glue.ts","../src/ControlCommand.ts","../src/Pointer.ts","../src/Divert.ts","../src/ChoicePoint.ts","../src/VariableReference.ts","../src/VariableAssignment.ts","../src/Void.ts","../src/NativeFunctionCall.ts","../src/Tag.ts","../src/Choice.ts","../src/ListDefinition.ts","../src/ListDefinitionsOrigin.ts","../src/JsonSerialisation.ts","../src/CallStack.ts","../src/VariablesState.ts","../src/PRNG.ts","../src/StoryState.ts","../src/StopWatch.ts","../src/Story.ts"],"sourcesContent":["export class Path{\n\tpublic static parentId = '^';\n\n\tpublic _isRelative: boolean;\n\tpublic _components: Path.Component[];\n\tpublic _componentsString: string | null;\n\n\tconstructor();\n\tconstructor(componentsString: string);\n\tconstructor(head: Path.Component, tail: Path);\n\tconstructor(head: Path.Component[], relative?: boolean);\n\tconstructor(){\n\t\tthis._components = [];\n\t\tthis._componentsString = null;\n\t\tthis._isRelative = false;\n\n\t\tif (typeof arguments[0] == 'string'){\n\t\t\tlet componentsString = arguments[0] as string;\n\t\t\tthis.componentsString = componentsString;\n\t\t}\n\t\telse if (arguments[0] instanceof Path.Component && arguments[1] instanceof Path){\n\t\t\tlet head = arguments[0] as Path.Component;\n\t\t\tlet tail = arguments[1] as Path;\n\t\t\tthis._components.push(head);\n\t\t\tthis._components = this._components.concat(tail._components);\n\t\t}\n\t\telse if (arguments[0] instanceof Array){\n\t\t\tlet head = arguments[0] as Path.Component[];\n\t\t\tlet relative = !!arguments[1] as boolean;\n\t\t\tthis._components = this._components.concat(head);\n\t\t\tthis._isRelative = relative;\n\t\t}\n\t}\n\tget isRelative(){\n\t\treturn this._isRelative;\n\t}\n\tget componentCount(): number{\n\t\treturn this._components.length;\n\t}\n\tget head(): Path.Component | null{\n\t\tif (this._components.length > 0) {\n\t\t\treturn this._components[0];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tget tail(): Path{\n\t\tif (this._components.length >= 2) {\n\t\t\t// careful, the original code uses length-1 here. This is because the second argument of\n\t\t\t// List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n\t\t\tlet tailComps = this._components.slice(1, this._components.length);\n\t\t\treturn new Path(tailComps);\n\t\t}\n\t\telse {\n\t\t\treturn Path.self;\n\t\t}\n\t}\n\tget length(): number{\n\t\treturn this._components.length;\n\t}\n\tget lastComponent(): Path.Component | null{\n\t\tlet lastComponentIdx = this._components.length - 1;\n\t\tif (lastComponentIdx >= 0) {\n\t\t\treturn this._components[lastComponentIdx];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tget containsNamedComponent(): boolean{\n\t\tfor (let i = 0, l = this._components.length; i < l; i++){\n\t\t\tif (!this._components[i].isIndex){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tstatic get self(): Path{\n\t\tlet path = new Path();\n\t\tpath._isRelative = true;\n\t\treturn path;\n\t}\n\n\tpublic GetComponent(index: number): Path.Component{\n\t\treturn this._components[index];\n\t}\n\tpublic PathByAppendingPath(pathToAppend: Path): Path{\n\t\tlet p = new Path();\n\n\t\tlet upwardMoves = 0;\n\t\tfor (let i = 0; i < pathToAppend._components.length; ++i) {\n\t\t\tif (pathToAppend._components[i].isParent) {\n\t\t\t\tupwardMoves++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < this._components.length - upwardMoves; ++i) {\n\t\t\tp._components.push(this._components[i]);\n\t\t}\n\n\t\tfor (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n\t\t\tp._components.push(pathToAppend._components[i]);\n\t\t}\n\n\t\treturn p;\n\t}\n\tget componentsString(): string{\n\t\tif (this._componentsString == null) {\n\t\t\tthis._componentsString = this._components.join('.');\n\t\t\tif (this.isRelative) this._componentsString = '.' + this._componentsString;\n\t\t}\n\n\t\treturn this._componentsString;\n\t}\n\tset componentsString(value: string){\n\t\tthis._components.length = 0;\n\n\t\tthis._componentsString = value;\n\n\t\tif (this._componentsString == null || this._componentsString == '') return;\n\n\t\tif (this._componentsString[0] == '.') {\n\t\t\tthis._isRelative = true;\n\t\t\tthis._componentsString = this._componentsString.substring(1);\n\t\t}\n\n\t\tlet componentStrings = this._componentsString.split('.');\n\t\tfor (let str of componentStrings) {\n\t\t\t// we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n\t\t\t// the normal parseInt won't do for the detection because it's too relaxed.\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\t\t\tif (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)){\n\t\t\t\tthis._components.push(new Path.Component(parseInt(str)));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis._components.push(new Path.Component(str));\n\t\t\t}\n\t\t}\n\t}\n\tpublic toString(): string{\n\t\treturn this.componentsString;\n\t}\n\tpublic Equals(otherPath: Path | null): boolean{\n\t\tif (otherPath == null)\n\t\t\treturn false;\n\n\t\tif (otherPath._components.length != this._components.length)\n\t\t\treturn false;\n\n\t\tif (otherPath.isRelative != this.isRelative)\n\t\t\treturn false;\n\n\t\t// the original code uses SequenceEqual here, so we need to iterate over the components manually.\n\t\tfor (let i = 0, l = otherPath._components.length; i < l; i++){\n\t\t\t// it's not quite clear whether this test should use Equals or a simple == operator,\n\t\t\t// see https://github.com/y-lohse/inkjs/issues/22\n\t\t\tif (!otherPath._components[i].Equals(this._components[i])) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\tpublic PathByAppendingComponent(c: Path.Component): Path{\n\t\tlet p = new Path();\n\t\tp._components.push.apply(p._components, this._components);\n\t\tp._components.push(c);\n\t\treturn p;\n\t}\n}\n\nexport namespace Path {\n\texport class Component{\n\t\tpublic readonly index: number;\n\t\tpublic readonly name: string | null;\n\n\t\tconstructor(indexOrName: string | number){\n\t\t\tthis.index = -1;\n\t\t\tthis.name = null;\n\t\t\tif (typeof indexOrName == 'string'){\n\t\t\t\tthis.name = indexOrName;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.index = indexOrName;\n\t\t\t}\n\t\t}\n\t\tget isIndex(): boolean{\n\t\t\treturn this.index >= 0;\n\t\t}\n\t\tget isParent(): boolean{\n\t\t\treturn this.name == Path.parentId;\n\t\t}\n\n\t\tpublic static ToParent(): Component{\n\t\t\treturn new Component(Path.parentId);\n\t\t}\n\t\tpublic toString(): string | null{\n\t\t\tif (this.isIndex) {\n\t\t\t\treturn this.index.toString();\n\t\t\t} else {\n\t\t\t\treturn this.name;\n\t\t\t}\n\t\t}\n\t\tpublic Equals(otherComp: Component): boolean{\n\t\t\tif (otherComp != null && otherComp.isIndex == this.isIndex) {\n\t\t\t\tif (this.isIndex) {\n\t\t\t\t\treturn this.index == otherComp.index;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.name == otherComp.name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n}\n","export namespace Debug {\n\t// tslint:disable no-string-throw\n\texport function AssertType<T>(variable: any, type: new () => T, message: string): void | never {\n\t\tAssert(variable instanceof type, message);\n\t}\n\n\texport function Assert(condition: boolean, message?: string): void | never {\n\t\tif (!condition) {\n\t\t\t// tslint:disable:no-console\n\t\t\tif (typeof message !== 'undefined') {\n\t\t\t\tconsole.warn(message);\n\t\t\t}\n\n\t\t\tif (console.trace) {\n\t\t\t\tconsole.trace();\n\t\t\t}\n\n\t\t\tthrow '';\n\t\t}\n\t}\n}\n","import {InkObject} from './Object';\nimport {Path} from './Path';\nimport {InkList, InkListItem} from './InkList';\nimport {StoryException} from './StoryException';\nimport {asOrNull, asOrThrows} from './TypeAssertion';\nimport {tryParseInt, tryParseFloat} from './TryGetResult';\nimport {throwNullException} from './NullException';\n\nexport abstract class AbstractValue extends InkObject{\n\tpublic abstract get valueType(): ValueType;\n\tpublic abstract get isTruthy(): boolean;\n\tpublic abstract get valueObject(): any;\n\n\tpublic abstract Cast(newType: ValueType): Value<any>;\n\n\tpublic static Create(val: any): Value<any> | null{\n\t\t// Implicitly convert bools into ints\n\t\tif (typeof val === 'boolean'){\n\t\t\tlet b = !!val;\n\t\t\tval = (b) ? 1 : 0;\n\t\t}\n\n\t\t// https://github.com/y-lohse/inkjs/issues/425\n\t\t// Changed condition sequence, because Number('') is\n\t\t// parsed to 0, which made setting string to empty\n\t\t// impossible\n\t\tif (typeof val === 'string') {\n\t\t\treturn new StringValue(String(val));\n\t\t} else if (Number.isInteger(Number(val))) {\n\t\t\treturn new IntValue(Number(val));\n\t\t} else if (!isNaN(val)) {\n\t\t\treturn new FloatValue(Number(val));\n\t\t} else if (val instanceof Path) {\n\t\t\treturn new DivertTargetValue(asOrThrows(val, Path));\n\t\t} else if (val instanceof InkList) {\n\t\t\treturn new ListValue(asOrThrows(val, InkList));\n\t\t}\n\n\t\treturn null;\n\t}\n\tpublic Copy() {\n\t\treturn asOrThrows(AbstractValue.Create(this), InkObject);\n\t}\n\tpublic BadCastException(targetType: ValueType) {\n\t\treturn new StoryException(\"Can't cast \"+this.valueObject+' from ' + this.valueType+' to '+targetType);\n\t}\n}\n\nexport abstract class Value<T extends { toString: () => string; }> extends AbstractValue{\n\tpublic value: T | null;\n\n\tconstructor(val: T | null){\n\t\tsuper();\n\t\tthis.value = val;\n\t}\n\tpublic get valueObject(){\n\t\treturn this.value;\n\t}\n\tpublic toString(){\n\t\tif (this.value === null) return throwNullException('Value.value');\n\t\treturn this.value.toString();\n\t}\n}\n\nexport class IntValue extends Value<number>{\n\tconstructor(val: number){\n\t\tsuper(val || 0);\n\t}\n\tpublic get isTruthy(){\n\t\treturn this.value != 0;\n\t}\n\tpublic get valueType() {\n\t\treturn ValueType.Int;\n\t}\n\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (this.value === null) return throwNullException('Value.value');\n\n\t\tif (newType == this.valueType) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (newType == ValueType.Float) {\n\t\t\treturn new FloatValue(this.value);\n\t\t}\n\n\t\tif (newType == ValueType.String) {\n\t\t\treturn new StringValue('' + this.value);\n\t\t}\n\n\t\tthrow this.BadCastException(newType);\n\t}\n}\n\nexport class FloatValue extends Value<number>{\n\tconstructor(val: number){\n\t\tsuper(val || 0.0);\n\t}\n\tpublic get isTruthy(){\n\t\treturn this.value != 0.0;\n\t}\n\tpublic get valueType(){\n\t\treturn ValueType.Float;\n\t}\n\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (this.value === null) return throwNullException('Value.value');\n\n\t\tif (newType == this.valueType) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (newType == ValueType.Int) {\n\t\t\treturn new IntValue(this.value);\n\t\t}\n\n\t\tif (newType == ValueType.String) {\n\t\t\treturn new StringValue('' + this.value);\n\t\t}\n\n\t\tthrow this.BadCastException(newType);\n\t}\n}\n\nexport class StringValue extends Value<string>{\n\tpublic _isNewline: boolean;\n\tpublic _isInlineWhitespace: boolean;\n\n\tconstructor(val: string){\n\t\tsuper(val || '');\n\n\t\tthis._isNewline = (this.value == '\\n');\n\t\tthis._isInlineWhitespace = true;\n\n\t\tif (this.value === null) return throwNullException('Value.value');\n\n\t\tif (this.value.length > 0) {\n\t\t\tthis.value.split('').every((c) => {\n\t\t\t\tif (c != ' ' && c != '\\t'){\n\t\t\t\t\tthis._isInlineWhitespace = false;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t}\n\tpublic get valueType(){\n\t\treturn ValueType.String;\n\t}\n\tpublic get isTruthy(){\n\t\tif (this.value === null) return throwNullException('Value.value');\n\t\treturn this.value.length > 0;\n\t}\n\tpublic get isNewline(){\n\t\treturn this._isNewline;\n\t}\n\tpublic get isInlineWhitespace(){\n\t\treturn this._isInlineWhitespace;\n\t}\n\tpublic get isNonWhitespace(){\n\t\treturn !this.isNewline && !this.isInlineWhitespace;\n\t}\n\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (newType == this.valueType) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (newType == ValueType.Int) {\n\n\t\t\tlet parsedInt = tryParseInt(this.value);\n\t\t\tif (parsedInt.exists) {\n\t\t\t\treturn new IntValue(parsedInt.result);\n\t\t\t} else {\n\t\t\t\tthrow this.BadCastException(newType);\n\t\t\t}\n\t\t}\n\n\t\tif (newType == ValueType.Float) {\n\t\t\tlet parsedFloat = tryParseFloat(this.value);\n\t\t\tif (parsedFloat.exists) {\n\t\t\t\treturn new FloatValue(parsedFloat.result);\n\t\t\t} else {\n\t\t\t\tthrow this.BadCastException(newType);\n\t\t\t}\n\t\t}\n\n\t\tthrow this.BadCastException(newType);\n\t}\n}\n\nexport class DivertTargetValue extends Value<Path>{\n\tconstructor(targetPath: Path){\n\t\tsuper(targetPath);\n\t}\n\tpublic get valueType() {\n\t\treturn ValueType.DivertTarget;\n\t}\n\tpublic get targetPath(){\n\t\tif (this.value === null) return throwNullException('Value.value');\n\t\treturn this.value;\n\t}\n\tpublic set targetPath(value: Path){\n\t\tthis.value = value;\n\t}\n\tpublic get isTruthy(): never{\n\t\tthrow new Error('Shouldn\\'t be checking the truthiness of a divert target');\n\t}\n\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (newType == this.valueType)\n\t\t\treturn this;\n\n\t\tthrow this.BadCastException(newType);\n\t}\n\tpublic toString(){\n\t\treturn 'DivertTargetValue(' + this.targetPath + ')';\n\t}\n}\n\nexport class VariablePointerValue extends Value<string>{\n\tpublic _contextIndex: number;\n\n\tconstructor(variableName: string, contextIndex: number = -1){\n\t\tsuper(variableName);\n\n\t\tthis._contextIndex = contextIndex;\n\t}\n\n\tpublic get contextIndex(){\n\t\treturn this._contextIndex;\n\t}\n\tpublic set contextIndex(value: number) {\n\t\tthis._contextIndex = value;\n\t}\n\tpublic get variableName(){\n\t\tif (this.value === null) return throwNullException('Value.value');\n\t\treturn this.value;\n\t}\n\tpublic set variableName(value: string){\n\t\tthis.value = value;\n\t}\n\tpublic get valueType() {\n\t\treturn ValueType.VariablePointer;\n\t}\n\n\tpublic get isTruthy(): never{\n\t\tthrow new Error(\"Shouldn't be checking the truthiness of a variable pointer\");\n\t}\n\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (newType == this.valueType)\n\t\t\treturn this;\n\n\t\tthrow this.BadCastException(newType);\n\t}\n\tpublic toString(){\n\t\treturn 'VariablePointerValue(' + this.variableName + ')';\n\t}\n\tpublic Copy(){\n\t\treturn new VariablePointerValue(this.variableName, this.contextIndex);\n\t}\n}\n\nexport class ListValue extends Value<InkList>{\n\tpublic get isTruthy(){\n\t\tif (this.value === null) { return throwNullException('this.value'); }\n\t\treturn this.value.Count > 0;\n\t}\n\tpublic get valueType() {\n\t\treturn ValueType.List;\n\t}\n\tpublic Cast(newType: ValueType): Value<any>{\n\t\tif (this.value === null) return throwNullException('Value.value');\n\n\t\tif (newType == ValueType.Int) {\n\t\t\tlet max = this.value.maxItem;\n\t\t\tif( max.Key.isNull )\n\t\t\treturn new IntValue(0);\n\t\t\telse\n\t\t\treturn new IntValue(max.Value);\n\t\t}\n\t\telse if (newType == ValueType.Float) {\n\t\t\tlet max = this.value.maxItem;\n\t\t\tif (max.Key.isNull)\n\t\t\treturn new FloatValue(0.0);\n\t\t\telse\n\t\t\treturn new FloatValue(max.Value);\n\t\t}\n\t\telse if (newType == ValueType.String) {\n\t\t\tlet max = this.value.maxItem;\n\t\t\tif (max.Key.isNull)\n\t\t\treturn new StringValue('');\n\t\t\telse {\n\t\t\t\treturn new StringValue(max.Key.toString());\n\t\t\t}\n\t\t}\n\n\t\tif (newType == this.valueType) return this;\n\n\t\tthrow this.BadCastException(newType);\n\t}\n\tconstructor();\n\tconstructor(list: InkList);\n\tconstructor(listOrSingleItem: InkListItem, singleValue: number)\n\tconstructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number){\n\t\tsuper(null);\n\n\t\tif (!listOrSingleItem && !singleValue) {\n\t\t\tthis.value = new InkList();\n\t\t}\n\t\telse if (listOrSingleItem instanceof InkList) {\n\t\t\tthis.value = new InkList(listOrSingleItem);\n\t\t}\n\t\telse if (listOrSingleItem instanceof InkListItem && typeof singleValue === 'number') {\n\t\t\tthis.value = new InkList({\n\t\t\t\tKey: listOrSingleItem,\n\t\t\t\tValue: singleValue,\n\t\t\t});\n\t\t}\n\t}\n\tpublic static RetainListOriginsForAssignment(oldValue: InkObject | null, newValue: InkObject){\n\t\tlet oldList = asOrNull(oldValue, ListValue);\n\t\tlet newList = asOrNull(newValue, ListValue);\n\n\t\tif (newList && newList.value === null) return throwNullException('newList.value');\n\t\tif (oldList && oldList.value === null) return throwNullException('oldList.value');\n\n\t\t// When assigning the empty list, try to retain any initial origin names\n\t\tif (oldList && newList && newList.value!.Count == 0)\n\t\t\tnewList.value!.SetInitialOriginNames(oldList.value!.originNames);\n\t}\n}\n\nexport enum ValueType {\n\tInt = 0,\n\tFloat = 1,\n\tList = 2,\n\tString = 3,\n\tDivertTarget = 4,\n\tVariablePointer = 5,\n}\n","export enum PushPopType {\n\tTunnel = 0,\n\tFunction = 1,\n\tFunctionEvaluationFromGame = 2,\n}\n","import {INamedContent} from './INamedContent';\n\n// tslint:disable ban-types\n\nexport function asOrNull<T>(obj: any, type: (new (...arg: any[]) => T) | Function & { prototype: T }): T | null{\n\tif (obj instanceof type) {\n\t\treturn unsafeTypeAssertion(obj, type);\n\t} else {\n\t\treturn null;\n\t}\n}\n\nexport function asOrThrows<T>(obj: any, type: (new (...arg: any[]) => T) | Function & { prototype: T }): T | never{\n\tif (obj instanceof type) {\n\t\treturn unsafeTypeAssertion(obj, type);\n\t} else {\n\t\tthrow new Error(`${obj} is not of type ${type}`);\n\t}\n}\n\nexport function asNumberOrThrows(obj: any){\n\tif (typeof obj === 'number') {\n\t\treturn obj as number;\n\t} else {\n\t\tthrow new Error(`${obj} is not a number`);\n\t}\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n\tif (obj.hasValidName && obj.name) {\n\t\treturn obj as INamedContent;\n\t}\n\n\treturn null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n\tif (typeof obj === 'undefined') {\n\t\treturn null;\n\t}\n\n\treturn obj;\n}\n\nfunction unsafeTypeAssertion<T>(obj: any, type: (new () => T) | Function & { prototype: T }){\n\treturn obj as T;\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error{}\n\n/**\n * Throw a NullException.\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n\tthrow new NullException(`${name} is null or undefined`);\n}\n","import {Path} from './Path';\nimport {Container} from './Container';\nimport {Debug} from './Debug';\nimport {asOrNull, asINamedContentOrNull} from './TypeAssertion';\nimport { throwNullException } from './NullException';\nimport { SearchResult } from './SearchResult';\nimport { DebugMetadata } from './DebugMetadata';\n\nexport class InkObject{\n\n\tpublic parent: InkObject | null = null;\n\n\tget debugMetadata(): DebugMetadata | null {\n\t\tif (this._debugMetadata === null) {\n\t\t\tif (this.parent) {\n\t\t\t\treturn this.parent.debugMetadata;\n\t\t\t}\n\t\t}\n\n\t\treturn this._debugMetadata;\n\t}\n\n\tset debugMetadata(value) {\n\t\tthis._debugMetadata = value;\n\t}\n\n\tget ownDebugMetadata() {\n\t\treturn this._debugMetadata;\n\t}\n\n\tprivate _debugMetadata: DebugMetadata | null = null;\n\n\tpublic DebugLineNumberOfPath(path: Path) {\n\t\tif (path === null)\n\t\t\treturn null;\n\n\t\t// Try to get a line number from debug metadata\n\t\tlet root = this.rootContentContainer;\n\t\tif (root) {\n\t\t\tlet targetContent = root.ContentAtPath(path).obj;\n\t\t\tif (targetContent) {\n\t\t\t\tlet dm = targetContent.debugMetadata;\n\t\t\t\tif (dm !== null) {\n\t\t\t\t\treturn dm.startLineNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tget path(){\n\t\tif (this._path == null) {\n\n\t\t\tif (this.parent == null) {\n\t\t\t\tthis._path = new Path();\n\t\t\t} else {\n\t\t\t\tlet comps: Path.Component[] = [];\n\n\t\t\t\tlet child: InkObject = this;\n\t\t\t\tlet container = asOrNull(child.parent, Container);\n\n\t\t\t\twhile (container !== null) {\n\n\t\t\t\t\tlet namedChild = asINamedContentOrNull(child);\n\t\t\t\t\tif (namedChild != null && namedChild.hasValidName) {\n\t\t\t\t\t\tcomps.unshift(new Path.Component(namedChild.name));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcomps.unshift(new Path.Component(container.content.indexOf(child)));\n\t\t\t\t\t}\n\n\t\t\t\t\tchild = container;\n\t\t\t\t\tcontainer = asOrNull(container.parent, Container);\n\t\t\t\t}\n\n\t\t\t\tthis._path = new Path(comps);\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._path;\n\t}\n\tprivate _path: Path | null = null;\n\n\tpublic ResolvePath(path: Path | null): SearchResult{\n\t\tif (path === null) return throwNullException('path');\n\t\tif (path.isRelative) {\n\t\t\tlet nearestContainer = asOrNull(this, Container);\n\n\t\t\tif (nearestContainer === null) {\n\t\t\t\tDebug.Assert(this.parent !== null, \"Can't resolve relative path because we don't have a parent\");\n\t\t\t\tnearestContainer = asOrNull(this.parent, Container);\n\t\t\t\tDebug.Assert(nearestContainer !== null, 'Expected parent to be a container');\n\t\t\t\tDebug.Assert(path.GetComponent(0).isParent);\n\t\t\t\tpath = path.tail;\n\t\t\t}\n\n\t\t\tif (nearestContainer === null) { return throwNullException('nearestContainer'); }\n\t\t\treturn nearestContainer.ContentAtPath(path);\n\t\t} else {\n\t\t\tlet contentContainer = this.rootContentContainer;\n\t\t\tif (contentContainer === null) { return throwNullException('contentContainer'); }\n\t\t\treturn contentContainer.ContentAtPath(path);\n\t\t}\n\t}\n\n\tpublic ConvertPathToRelative(globalPath: Path){\n\t\tlet ownPath = this.path;\n\n\t\tlet minPathLength = Math.min(globalPath.length, ownPath.length);\n\t\tlet lastSharedPathCompIndex = -1;\n\n\t\tfor (let i = 0; i < minPathLength; ++i) {\n\t\t\tlet ownComp = ownPath.GetComponent(i);\n\t\t\tlet otherComp = globalPath.GetComponent(i);\n\n\t\t\tif (ownComp.Equals(otherComp)) {\n\t\t\t\tlastSharedPathCompIndex = i;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// No shared path components, so just use global path\n\t\tif (lastSharedPathCompIndex == -1)\n\t\t\treturn globalPath;\n\n\t\tlet numUpwardsMoves = (ownPath.componentCount-1) - lastSharedPathCompIndex;\n\n\t\tlet newPathComps: Path.Component[] = [];\n\n\t\tfor(let up = 0; up < numUpwardsMoves; ++up)\n\t\t\tnewPathComps.push(Path.Component.ToParent());\n\n\t\tfor (let down = lastSharedPathCompIndex + 1; down < globalPath.componentCount; ++down)\n\t\t\tnewPathComps.push(globalPath.GetComponent(down));\n\n\t\tlet relativePath = new Path(newPathComps, true);\n\t\treturn relativePath;\n\t}\n\n\tpublic CompactPathString(otherPath: Path){\n\t\tlet globalPathStr = null;\n\t\tlet relativePathStr = null;\n\n\t\tif (otherPath.isRelative) {\n\t\t\trelativePathStr = otherPath.componentsString;\n\t\t\tglobalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n\t\t}\n\t\telse {\n\t\t\tlet relativePath = this.ConvertPathToRelative(otherPath);\n\t\t\trelativePathStr = relativePath.componentsString;\n\t\t\tglobalPathStr = otherPath.componentsString;\n\t\t}\n\n\t\tif (relativePathStr.length < globalPathStr.length)\n\t\t\treturn relativePathStr;\n\t\telse\n\t\t\treturn globalPathStr;\n\t}\n\n\tget rootContentContainer(){\n\t\tlet ancestor: InkObject = this;\n\t\twhile (ancestor.parent) {\n\t\t\tancestor = ancestor.parent;\n\t\t}\n\t\treturn asOrNull(ancestor, Container);\n\t}\n\n\tpublic Copy(): InkObject {\n\t\tthrow Error(\"Not Implemented: Doesn't support copying\");\n\t}\n\t// SetChild works slightly diferently in the js implementation.\n\t// Since we can't pass an objets property by reference, we instead pass\n\t// the object and the property string.\n\t// TODO: This method can probably be rewritten with type-safety in mind.\n\tpublic SetChild(obj: any, prop: any, value: any){\n\t\tif (obj[prop])\n\t\t\tobj[prop] = null;\n\n\t\tobj[prop] = value;\n\n\t\tif( obj[prop] )\n\t\t\tobj[prop].parent = this;\n\t}\n}\n","export class StringBuilder{\n\n\tprivate string: string;\n\n\tconstructor(str?: string){\n\t\tstr = (typeof str !== 'undefined') ? str.toString() : '';\n\t\tthis.string = str;\n\t}\n\tget Length(): number{\n\t\treturn this.string.length;\n\t}\n\tpublic Append(str: string | null){\n\t\tif (str !== null) {\n\t\t\tthis.string += str;\n\t\t}\n\t}\n\tpublic AppendLine(str?: string){\n\t\tif (typeof str !== 'undefined') this.Append(str);\n\t\tthis.string += '\\n';\n\t}\n\tpublic AppendFormat(format: string, ...args: any[]){\n\t\t// taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n\t\tthis.string += format.replace(/{(\\d+)}/g, (match: string, num: number) => {\n\t\t\treturn typeof args[num] != 'undefined' ? args[num] : match;\n\t\t});\n\t}\n\tpublic toString(): string{\n\t\treturn this.string;\n\t}\n}\n","import {throwNullException} from './NullException';\nimport {StringBuilder} from './StringBuilder';\nimport {ListDefinition} from './ListDefinition';\nimport {Story} from './Story';\n\nexport class InkListItem implements IInkListItem{ // InkListItem is a struct\n\n\tpublic readonly originName: string | null = null;\n\tpublic readonly itemName: string | null = null;\n\n\tconstructor(originName: string | null, itemName: string | null)\n\tconstructor(fullName: string | null)\n\tconstructor(){\n\t\tif (typeof arguments[1] !== 'undefined'){\n\t\t\tlet originName = arguments[0] as string | null;\n\t\t\tlet itemName = arguments[1] as string | null;\n\n\t\t\tthis.originName = originName;\n\t\t\tthis.itemName = itemName;\n\t\t}\n\t\telse if (arguments[0]){\n\t\t\tlet fullName = arguments[0] as string;\n\n\t\t\tlet nameParts = fullName.toString().split('.');\n\t\t\tthis.originName = nameParts[0];\n\t\t\tthis.itemName = nameParts[1];\n\t\t}\n\t}\n\tpublic static get Null(){\n\t\treturn new InkListItem(null, null);\n\t}\n\tpublic get isNull(){\n\t\treturn this.originName == null && this.itemName == null;\n\t}\n\tget fullName(){\n\t\treturn ((this.originName !== null) ? this.originName : '?') + '.' + this.itemName;\n\t}\n\tpublic toString(): string {\n\t\treturn this.fullName;\n\t}\n\tpublic Equals(obj: InkListItem){\n\t\tif (obj instanceof InkListItem) {\n\t\t\tlet otherItem = obj;\n\t\t\treturn otherItem.itemName == this.itemName\n\t\t\t\t&& otherItem.originName == this.originName;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// These methods did not exist in the original C# code. Their purpose is to\n\t// make `InkListItem` mimics the value-type semantics of the original\n\t// struct. Please refer to the end of this file, for a more in-depth\n\t// explanation.\n\n\t/**\n\t * Returns a shallow clone of the current instance.\n\t */\n\tpublic copy(){\n\t\treturn new InkListItem(this.originName, this.itemName);\n\t}\n\t/**\n\t * Returns a `SerializedInkListItem` representing the current\n\t * instance. The result is intended to be used as a key inside a Map.\n\t */\n\tpublic serialized(): SerializedInkListItem{\n\t\t// We are simply using a JSON representation as a value-typed key.\n\t\treturn JSON.stringify({originName: this.originName, itemName: this.itemName});\n\t}\n\n\t/**\n\t * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n\t */\n\tpublic static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n\t\tlet obj = JSON.parse(key);\n\t\tif (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n\t\tlet inkListItem = obj as IInkListItem;\n\n\t\treturn new InkListItem(inkListItem.originName, inkListItem.itemName);\n\t}\n\n\t/**\n\t * Determines whether the given item is sufficiently `InkListItem`-like\n\t * to be used as a template when reconstructing the InkListItem.\n\t */\n\tprivate static isLikeInkListItem(item: any){\n\t\tif (typeof item !== 'object') return false;\n\t\tif (!item.hasOwnProperty('originName') || !item.hasOwnProperty('itemName')) return false;\n\t\tif (typeof item.originName !== 'string' && typeof item.originName !== null) return false;\n\t\tif (typeof item.itemName !== 'string' && typeof item.itemName !== null) return false;\n\n\t\treturn true;\n\t}\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n\tpublic origins: ListDefinition[] | null = null;\n\tpublic _originNames: string[] | null = [];\n\n\tconstructor()\n\tconstructor(otherList: InkList)\n\tconstructor(singleOriginListName: string, originStory: Story)\n\tconstructor(singleElement: KeyValuePair<InkListItem, number>)\n\tconstructor(){\n\t\t// Trying to be smart here, this emulates the constructor inheritance found\n\t\t// in the original code, but only if otherList is an InkList. IIFE FTW.\n\t\tsuper((() => {\n\t\t\tif (arguments[0] instanceof InkList){\n\t\t\t\treturn arguments[0];\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})());\n\n\t\tif (arguments[0] instanceof InkList){\n\t\t\tlet otherList = arguments[0] as InkList;\n\n\t\t\tif (otherList._originNames) {\n\t\t\t\tthis._originNames = otherList._originNames.slice();\n\t\t\t}\n\t\t}\n\t\telse if (typeof arguments[0] === 'string'){\n\t\t\tlet singleOriginListName = arguments[0] as string;\n\t\t\tlet originStory = arguments[1] /* as Story */;\n\t\t\tthis.SetInitialOriginName(singleOriginListName);\n\n\t\t\tlet def = originStory.listDefinitions.TryListGetDefinition(singleOriginListName, null);\n\t\t\tif (def.exists){\n\t\t\t\tthis.origins = [def.result];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new Error('InkList origin could not be found in story when constructing new list: ' + singleOriginListName);\n\t\t\t}\n\t\t}\n\t\telse if (typeof arguments[0] === 'object' && arguments[0].hasOwnProperty('Key') && arguments[0].hasOwnProperty('Value')){\n\t\t\tlet singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n\t\t\tthis.Add(singleElement.Key, singleElement.Value);\n\t\t}\n\t}\n\n\tpublic AddItem(itemOrItemName: InkListItem | string | null){\n\t\tif (itemOrItemName instanceof InkListItem){\n\t\t\tlet item = itemOrItemName;\n\n\t\t\tif (item.originName == null) {\n\t\t\t\tthis.AddItem(item.itemName);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.origins === null) return throwNullException('this.origins');\n\n\t\t\tfor (let origin of this.origins) {\n\t\t\t\tif (origin.name == item.originName) {\n\t\t\t\t\tlet intVal = origin.TryGetValueForItem(item, 0);\n\t\t\t\t\tif (intVal.exists) {\n\t\t\t\t\t\tthis.Add(item, intVal.result);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Could not add the item ' + item + \" to this list because it doesn't exist in the original list definition in ink.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(\"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\");\n\t\t}\n\t\telse {\n\t\t\tlet itemName = itemOrItemName as string | null;\n\n\t\t\tlet foundListDef: ListDefinition | null = null;\n\n\t\t\tif (this.origins === null) return throwNullException('this.origins');\n\n\t\t\tfor (let origin of this.origins) {\n\t\t\t\tif (itemName === null) return throwNullException('itemName');\n\n\t\t\t\tif (origin.ContainsItemWithName(itemName)) {\n\t\t\t\t\t\tif (foundListDef != null) {\n\t\t\t\t\t\t\tthrow new Error('Could not add the item ' + itemName + ' to this list because it could come from either ' + origin.name + ' or ' + foundListDef.name);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfoundListDef = origin;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (foundListDef == null)\n\t\t\t\tthrow new Error('Could not add the item ' + itemName + \" to this list because it isn't known to any list definitions previously associated with this list.\");\n\n\t\t\tlet item = new InkListItem(foundListDef.name, itemName);\n\t\t\tlet itemVal = foundListDef.ValueForItem(item);\n\t\t\tthis.Add(item, itemVal);\n\t\t}\n\t}\n\tpublic ContainsItemNamed(itemName: string | null){\n\t\tfor (let [key, value] of this) {\n\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\tif (item.itemName == itemName) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\tpublic ContainsKey(key: InkListItem){\n\t\treturn this.has(key.serialized());\n\t}\n\tpublic Add(key: InkListItem, value: number){\n\t\tlet serializedKey = key.serialized();\n\t\tif (this.has(serializedKey)) {\n\t\t\t// Throw an exception to match the C# behavior.\n\t\t\tthrow new Error(`The Map already contains an entry for ${key}`);\n\t\t}\n\t\tthis.set(serializedKey, value);\n\t}\n\tpublic Remove(key: InkListItem){\n\t\treturn this.delete(key.serialized());\n\t}\n\tget Count(){\n\t\treturn this.size;\n\t}\n\tget originOfMaxItem(): ListDefinition | null{\n\t\tif (this.origins == null) return null;\n\n\t\tlet maxOriginName = this.maxItem.Key.originName;\n\t\tlet result = null;\n\t\tthis.origins.every((origin)=>{\n\t\t\tif (origin.name == maxOriginName){\n\t\t\t\tresult = origin;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse return true;\n\t\t});\n\n\t\treturn result;\n\t}\n\tget originNames(): string[]{\n\t\tif (this.Count > 0) {\n\t\t\tif (this._originNames == null && this.Count > 0)\n\t\t\t\tthis._originNames = [];\n\t\t\telse {\n\t\t\t\tif (!this._originNames) this._originNames = [];\n\t\t\t\tthis._originNames.length = 0;\n\t\t\t}\n\n\t\t\tfor (let [key, value] of this) {\n\t\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\t\tif (item.originName === null) return throwNullException('item.originName');\n\t\t\t\tthis._originNames.push(item.originName);\n\t\t\t}\n\t\t}\n\n\t\treturn this._originNames as string[];\n\t}\n\tpublic SetInitialOriginName(initialOriginName: string){\n\t\tthis._originNames = [initialOriginName];\n\t}\n\tpublic SetInitialOriginNames(initialOriginNames: string[]){\n\t\tif (initialOriginNames == null)\n\t\t\tthis._originNames = null;\n\t\telse\n\t\t\tthis._originNames = initialOriginNames.slice();// store a copy\n\t}\n\tget maxItem(){\n\t\tlet max: KeyValuePair<InkListItem, number> = {\n\t\t\tKey: InkListItem.Null,\n\t\t\tValue: 0,\n\t\t};\n\t\tfor (let [key, value] of this) {\n\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\tif (max.Key.isNull || value > max.Value)\n\t\t\t\tmax = { Key: item, Value: value };\n\t\t}\n\n\t\treturn max;\n\t}\n\tget minItem(){\n\t\tlet min: KeyValuePair<InkListItem, number> = {\n\t\t\tKey: InkListItem.Null,\n\t\t\tValue: 0,\n\t\t};\n\t\tfor (let [key, value] of this) {\n\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\tif (min.Key.isNull || value < min.Value) {\n\t\t\t\tmin = { Key: item, Value: value };\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\tget inverse(){\n\t\tlet list = new InkList();\n\t\tif (this.origins != null) {\n\t\t\tfor (let origin of this.origins) {\n\t\t\t\tfor (let [key, value] of origin.items) {\n\t\t\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\t\t\tif (!this.ContainsKey(item))\n\t\t\t\t\t\tlist.Add(item, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tget all(){\n\t\tlet list = new InkList();\n\t\tif (this.origins != null) {\n\t\t\tfor(let origin of this.origins) {\n\t\t\t\tfor (let [key, value] of origin.items) {\n\t\t\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\t\t\tlist.set(item.serialized(), value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tpublic Union(otherList: InkList){\n\t\tlet union = new InkList(this);\n\t\tfor(let [key, value] of otherList) {\n\t\t\tunion.set(key, value);\n\t\t}\n\t\treturn union;\n\t}\n\tpublic Intersect(otherList: InkList){\n\t\tlet intersection = new InkList();\n\t\tfor(let [key, value] of this) {\n\t\t\tif (otherList.has(key))\n\t\t\t\tintersection.set(key, value);\n\t\t}\n\n\t\treturn intersection;\n\t}\n\tpublic Without(listToRemove: InkList){\n\t\tlet result = new InkList(this);\n\t\tfor(let [key, value] of listToRemove) {\n\t\t\tresult.delete(key);\n\t\t}\n\n\t\treturn result;\n\t}\n\tpublic Contains(otherList: InkList){\n\t\tfor(let [key, value] of otherList) {\n\t\t\tif (!this.has(key)) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\tpublic GreaterThan(otherList: InkList){\n\t\tif (this.Count == 0) return false;\n\t\tif (otherList.Count == 0) return true;\n\n\t\treturn this.minItem.Value > otherList.maxItem.Value;\n\t}\n\tpublic GreaterThanOrEquals(otherList: InkList){\n\t\tif (this.Count == 0) return false;\n\t\tif (otherList.Count == 0) return true;\n\n\t\treturn this.minItem.Value >= otherList.minItem.Value\n\t\t\t&& this.maxItem.Value >= otherList.maxItem.Value;\n\t}\n\tpublic LessThan(otherList: InkList){\n\t\tif (otherList.Count == 0) return false;\n\t\tif (this.Count == 0) return true;\n\n\t\treturn this.maxItem.Value < otherList.minItem.Value;\n\t}\n\tpublic LessThanOrEquals(otherList: InkList){\n\t\tif (otherList.Count == 0) return false;\n\t\tif (this.Count == 0) return true;\n\n\t\treturn this.maxItem.Value <= otherList.maxItem.Value\n\t\t\t&& this.minItem.Value <= otherList.minItem.Value;\n\t}\n\tpublic MaxAsList(){\n\t\tif (this.Count > 0)\n\t\t\treturn new InkList(this.maxItem);\n\t\telse\n\t\t\treturn new InkList();\n\t}\n\tpublic MinAsList(){\n\t\tif (this.Count > 0)\n\t\t\treturn new InkList(this.minItem);\n\t\telse\n\t\t\treturn new InkList();\n\t}\n\tpublic ListWithSubRange(minBound: any, maxBound: any)\n\t{\n\t\tif (this.Count == 0) return new InkList();\n\n\t\tlet ordered = this.orderedItems;\n\n\t\tlet minValue = 0;\n\t\tlet maxValue = Number.MAX_SAFE_INTEGER;\n\n\t\tif (Number.isInteger(minBound)) {\n\t\t\tminValue = minBound;\n\t\t} else {\n\t\t\tif (minBound instanceof InkList && minBound.Count > 0 )\n\t\t\t\tminValue = minBound.minItem.Value;\n\t\t}\n\n\t\tif (Number.isInteger(maxBound)) {\n\t\t\tmaxValue = maxBound;\n\t\t} else {\n\t\t\tif (minBound instanceof InkList && (minBound).Count > 0)\n\t\t\t\tmaxValue = maxBound.maxItem.Value;\n\t\t}\n\n\t\tlet subList = new InkList();\n\t\tsubList.SetInitialOriginNames(this.originNames);\n\t\tfor (let item of ordered) {\n\t\t\tif (item.Value >= minValue && item.Value <= maxValue ) {\n\t\t\t\tsubList.Add(item.Key, item.Value);\n\t\t\t}\n\t\t}\n\n\t\treturn subList;\n\t}\n\tpublic Equals(otherInkList: InkList){\n\t\tif (otherInkList instanceof InkList === false) return false;\n\t\tif (otherInkList.Count != this.Count) return false;\n\n\t\tfor(let [key, value] of this) {\n\t\t\tif (!otherInkList.has(key))\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\t// GetHashCode not implemented\n\tget orderedItems() {\n\t\t// List<KeyValuePair<InkListItem, int>>\n\t\tlet ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n\t\tfor(let [key, value] of this) {\n\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\tordered.push({ Key: item, Value: value });\n\t\t}\n\n\t\tordered.sort((x, y) => {\n\t\t\tif (x.Key.originName === null) { return throwNullException('x.Key.originName'); }\n\t\t\tif (y.Key.originName === null) { return throwNullException('y.Key.originName'); }\n\n\t\t\tif (x.Value == y.Value) {\n\t\t\t\treturn x.Key.originName.localeCompare(y.Key.originName);\n\t\t\t} else {\n\t\t\t\t// TODO: refactor this bit into a numberCompareTo method?\n\t\t\t\tif (x.Value < y.Value)\n\t\t\t\t\treturn -1;\n\t\t\t\treturn x.Value > y.Value ? 1 : 0;\n\t\t\t}\n\t\t});\n\n\t\treturn ordered;\n\t}\n\tpublic toString(){\n\t\tlet ordered = this.orderedItems;\n\n\t\tlet sb = new StringBuilder();\n\t\tfor (let i = 0; i < ordered.length; i++) {\n\t\t\tif (i > 0)\n\t\t\t\tsb.Append(', ');\n\n\t\t\tlet item = ordered[i].Key;\n\t\t\tif (item.itemName === null) return throwNullException('item.itemName');\n\t\t\tsb.Append(item.itemName);\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n\t// casting a InkList to a Number, for somereason, actually gives a number.\n\t// This messes up the type detection when creating a Value from a InkList.\n\t// Returning NaN here prevents that.\n\tpublic valueOf(){\n\t\treturn NaN;\n\t}\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem{\n\treadonly originName: string | null;\n\treadonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n\tKey: K;\n\tValue: V;\n}\n","export class StoryException extends Error{\n\n\tpublic useEndLineNumber: boolean;\n\tpublic message: string;\n\tpublic name: string;\n\n\tconstructor(message: string){\n\t\tsuper(message);\n\t\tthis.useEndLineNumber = false;\n\t\tthis.message = message;\n\t\tthis.name = 'StoryException';\n\t}\n}\n","// tslint:disable:jsdoc-format\n/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n\tresult: T;\n\texists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(map: Map<K, V> | null, key: K, /* out */ value: V): TryGetResult<V> {\n\tif (map === null) {\n\t\treturn { result: value, exists: false };\n\t}\n\n\tlet val = map.get(key);\n\n\tif (val) {\n\t\treturn { result: val, exists: true };\n\t} else {\n\t\treturn { result: value, exists: false };\n\t}\n}\n\nexport function tryParseInt(value: any, /* out */ defaultValue: number = 0): TryGetResult<number> {\n\tlet val = parseInt(value);\n\n\tif (!Number.isNaN(val)) {\n\t\treturn { result: val, exists: true };\n\t} else {\n\t\treturn { result: defaultValue, exists: false };\n\t}\n}\n\nexport function tryParseFloat(value: any, /* out */ defaultValue: number = 0): TryGetResult<number> {\n\tlet val = parseFloat(value);\n\n\tif (!Number.isNaN(val)) {\n\t\treturn { result: val, exists: true };\n\t} else {\n\t\treturn { result: defaultValue, exists: false };\n\t}\n}\n","import {InkObject} from './Object';\nimport {Container} from './Container';\n\nexport class SearchResult{\n\tpublic obj: InkObject | null = null;\n\tpublic approximate: boolean = false;\n\n\tget correctObj(){\n\t\treturn this.approximate ? null : this.obj;\n\t}\n\n\tget container(){\n\t\treturn (this.obj instanceof Container) ? this.obj : null;\n\t}\n\n\tpublic copy(){\n\t\tlet searchResult = new SearchResult();\n\t\tsearchResult.obj = this.obj;\n\t\tsearchResult.approximate = this.approximate;\n\n\t\treturn searchResult;\n\t}\n}\n","import {StringValue} from './Value';\nimport {throwNullException} from './NullException';\nimport {StringBuilder} from './StringBuilder';\nimport {INamedContent} from './INamedContent';\nimport {InkObject} from './Object';\nimport {SearchResult} from './SearchResult';\nimport {Path} from './Path';\nimport {Debug} from './Debug';\nimport {tryGetValueFromMap} from './TryGetResult';\nimport {asINamedContentOrNull, asOrNull, asOrThrows} from './TypeAssertion';\n\nexport class Container extends InkObject implements INamedContent{\n\tpublic name: string = '';\n\n\tpublic _content: InkObject[] = [];\n\tpublic namedContent: Map<string, INamedContent> = new Map();\n\n\tpublic visitsShouldBeCounted: boolean = false;\n\tpublic turnIndexShouldBeCounted: boolean = false;\n\tpublic countingAtStartOnly: boolean = false;\n\n\tpublic _pathToFirstLeafContent: Path | null = null;\n\n\tget hasValidName(){\n\t\treturn this.name != null && this.name.length > 0;\n\t}\n\tget content(){\n\t\treturn this._content;\n\t}\n\tset content(value: InkObject[]){\n\t\tthis.AddContent(value);\n\t}\n\tget namedOnlyContent(){\n\t\tlet namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n\t\tfor (let [key, value] of this.namedContent){\n\t\t\tlet inkObject = asOrThrows(value, InkObject);\n\t\t\tnamedOnlyContentDict.set(key, inkObject);\n\t\t}\n\n\t\tfor (let c of this.content){\n\t\t\tlet named = asINamedContentOrNull(c);\n\t\t\tif (named != null && named.hasValidName) {\n\t\t\t\tnamedOnlyContentDict.delete(named.name);\n\t\t\t}\n\t\t}\n\n\t\tif (namedOnlyContentDict.size == 0)\n\t\t\tnamedOnlyContentDict = null;\n\n\t\treturn namedOnlyContentDict;\n\t}\n\tset namedOnlyContent(value: Map<string, InkObject> | null){\n\t\tlet existingNamedOnly = this.namedOnlyContent;\n\t\tif (existingNamedOnly != null) {\n\t\t\tfor (let [key, val] of existingNamedOnly){\n\t\t\t\tthis.namedContent.delete(key);\n\t\t\t}\n\t\t}\n\n\t\tif (value == null)\n\t\t\treturn;\n\n\t\tfor (let [key, val] of value){\n\t\t\tlet named = asINamedContentOrNull(val);\n\t\t\tif (named != null)\n\t\t\t\tthis.AddToNamedContentOnly(named);\n\t\t}\n\t}\n\tget countFlags(): number{\n\t\tlet flags: Container.CountFlags = 0;\n\t\tif (this.visitsShouldBeCounted)    flags |= Container.CountFlags.Visits;\n\t\tif (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n\t\tif (this.countingAtStartOnly)      flags |= Container.CountFlags.CountStartOnly;\n\n\t\tif (flags == Container.CountFlags.CountStartOnly) {\n\t\t\tflags = 0;\n\t\t}\n\n\t\treturn flags;\n\t}\n\tset countFlags(value: number){\n\t\tlet flag: Container.CountFlags = value;\n\t\tif ((flag & Container.CountFlags.Visits) > 0) this.visitsShouldBeCounted = true;\n\t\tif ((flag & Container.CountFlags.Turns) > 0)  this.turnIndexShouldBeCounted = true;\n\t\tif ((flag & Container.CountFlags.CountStartOnly) > 0) this.countingAtStartOnly = true;\n\t}\n\tget pathToFirstLeafContent(){\n\t\tif( this._pathToFirstLeafContent == null )\n\t\t\tthis._pathToFirstLeafContent = this.path.PathByAppendingPath(this.internalPathToFirstLeafContent);\n\n\t\treturn this._pathToFirstLeafContent;\n\t}\n\tget internalPathToFirstLeafContent(){\n\t\tlet components: Path.Component[] = [];\n\t\tlet container: Container = this;\n\t\twhile (container instanceof Container) {\n\t\t\tif (container.content.length > 0) {\n\t\t\t\tcomponents.push(new Path.Component(0));\n\t\t\t\tcontainer = container.content[0] as Container;\n\t\t\t}\n\t\t}\n\t\treturn new Path(components);\n\t}\n\n\tpublic AddContent(contentObjOrList: InkObject | InkObject[]){\n\t\tif (contentObjOrList instanceof Array){\n\t\t\tlet contentList = contentObjOrList as InkObject[];\n\n\t\t\tfor (let c of contentList) {\n\t\t\t\tthis.AddContent(c);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tlet contentObj = contentObjOrList as InkObject;\n\t\t\tthis._content.push(contentObj);\n\n\t\t\tif (contentObj.parent) {\n\t\t\t\tthrow new Error('content is already in ' + contentObj.parent);\n\t\t\t}\n\n\t\t\tcontentObj.parent = this;\n\n\t\t\tthis.TryAddNamedContent(contentObj);\n\t\t}\n\t}\n\tpublic TryAddNamedContent(contentObj: InkObject){\n\t\tlet namedContentObj = asINamedContentOrNull(contentObj);\n\t\tif (namedContentObj != null && namedContentObj.hasValidName){\n\t\t\tthis.AddToNamedContentOnly(namedContentObj);\n\t\t}\n\t}\n\tpublic AddToNamedContentOnly(namedContentObj: INamedContent){\n\t\tDebug.AssertType(namedContentObj, InkObject, 'Can only add Runtime.Objects to a Runtime.Container');\n\t\tlet runtimeObj = asOrThrows(namedContentObj, InkObject);\n\t\truntimeObj.parent = this;\n\n\t\tthis.namedContent.set(namedContentObj.name, namedContentObj);\n\t}\n\tpublic ContentAtPath(path: Path, partialPathStart: number = 0, partialPathLength: number = -1){\n\t\tif (partialPathLength == -1)\n\t\t\tpartialPathLength = path.length;\n\n\t\tlet result = new SearchResult();\n\t\tresult.approximate = false;\n\n\t\tlet currentContainer: Container | null = this;\n\t\tlet currentObj: InkObject = this;\n\n\t\tfor (let i = partialPathStart; i < partialPathLength; ++i) {\n\t\t\tlet comp = path.GetComponent(i);\n\t\t\tif (currentContainer == null) {\n\t\t\t\tresult.approximate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet foundObj: InkObject | null = currentContainer.ContentWithPathComponent(comp);\n\n\t\t\tif (foundObj == null) {\n\t\t\t\tresult.approximate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcurrentObj = foundObj;\n\t\t\tcurrentContainer = asOrNull(foundObj, Container);\n\t\t}\n\n\t\tresult.obj = currentObj;\n\n\t\treturn result;\n\t}\n\tpublic InsertContent(contentObj: InkObject, index: number){\n\t\tthis.content[index] = contentObj;\n\n\t\tif (contentObj.parent) {\n\t\t\tthrow new Error('content is already in ' + contentObj.parent);\n\t\t}\n\n\t\tcontentObj.parent = this;\n\n\t\tthis.TryAddNamedContent(contentObj);\n\t}\n\tpublic AddContentsOfContainer(otherContainer: Container){\n\t\tthis.content = this.content.concat(otherContainer.content);\n\n\t\tfor (let obj of otherContainer.content) {\n\t\t\tobj.parent = this;\n\t\t\tthis.TryAddNamedContent(obj);\n\t\t}\n\t}\n\tpublic ContentWithPathComponent(component: Path.Component): InkObject | null{\n\t\tif (component.isIndex) {\n\n\t\t\tif (component.index >= 0 && component.index < this.content.length) {\n\t\t\t\treturn this.content[component.index];\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t}\n\n\t\telse if (component.isParent) {\n\t\t\treturn this.parent;\n\t\t}\n\n\t\telse {\n\t\t\tif (component.name === null) { return throwNullException('component.name'); }\n\t\t\tlet foundContent = tryGetValueFromMap(this.namedContent, component.name, null);\n\t\t\tif (foundContent.exists){\n\t\t\t\treturn asOrThrows(foundContent.result, InkObject);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\tpublic BuildStringOfHierarchy(): string;\n\tpublic BuildStringOfHierarchy(sb: StringBuilder, indentation: number, pointedObj: InkObject | null): string;\n\tpublic BuildStringOfHierarchy(){\n\t\tlet sb: StringBuilder;\n\t\tif (arguments.length == 0){\n\t\t\tsb = new StringBuilder();\n\t\t\tthis.BuildStringOfHierarchy(sb, 0, null);\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tsb = arguments[0] as StringBuilder;\n\t\tlet indentation = arguments[1] as number;\n\t\tlet pointedObj = arguments[2] as InkObject | null;\n\n\t\tfunction appendIndentation(){\n\t\t\tconst spacesPerIndent = 4; // Truly const in the original code\n\t\t\tfor(let i = 0; i < spacesPerIndent*indentation; ++i) {\n\t\t\t\tsb.Append(' ');\n\t\t\t}\n\t\t}\n\n\t\tappendIndentation();\n\t\tsb.Append('[');\n\n\t\tif (this.hasValidName) {\n\t\t\tsb.AppendFormat(' ({0})', this.name);\n\t\t}\n\n\t\tif (this == pointedObj) {\n\t\t\tsb.Append('  <---');\n\t\t}\n\n\t\tsb.AppendLine();\n\n\t\tindentation++;\n\n\t\tfor (let i = 0; i < this.content.length; ++i) {\n\n\t\t\tlet obj = this.content[i];\n\n\t\t\tif (obj instanceof Container) {\n\n\t\t\t\tlet container = obj as Container;\n\n\t\t\t\tcontainer.BuildStringOfHierarchy(sb, indentation, pointedObj);\n\n\t\t\t} else {\n\t\t\t\tappendIndentation();\n\t\t\t\tif (obj instanceof StringValue) {\n\t\t\t\t\tsb.Append('\\\"');\n\t\t\t\t\tsb.Append(obj.toString().replace('\\n', '\\\\n'));\n\t\t\t\t\tsb.Append('\\\"');\n\t\t\t\t} else {\n\t\t\t\t\tsb.Append(obj.toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i != this.content.length - 1) {\n\t\t\t\tsb.Append(',');\n\t\t\t}\n\n\t\t\tif ( !(obj instanceof Container) && obj == pointedObj ) {\n\t\t\t\tsb.Append('  <---');\n\t\t\t}\n\n\t\t\tsb.AppendLine();\n\t\t}\n\n\t\tlet onlyNamed: Map<string, INamedContent> = new Map();\n\n\t\tfor (let [key, value] of this.namedContent){\n\t\t\tif (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tonlyNamed.set(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (onlyNamed.size > 0) {\n\t\t\tappendIndentation();\n\t\t\tsb.AppendLine('-- named: --');\n\n\t\t\tfor (let [key, value] of onlyNamed){\n\t\t\t\tDebug.AssertType(value, Container, 'Can only print out named Containers');\n\t\t\t\tlet container = value as Container;\n\t\t\t\tcontainer.BuildStringOfHierarchy(sb, indentation, pointedObj);\n\t\t\t\tsb.AppendLine();\n\t\t\t}\n\t\t}\n\n\t\tindentation--;\n\n\t\tappendIndentation();\n\t\tsb.Append(']');\n\t}\n}\n\nexport namespace Container{\n\texport enum CountFlags {\n\t\tVisits = 1,\n\t\tTurns = 2,\n\t\tCountStartOnly = 4,\n\t}\n}\n","import {InkObject} from './Object';\n\nexport class Glue extends InkObject{\n\tpublic toString(){\n\t\treturn 'Glue';\n\t}\n}\n","import {InkObject} from './Object';\n\nexport class ControlCommand extends InkObject{\n\n\tprivate _commandType: ControlCommand.CommandType;\n\n\tget commandType(): ControlCommand.CommandType{\n\t\treturn this._commandType;\n\t}\n\n\tconstructor(commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet){\n\t\tsuper();\n\t\tthis._commandType = commandType;\n\t}\n\n\tpublic Copy(){\n\t\treturn new ControlCommand(this.commandType);\n\t}\n\tpublic static EvalStart(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.EvalStart);\n\t}\n\tpublic static EvalOutput(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.EvalOutput);\n\t}\n\tpublic static EvalEnd(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.EvalEnd);\n\t}\n\tpublic static Duplicate(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.Duplicate);\n\t}\n\tpublic static PopEvaluatedValue(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n\t}\n\tpublic static PopFunction(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.PopFunction);\n\t}\n\tpublic static PopTunnel(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.PopTunnel);\n\t}\n\tpublic static BeginString(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.BeginString);\n\t}\n\tpublic static EndString(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.EndString);\n\t}\n\tpublic static NoOp(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.NoOp);\n\t}\n\tpublic static ChoiceCount(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n\t}\n\tpublic static Turns(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.Turns);\n\t}\n\tpublic static TurnsSince(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.TurnsSince);\n\t}\n\tpublic static ReadCount(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.ReadCount);\n\t}\n\tpublic static Random(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.Random);\n\t}\n\tpublic static SeedRandom(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.SeedRandom);\n\t}\n\tpublic static VisitIndex(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.VisitIndex);\n\t}\n\tpublic static SequenceShuffleIndex(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n\t}\n\tpublic static StartThread(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.StartThread);\n\t}\n\tpublic static Done(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.Done);\n\t}\n\tpublic static End(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.End);\n\t}\n\tpublic static ListFromInt(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.ListFromInt);\n\t}\n\tpublic static ListRange(){\n\t\treturn new ControlCommand(ControlCommand.CommandType.ListRange);\n\t}\n\tpublic static ListRandom(){\n\t\treturn new ControlCommand (ControlCommand.CommandType.ListRandom);\n\t}\n\tpublic toString(){\n\t\treturn this.commandType.toString();\n\t}\n}\n\nexport namespace ControlCommand {\n\texport enum CommandType {\n\t\tNotSet = -1,\n\t\tEvalStart,\n\t\tEvalOutput,\n\t\tEvalEnd,\n\t\tDuplicate,\n\t\tPopEvaluatedValue,\n\t\tPopFunction,\n\t\tPopTunnel,\n\t\tBeginString,\n\t\tEndString,\n\t\tNoOp,\n\t\tChoiceCount,\n\t\tTurns,\n\t\tTurnsSince,\n\t\tRandom,\n\t\tSeedRandom,\n\t\tVisitIndex,\n\t\tSequenceShuffleIndex,\n\t\tStartThread,\n\t\tDone,\n\t\tEnd,\n\t\tListFromInt,\n\t\tListRange,\n\t\tListRandom,\n\t\tReadCount,\n\n\t\tTOTAL_VALUES,\n\t}\n}\n","import {Path} from './Path';\nimport {Container} from './Container';\nimport {InkObject} from './Object';\n\nexport class Pointer{\n  public container: Container | null = null;\n  public index: number = -1;\n\n\tconstructor();\n\tconstructor(container: Container | null, index: number)\n\tconstructor(){\n\t\tif (arguments.length === 2) {\n\t\t\tthis.container = arguments[0];\n\t\t\tthis.index = arguments[1];\n\t\t}\n\t}\n\n\tpublic Resolve(): InkObject | null{\n\t\tif (this.index < 0) return this.container;\n\t\tif (this.container == null) return null;\n\t\tif (this.container.content.length == 0) return this.container;\n\t\tif (this.index >= this.container.content.length) return null;\n\n\t\treturn this.container.content[this.index];\n\t}\n\n\tget isNull(): boolean{\n\t\treturn this.container == null;\n\t}\n\n\tget path(): Path | null{\n\t\tif (this.isNull) return null;\n\n\t\tif (this.index >= 0)\n\t\t\treturn this.container!.path.PathByAppendingComponent(new Path.Component(this.index));\n\t\telse\n\t\t\treturn this.container!.path;\n\t}\n\n\tpublic toString(): string{\n\t\tif (!this.container)\n\t\t\treturn 'Ink Pointer (null)';\n\n\t\treturn 'Ink Pointer -> ' + this.container.path.toString() + ' -- index ' + this.index;\n\t}\n\n\t// This method does not exist in the original C# code, but is here to maintain the\n\t// value semantics of Pointer.\n\tpublic copy(): Pointer{\n\t\treturn new Pointer(this.container, this.index);\n\t}\n\n\tpublic static StartOf(container: Container | null): Pointer{\n\t\treturn new Pointer(container, 0);\n\t}\n\n\tpublic static get Null(): Pointer {\n\t\treturn new Pointer(null, -1);\n\t}\n}\n","import {Path} from './Path';\nimport {PushPopType} from './PushPop';\nimport {StringBuilder} from './StringBuilder';\nimport {InkObject} from './Object';\nimport {Pointer} from './Pointer';\nimport {Container} from './Container';\nimport {throwNullException} from './NullException';\n\nexport class Divert extends InkObject{\n\tget targetPath(){\n\t\tif (this._targetPath != null && this._targetPath.isRelative) {\n\t\t\tlet targetObj = this.targetPointer.Resolve();\n\t\t\tif (targetObj) {\n\t\t\t\tthis._targetPath = targetObj.path;\n\t\t\t}\n\t\t}\n\n\t\treturn this._targetPath;\n\t}\n\tset targetPath(value: Path | null){\n\t\tthis._targetPath = value;\n\t\tthis._targetPointer = Pointer.Null;\n\t}\n\n\tpublic _targetPath: Path | null = null;\n\n\tget targetPointer(){\n\t\tif (this._targetPointer.isNull) {\n\t\t\tlet targetObj = this.ResolvePath(this._targetPath).obj;\n\n\t\t\tif (this._targetPath === null) return throwNullException('this._targetPath');\n\t\t\tif (this._targetPath.lastComponent === null) return throwNullException('this._targetPath.lastComponent');\n\n\t\t\tif (this._targetPath.lastComponent.isIndex) {\n\t\t\t\tif (targetObj === null) return throwNullException('targetObj');\n\t\t\t\tthis._targetPointer.container = (targetObj.parent instanceof Container) ? targetObj.parent : null;\n\t\t\t\tthis._targetPointer.index = this._targetPath.lastComponent.index;\n\t\t\t} else {\n\t\t\t\tthis._targetPointer = Pointer.StartOf((targetObj instanceof Container) ? targetObj : null);\n\t\t\t}\n\t\t}\n\n\t\treturn this._targetPointer.copy();\n\t}\n\n\tpublic _targetPointer: Pointer = Pointer.Null;\n\n\tget targetPathString(){\n\t\tif (this.targetPath == null)\n\t\t\treturn null;\n\n\t\treturn this.CompactPathString(this.targetPath);\n\t}\n\tset targetPathString(value: string | null){\n\t\tif (value == null) {\n\t\t\tthis.targetPath = null;\n\t\t} else {\n\t\t\tthis.targetPath = new Path(value);\n\t\t}\n\t}\n\n\tpublic variableDivertName: string | null = null;\n\tget hasVariableTarget(){\n\t\treturn this.variableDivertName != null;\n\t}\n\n\tpublic pushesToStack: boolean = false;\n\tpublic stackPushType: PushPopType = 0;\n\n\tpublic isExternal: boolean = false;\n\tpublic externalArgs: number = 0;\n\n\tpublic isConditional: boolean = false;\n\n\tconstructor(stackPushType?: PushPopType){\n\t\tsuper();\n\t\tthis.pushesToStack = false;\n\n\t\tif (typeof stackPushType !== 'undefined') {\n\t\t\tthis.pushesToStack = true;\n\t\t\tthis.stackPushType = stackPushType;\n\t\t}\n\t}\n\n\tpublic Equals(obj: Divert | null){\n\t\tlet otherDivert = obj;\n\t\tif (otherDivert instanceof Divert) {\n\t\t\tif (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n\t\t\t\tif (this.hasVariableTarget) {\n\t\t\t\t\treturn this.variableDivertName == otherDivert.variableDivertName;\n\t\t\t\t} else {\n\t\t\t\t\tif (this.targetPath === null) return throwNullException('this.targetPath');\n\t\t\t\t\treturn this.targetPath.Equals(otherDivert.targetPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic toString(){\n\t\tif (this.hasVariableTarget) {\n\t\t\treturn 'Divert(variable: ' + this.variableDivertName + ')';\n\t\t}\n\t\telse if (this.targetPath == null) {\n\t\t\treturn 'Divert(null)';\n\t\t} else {\n\n\t\t\tlet sb = new StringBuilder();\n\n\t\t\tlet targetStr = this.targetPath.toString();\n\t\t\t// int? targetLineNum = DebugLineNumberOfPath (targetPath);\n\t\t\tlet targetLineNum = null;\n\t\t\tif (targetLineNum != null) {\n\t\t\t\ttargetStr = 'line ' + targetLineNum;\n\t\t\t}\n\n\t\t\tsb.Append('Divert');\n\n\t\t\tif (this.isConditional)\n\t\t\t\tsb.Append('?');\n\n\t\t\tif (this.pushesToStack) {\n\t\t\t\tif (this.stackPushType == PushPopType.Function) {\n\t\t\t\t\tsb.Append(' function');\n\t\t\t\t} else {\n\t\t\t\t\tsb.Append(' tunnel');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsb.Append(' -> ');\n\t\t\tsb.Append(this.targetPathString);\n\n\t\t\tsb.Append(' (');\n\t\t\tsb.Append(targetStr);\n\t\t\tsb.Append(')');\n\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n","import {InkObject} from './Object';\nimport {Path} from './Path';\nimport {Container} from './Container';\nimport {throwNullException} from './NullException';\n\nexport class ChoicePoint extends InkObject{\n\tpublic _pathOnChoice: Path | null = null;\n\tpublic hasCondition: boolean = false;\n\tpublic hasStartContent: boolean = false;\n\tpublic hasChoiceOnlyContent: boolean = false;\n\tpublic isInvisibleDefault: boolean = false;\n\tpublic onceOnly: boolean = true;\n\n\tconstructor(onceOnly: boolean = true){\n\t\tsuper();\n\t\tthis.onceOnly = onceOnly;\n\t}\n\tget pathOnChoice(): Path | null{\n\t\tif (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n\t\t\tlet choiceTargetObj = this.choiceTarget;\n\t\t\tif (choiceTargetObj) {\n\t\t\t\tthis._pathOnChoice = choiceTargetObj.path;\n\t\t\t}\n\t\t}\n\t\treturn this._pathOnChoice;\n\t}\n\tset pathOnChoice(value: Path | null){\n\t\tthis._pathOnChoice = value;\n\t}\n\tget choiceTarget(): Container | null{\n\t\tif (this._pathOnChoice === null) return throwNullException('ChoicePoint._pathOnChoice');\n\t\treturn this.ResolvePath(this._pathOnChoice).container;\n\t}\n\tget pathStringOnChoice(): string{\n\t\tif (this.pathOnChoice === null) return throwNullException('ChoicePoint.pathOnChoice');\n\t\treturn this.CompactPathString(this.pathOnChoice);\n\t}\n\tset pathStringOnChoice(value: string){\n\t\tthis.pathOnChoice = new Path(value);\n\t}\n\tget flags(): number{\n\t\tlet flags = 0;\n\t\tif (this.hasCondition)         flags |= 1;\n\t\tif (this.hasStartContent)      flags |= 2;\n\t\tif (this.hasChoiceOnlyContent) flags |= 4;\n\t\tif (this.isInvisibleDefault)   flags |= 8;\n\t\tif (this.onceOnly)             flags |= 16;\n\t\treturn flags;\n\t}\n\tset flags(value: number){\n\t\tthis.hasCondition = (value & 1) > 0;\n\t\tthis.hasStartContent = (value & 2) > 0;\n\t\tthis.hasChoiceOnlyContent = (value & 4) > 0;\n\t\tthis.isInvisibleDefault = (value & 8) > 0;\n\t\tthis.onceOnly = (value & 16) > 0;\n\t}\n\tpublic toString(): string{\n\t\tif (this.pathOnChoice === null) return throwNullException('ChoicePoint.pathOnChoice');\n\t\t// int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n\t\tlet targetLineNum = null;\n\t\tlet targetString = this.pathOnChoice.toString();\n\n\t\tif (targetLineNum != null) {\n\t\t\t targetString = ' line ' + targetLineNum + '('+targetString+')';\n\t\t}\n\n\t\treturn 'Choice: -> ' + targetString;\n\t}\n}\n","import {InkObject} from './Object';\nimport {Path} from './Path';\n\nexport class VariableReference extends InkObject{\n\n\tpublic name: string | null;\n\tpublic pathForCount: Path | null = null;\n\n\tget containerForCount(){\n\t\tif (this.pathForCount === null)\n\t\t\treturn null;\n\t\treturn this.ResolvePath(this.pathForCount).container;\n\t}\n\tget pathStringForCount(){\n\t\tif(this.pathForCount === null)\n\t\t\treturn null;\n\n\t\treturn this.CompactPathString(this.pathForCount);\n\t}\n\tset pathStringForCount(value: string | null){\n\t\tif (value === null)\n\t\t\tthis.pathForCount = null;\n\t\telse\n\t\t\tthis.pathForCount = new Path(value);\n\t}\n\n\tconstructor(name: string | null = null){\n\t\tsuper();\n\t\tthis.name = name;\n\t}\n\n\tpublic toString(){\n\t\tif (this.name != null) {\n\t\t\treturn 'var(' + this.name + ')';\n\t\t} else {\n\t\t\tlet pathStr = this.pathStringForCount;\n\t\t\treturn 'read_count(' + pathStr + ')';\n\t\t}\n\t}\n}\n","import {InkObject} from './Object';\n\nexport class VariableAssignment extends InkObject{\n\n\tpublic readonly variableName: string | null;\n\tpublic readonly isNewDeclaration: boolean;\n\tpublic isGlobal: boolean;\n\n\tconstructor(variableName: string | null, isNewDeclaration: boolean){\n\t\tsuper();\n\t\tthis.variableName = variableName || null;\n\t\tthis.isNewDeclaration = !!isNewDeclaration;\n\t\tthis.isGlobal = false;\n\t}\n\n\tpublic toString(): string{\n\t\treturn 'VarAssign to ' + this.variableName;\n\t}\n}\n","import {InkObject} from './Object';\n\nexport class Void extends InkObject{}\n","import {Value, ValueType, IntValue, ListValue} from './Value';\nimport {StoryException} from './StoryException';\nimport {Void} from './Void';\nimport {Path} from './Path';\nimport {InkList, InkListItem} from './InkList';\nimport {InkObject} from './Object';\nimport {asOrNull, asOrThrows} from './TypeAssertion';\nimport {throwNullException} from './NullException';\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject{\n\t// tslint:disable:variable-name\n\tpublic static readonly Add: string \t\t= '+';\n\tpublic static readonly Subtract: string = '-';\n\tpublic static readonly Divide: string   = '/';\n\tpublic static readonly Multiply: string = '*';\n\tpublic static readonly Mod: string      = '%';\n\tpublic static readonly Negate: string   = '_';\n\tpublic static readonly Equal: string    = '==';\n\tpublic static readonly Greater: string  = '>';\n\tpublic static readonly Less: string     = '<';\n\tpublic static readonly GreaterThanOrEquals: string = '>=';\n\tpublic static readonly LessThanOrEquals: string = '<=';\n\tpublic static readonly NotEquals: string   = '!=';\n\tpublic static readonly Not: string      = '!';\n\tpublic static readonly And: string      = '&&';\n\tpublic static readonly Or: string       = '||';\n\tpublic static readonly Min: string      = 'MIN';\n\tpublic static readonly Max: string      = 'MAX';\n\tpublic static readonly Pow: string      = 'POW';\n\tpublic static readonly Floor: string    = 'FLOOR';\n\tpublic static readonly Ceiling: string  = 'CEILING';\n\tpublic static readonly Int: string      = 'INT';\n\tpublic static readonly Float: string    = 'FLOAT';\n\tpublic static readonly Has: string      = '?';\n\tpublic static readonly Hasnt: string    = '!?';\n\tpublic static readonly Intersect: string = '^';\n\tpublic static readonly ListMin: string   = 'LIST_MIN';\n\tpublic static readonly ListMax: string   = 'LIST_MAX';\n\tpublic static readonly All: string       = 'LIST_ALL';\n\tpublic static readonly Count: string     = 'LIST_COUNT';\n\tpublic static readonly ValueOfList: string = 'LIST_VALUE';\n\tpublic static readonly Invert: string    = 'LIST_INVERT';\n\t// tslint:enable:variable-name\n\n\tpublic static CallWithName(functionName: string){\n\t\treturn new NativeFunctionCall(functionName);\n\t}\n\n\tpublic static CallExistsWithName(functionName: string){\n\t\tthis.GenerateNativeFunctionsIfNecessary();\n\t\treturn this._nativeFunctions!.get(functionName);\n\t}\n\n\tget name(){\n\t\tif (this._name === null) return throwNullException('NativeFunctionCall._name');\n\t\treturn this._name;\n\t}\n\tset name(value: string){\n\t\tthis._name = value;\n\t\tif( !this._isPrototype ) {\n\t\t\tif (NativeFunctionCall._nativeFunctions === null) throwNullException('NativeFunctionCall._nativeFunctions');\n\t\t\telse this._prototype = NativeFunctionCall._nativeFunctions.get(this._name) || null;\n\t\t}\n\t}\n\tpublic _name: string | null = null;\n\n\tget numberOfParameters(){\n\t\tif (this._prototype) {\n\t\t\treturn this._prototype.numberOfParameters;\n\t\t} else {\n\t\t\treturn this._numberOfParameters;\n\t\t}\n\t}\n\tset numberOfParameters(value: number){\n\t\tthis._numberOfParameters = value;\n\t}\n\tpublic _numberOfParameters: number = 0;\n\n\tpublic Call(parameters: InkObject[]): InkObject | null{\n\t\tif (this._prototype) {\n\t\t\treturn this._prototype.Call(parameters);\n\t\t}\n\n\t\tif (this.numberOfParameters != parameters.length) {\n\t\t\tthrow new Error('Unexpected number of parameters');\n\t\t}\n\n\t\tlet hasList  = false;\n\t\tfor (let p of parameters) {\n\t\t\tif (p instanceof Void) throw new StoryException('Attempting to perform operation on a void value. Did you forget to \"return\" a value from a function you called here?');\n\t\t\tif (p instanceof ListValue)\n\t\t\t\thasList = true;\n\t\t}\n\n\t\tif (parameters.length == 2 && hasList){\n\t\t\treturn this.CallBinaryListOperation(parameters);\n\t\t}\n\n\t\tlet coercedParams = this.CoerceValuesToSingleType(parameters);\n\t\tlet coercedType = coercedParams[0].valueType;\n\n\t\tif (coercedType == ValueType.Int) {\n\t\t\treturn this.CallType<number>(coercedParams);\n\t\t} else if (coercedType == ValueType.Float) {\n\t\t\treturn this.CallType<number>(coercedParams);\n\t\t} else if (coercedType == ValueType.String) {\n\t\t\treturn this.CallType<string>(coercedParams);\n\t\t} else if (coercedType == ValueType.DivertTarget) {\n\t\t\treturn this.CallType<Path>(coercedParams);\n\t\t} else if (coercedType == ValueType.List) {\n\t\t\treturn this.CallType<InkList>(coercedParams);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic CallType<T>(parametersOfSingleType: Array<Value<T>>){\n\t\tlet param1 = asOrThrows(parametersOfSingleType[0], Value);\n\t\tlet valType = param1.valueType;\n\n\t\tlet val1 = param1 as Value<T>;\n\n\t\tlet paramCount = parametersOfSingleType.length;\n\n\t\tif (paramCount == 2 || paramCount == 1) {\n\t\t\tif (this._operationFuncs === null) return throwNullException('NativeFunctionCall._operationFuncs');\n\t\t\tlet opForTypeObj = this._operationFuncs.get(valType);\n\t\t\tif (!opForTypeObj) {\n\t\t\t\tthrow new StoryException('Cannot perform operation '+this.name+' on '+valType);\n\t\t\t}\n\n\t\t\tif (paramCount == 2) {\n\t\t\t\tlet param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n\t\t\t\tlet val2 = param2 as Value<T>;\n\n\t\t\t\tlet opForType = opForTypeObj as BinaryOp<T>;\n\n\t\t\t\tif (val1.value === null || val2.value === null) return throwNullException('NativeFunctionCall.Call BinaryOp values');\n\t\t\t\tlet resultVal = opForType(val1.value, val2.value);\n\n\t\t\t\treturn Value.Create(resultVal);\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\tlet opForType = opForTypeObj as UnaryOp<T>;\n\n\t\t\t\tif (val1.value === null) return throwNullException('NativeFunctionCall.Call UnaryOp value');\n\t\t\t\tlet resultVal = opForType(val1.value);\n\n\t\t\t\treturn Value.Create(resultVal);\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthrow new Error('Unexpected number of parameters to NativeFunctionCall: ' + parametersOfSingleType.length);\n\t\t}\n\t}\n\n\tpublic CallBinaryListOperation(parameters: InkObject[]){\n\t\tif ((this.name == '+' || this.name == '-') && parameters[0] instanceof ListValue && parameters[1] instanceof IntValue)\n\t\t\treturn this.CallListIncrementOperation(parameters);\n\n\t\tlet v1 = asOrThrows(parameters[0], Value);\n\t\tlet v2 = asOrThrows(parameters[1], Value);\n\n\t\tif ((this.name == '&&' || this.name == '||') && (v1.valueType != ValueType.List || v2.valueType != ValueType.List)) {\n\t\t\tif (this._operationFuncs === null) return throwNullException('NativeFunctionCall._operationFuncs');\n\t\t\tlet op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\t\t\tif (op === null) return throwNullException('NativeFunctionCall.CallBinaryListOperation op');\n\t\t\tlet result = op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0);\n\t\t\treturn new IntValue(result);\n\t\t}\n\n\t\tif (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n\t\t\treturn this.CallType<InkList>([v1, v2]);\n\n\t\tthrow new StoryException('Can not call use ' + this.name + ' operation on ' + v1.valueType + ' and ' + v2.valueType);\n\t}\n\n\tpublic CallListIncrementOperation(listIntParams: InkObject[]){\n\t\tlet listVal = asOrThrows(listIntParams[0], ListValue);\n\t\tlet intVal = asOrThrows(listIntParams[1], IntValue);\n\n\t\tlet resultInkList = new InkList();\n\n\t\tif (listVal.value === null) return throwNullException('NativeFunctionCall.CallListIncrementOperation listVal.value');\n\t\tfor (let [listItemKey, listItemValue] of listVal.value) {\n\t\t\tlet listItem = InkListItem.fromSerializedKey(listItemKey);\n\n\t\t\tif (this._operationFuncs === null) return throwNullException('NativeFunctionCall._operationFuncs');\n\t\t\tlet intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n\t\t\tif (intVal.value === null) return throwNullException('NativeFunctionCall.CallListIncrementOperation intVal.value');\n\t\t\tlet targetInt = intOp(listItemValue, intVal.value);\n\n\t\t\tlet itemOrigin = null;\n\t\t\tif (listVal.value.origins === null) return throwNullException('NativeFunctionCall.CallListIncrementOperation listVal.value.origins');\n\t\t\tfor (let origin of listVal.value.origins) {\n\t\t\t\tif (origin.name == listItem.originName) {\n\t\t\t\t\titemOrigin = origin;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (itemOrigin != null) {\n\t\t\t\tlet incrementedItem = itemOrigin.TryGetItemWithValue(targetInt, InkListItem.Null);\n\t\t\t\tif (incrementedItem.exists)\n\t\t\t\t\tresultInkList.Add(incrementedItem.result, targetInt);\n\t\t\t}\n\t\t}\n\n\t\treturn new ListValue(resultInkList);\n\t}\n\n\tpublic CoerceValuesToSingleType(parametersIn: InkObject[]){\n\t\tlet valType = ValueType.Int;\n\n\t\tlet specialCaseList: null | ListValue = null;\n\n\t\tfor (let obj of parametersIn) {\n\t\t\tlet val = asOrThrows(obj, Value);\n\t\t\tif (val.valueType > valType) {\n\t\t\t\tvalType = val.valueType;\n\t\t\t}\n\n\t\t\tif (val.valueType == ValueType.List) {\n\t\t\t\t specialCaseList = asOrNull(val, ListValue);\n\t\t\t}\n\t\t}\n\n\t\tlet parametersOut = [];\n\n\t\tif (ValueType[valType] == ValueType[ValueType.List]) {\n\t\t\tfor (let inkObjectVal of parametersIn){\n\t\t\t\tlet val = asOrThrows(inkObjectVal, Value);\n\t\t\t\tif (val.valueType == ValueType.List) {\n\t\t\t\t\tparametersOut.push(val);\n\t\t\t\t} else if (val.valueType == ValueType.Int) {\n\t\t\t\t\tlet intVal = parseInt(val.valueObject);\n\n\t\t\t\t\tspecialCaseList = asOrThrows(specialCaseList, ListValue);\n\t\t\t\t\tif (specialCaseList.value === null) return throwNullException('NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value');\n\t\t\t\t\tlet list = specialCaseList.value.originOfMaxItem;\n\n\t\t\t\t\tif (list === null) return throwNullException('NativeFunctionCall.CoerceValuesToSingleType list');\n\t\t\t\t\tlet item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n\t\t\t\t\tif (item.exists) {\n\t\t\t\t\t\tlet castedValue = new ListValue(item.result, intVal);\n\t\t\t\t\t\tparametersOut.push(castedValue);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthrow new StoryException('Could not find List item with the value ' + intVal + ' in ' + list.name);\n\t\t\t\t} else\n\t\t\t\t\tthrow new StoryException('Cannot mix Lists and ' + val.valueType + ' values in this operation');\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tfor (let inkObjectVal of parametersIn){\n\t\t\t\tlet val = asOrThrows(inkObjectVal, Value);\n\t\t\t\tlet castedValue = val.Cast(valType);\n\t\t\t\tparametersOut.push(castedValue);\n\t\t\t}\n\t\t}\n\n\t\treturn parametersOut;\n\t}\n\n\tconstructor(name: string);\n\tconstructor(name: string, numberOfParameters: number);\n\tconstructor();\n\tconstructor() {\n\t\tsuper();\n\n\t\tif (arguments.length === 0) {\n\t\t\tNativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n\t\t}\n\t\telse if (arguments.length === 1) {\n\t\t\tlet name = arguments[0];\n\t\t\tNativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n\t\t\tthis.name = name;\n\t\t}\n\t\telse if (arguments.length === 2) {\n\t\t\tlet name = arguments[0];\n\t\t\tlet numberOfParameters = arguments[1];\n\n\t\t\tthis._isPrototype = true;\n\t\t\tthis.name = name;\n\t\t\tthis.numberOfParameters = numberOfParameters;\n\t\t}\n\t}\n\n\tpublic static Identity<T>(t: T): any {\n\t\treturn t;\n\t}\n\n\tpublic static GenerateNativeFunctionsIfNecessary(){\n\t\tif (this._nativeFunctions == null) {\n\t\t\tthis._nativeFunctions = new Map();\n\n\t\t\t// Int operations\n\t\t\tthis.AddIntBinaryOp(this.Add,      (x, y) => x + y);\n\t\t\tthis.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n\t\t\tthis.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n\t\t\tthis.AddIntBinaryOp(this.Divide,   (x, y) => Math.round(x / y));\n\t\t\tthis.AddIntBinaryOp(this.Mod,      (x, y) => x % y);\n\t\t\tthis.AddIntUnaryOp(this.Negate,   (x) => -x);\n\n\t\t\tthis.AddIntBinaryOp(this.Equal,    (x, y) => x == y ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.Greater,  (x, y) => x > y  ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.Less,     (x, y) => x < y  ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.NotEquals, (x, y) => x != y ? 1 : 0);\n\t\t\tthis.AddIntUnaryOp(this.Not,       (x) => (x == 0) ? 1 : 0);\n\n\t\t\tthis.AddIntBinaryOp(this.And,      (x, y) => x != 0 && y != 0 ? 1 : 0);\n\t\t\tthis.AddIntBinaryOp(this.Or,       (x, y) => x != 0 || y != 0 ? 1 : 0);\n\n\t\t\tthis.AddIntBinaryOp(this.Max,      (x, y) => Math.max(x, y));\n\t\t\tthis.AddIntBinaryOp(this.Min,      (x, y) => Math.min(x, y));\n\n\t\t\tthis.AddIntBinaryOp(this.Pow,      (x, y) => Math.pow(x, y));\n\t\t\tthis.AddIntUnaryOp(this.Floor,     NativeFunctionCall.Identity);\n\t\t\tthis.AddIntUnaryOp(this.Ceiling,   NativeFunctionCall.Identity);\n\t\t\tthis.AddIntUnaryOp(this.Int,       NativeFunctionCall.Identity);\n\t\t\tthis.AddIntUnaryOp(this.Float,     (x) => x);\n\n\t\t\t// Float operations\n\t\t\tthis.AddFloatBinaryOp(this.Add,      (x, y) => x + y);\n\t\t\tthis.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n\t\t\tthis.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n\t\t\tthis.AddFloatBinaryOp(this.Divide,   (x, y) => x / y);\n\t\t\tthis.AddFloatBinaryOp(this.Mod,      (x, y) => x % y);\n\t\t\tthis.AddFloatUnaryOp(this.Negate,   (x) => -x);\n\n\t\t\tthis.AddFloatBinaryOp(this.Equal,    (x, y) => x == y ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.Greater,  (x, y) => x > y  ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.Less,     (x, y) => x < y  ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y ? 1 : 0);\n\t\t\tthis.AddFloatUnaryOp(this.Not,       (x) => (x == 0.0) ? 1 : 0);\n\n\t\t\tthis.AddFloatBinaryOp(this.And,      (x, y) => x != 0.0 && y != 0.0 ? 1 : 0);\n\t\t\tthis.AddFloatBinaryOp(this.Or,       (x, y) => x != 0.0 || y != 0.0 ? 1 : 0);\n\n\t\t\tthis.AddFloatBinaryOp(this.Max,      (x, y) => Math.max(x, y));\n\t\t\tthis.AddFloatBinaryOp(this.Min,      (x, y) => Math.min(x, y));\n\n\t\t\tthis.AddFloatBinaryOp(this.Pow,      (x, y) => Math.pow(x, y));\n\t\t\tthis.AddFloatUnaryOp(this.Floor,     (x) => Math.floor(x));\n\t\t\tthis.AddFloatUnaryOp(this.Ceiling,   (x) => Math.ceil(x));\n\t\t\tthis.AddFloatUnaryOp(this.Int,       (x) => Math.floor(x));\n\t\t\tthis.AddFloatUnaryOp(this.Float,     NativeFunctionCall.Identity);\n\n\t\t\t// String operations\n\t\t\tthis.AddStringBinaryOp(this.Add,     \t(x, y) => x + y); // concat\n\t\t\tthis.AddStringBinaryOp(this.Equal,   \t(x, y) => x === y ? 1 : 0);\n\t\t\tthis.AddStringBinaryOp(this.NotEquals,(x, y) => !(x === y) ? 1 : 0);\n\t\t\tthis.AddStringBinaryOp(this.Has,      (x, y) => x.includes(y) ? 1 : 0);\n\t\t\tthis.AddStringBinaryOp(this.Hasnt,      (x, y) => x.includes(y) ? 0 : 1);\n\n\t\t\tthis.AddListBinaryOp(this.Add, \t\t (x, y) => x.Union(y));\n\t\t\tthis.AddListBinaryOp(this.Subtract,  (x, y) => x.Without(y));\n\t\t\tthis.AddListBinaryOp(this.Has, \t\t (x, y) => x.Contains(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.Hasnt, \t (x, y) => x.Contains(y) ? 0 : 1);\n\t\t\tthis.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n\t\t\tthis.AddListBinaryOp(this.Equal, \t\t\t\t(x, y) => x.Equals(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.Greater, \t\t\t\t(x, y) => x.GreaterThan(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.Less, \t\t\t\t(x, y) => x.LessThan(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.GreaterThanOrEquals, \t(x, y) => x.GreaterThanOrEquals(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.LessThanOrEquals, \t(x, y) => x.LessThanOrEquals(y) ? 1 : 0);\n\t\t\tthis.AddListBinaryOp(this.NotEquals, \t\t\t(x, y) => !x.Equals(y) ? 1 : 0);\n\n\t\t\tthis.AddListBinaryOp (this.And, \t\t\t\t(x, y) => x.Count > 0 && y.Count > 0 ? 1 : 0);\n\t\t\tthis.AddListBinaryOp (this.Or,  \t\t\t\t(x, y) => x.Count > 0 || y.Count > 0 ? 1 : 0);\n\n\t\t\tthis.AddListUnaryOp(this.Not, (x) => x.Count == 0 ? 1 : 0);\n\n\t\t\tthis.AddListUnaryOp(this.Invert, (x) => x.inverse);\n\t\t\tthis.AddListUnaryOp(this.All, (x) => x.all);\n\t\t\tthis.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n\t\t\tthis.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n\t\t\tthis.AddListUnaryOp(this.Count,  (x) => x.Count);\n\t\t\tthis.AddListUnaryOp(this.ValueOfList,  (x) => x.maxItem.Value);\n\n\t\t\tlet divertTargetsEqual = (d1: Path, d2: Path) => {\n\t\t\t\treturn d1.Equals(d2) ? 1 : 0;\n\t\t\t};\n\t\t\tlet divertTargetsNotEqual = (d1: Path, d2: Path) => {\n\t\t\t\treturn d1.Equals (d2) ? 0 : 1;\n\t\t\t};\n\t\t\tthis.AddOpToNativeFunc(this.Equal, 2, ValueType.DivertTarget, divertTargetsEqual);\n\t\t\tthis.AddOpToNativeFunc(this.NotEquals, 2, ValueType.DivertTarget, divertTargetsNotEqual);\n\t\t}\n\t}\n\n\tpublic AddOpFuncForType(valType: ValueType, op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>): void{\n\t\tif (this._operationFuncs == null) {\n\t\t\tthis._operationFuncs = new Map();\n\t\t}\n\n\t\tthis._operationFuncs.set(valType, op);\n\t}\n\n\tpublic static AddOpToNativeFunc(name: string, args: number, valType: ValueType, op: UnaryOp<any> | BinaryOp<any>): void{\n\t\tif (this._nativeFunctions === null) return throwNullException('NativeFunctionCall._nativeFunctions');\n\t\tlet nativeFunc = this._nativeFunctions.get(name);\n\t\tif (!nativeFunc) {\n\t\t\tnativeFunc = new NativeFunctionCall(name, args);\n\t\t\tthis._nativeFunctions.set(name, nativeFunc);\n\t\t}\n\n\t\tnativeFunc.AddOpFuncForType(valType, op);\n\t}\n\n\tpublic static AddIntBinaryOp(name: string, op: BinaryOp<number>){\n\t\tthis.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n\t}\n\tpublic static AddIntUnaryOp(name: string, op: UnaryOp<number>){\n\t\tthis.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n\t}\n\n\tpublic static AddFloatBinaryOp(name: string, op: BinaryOp<number>){\n\t\tthis.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n\t}\n\tpublic static AddFloatUnaryOp(name: string, op: UnaryOp<number>){\n\t\tthis.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n\t}\n\n\tpublic static AddStringBinaryOp(name: string, op: BinaryOp<string>){\n\t\tthis.AddOpToNativeFunc(name, 2, ValueType.String, op);\n\t}\n\n\tpublic static AddListBinaryOp(name: string, op: BinaryOp<InkList>){\n\t\tthis.AddOpToNativeFunc(name, 2, ValueType.List, op);\n\t}\n\tpublic static AddListUnaryOp(name: string, op: UnaryOp<InkList>){\n\t\tthis.AddOpToNativeFunc(name, 1, ValueType.List, op);\n\t}\n\n\tpublic toString(){\n\t\treturn 'Native \"' + this.name + '\"';\n\t}\n\n\tpublic _prototype: NativeFunctionCall | null = null;\n\tpublic _isPrototype: boolean = false;\n\tpublic _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null = null;\n\tpublic static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n\n}\n","import {InkObject} from './Object';\n\nexport class Tag extends InkObject{\n\n\tpublic readonly text: string;\n\n\tconstructor(tagText: string){\n\t\tsuper();\n\t\tthis.text = tagText.toString() || '';\n\t}\n\n\tpublic toString(): string{\n\t\treturn '# ' + this.text;\n\t}\n}\n","import {Path} from './Path';\nimport {CallStack} from './CallStack';\nimport {throwNullException} from './NullException';\nimport {InkObject} from './Object';\n\nexport class Choice extends InkObject{\n\tpublic text: string = '';\n\tpublic index: number = 0;\n\tpublic threadAtGeneration: CallStack.Thread | null = null;\n\tpublic sourcePath: string = '';\n\tpublic targetPath: Path | null = null;\n\tpublic isInvisibleDefault: boolean = false;\n\tpublic originalThreadIndex: number = 0;\n\n\tget pathStringOnChoice(): string{\n\t\tif (this.targetPath === null) return throwNullException('Choice.targetPath');\n\t\treturn this.targetPath.toString();\n\t}\n\tset pathStringOnChoice(value: string){\n\t\tthis.targetPath = new Path(value);\n\t}\n}\n","import {InkList, InkListItem, SerializedInkListItem} from './InkList';\nimport {ListValue} from './Value';\nimport {TryGetResult} from './TryGetResult';\n\nexport class ListDefinition{\n\tpublic _name: string;\n\tpublic _items: Map<SerializedInkListItem, number> | null;\n\tpublic _itemNameToValues: Map<string, number>;\n\n\tconstructor(name: string, items: Map<string, number> | null){\n\t\tthis._name = name || '';\n\t\tthis._items = null;\n\t\tthis._itemNameToValues = items || new Map();\n\t}\n\tget name(){\n\t\treturn this._name;\n\t}\n\tget items(){\n\t\tif (this._items == null){\n\t\t\tthis._items = new Map();\n\t\t\tfor (let [key, value] of this._itemNameToValues){\n\t\t\t\tlet item = new InkListItem(this.name, key);\n\t\t\t\tthis._items.set(item.serialized(), value);\n\t\t\t}\n\t\t}\n\n\t\treturn this._items;\n\t}\n\n\tpublic ValueForItem(item: InkListItem){\n\t\tif (!item.itemName) return 0;\n\n\t\tlet intVal = this._itemNameToValues.get(item.itemName);\n\t\tif (typeof intVal !== 'undefined')\n\t\t\treturn intVal;\n\t\telse\n\t\t\treturn 0;\n\t}\n\tpublic ContainsItem(item: InkListItem){\n\t\tif (!item.itemName) return false;\n\t\tif (item.originName != this.name) return false;\n\n\t\treturn this._itemNameToValues.has(item.itemName);\n\t}\n\tpublic ContainsItemWithName(itemName: string){\n\t\treturn this._itemNameToValues.has(itemName);\n\t}\n\tpublic TryGetItemWithValue(val: number, /* out */ item: InkListItem): TryGetResult<InkListItem>{\n\t\tfor (let [key, value] of this._itemNameToValues){\n\t\t\tif (value == val) {\n\t\t\t\titem = new InkListItem(this.name, key);\n\t\t\t\treturn { result: item, exists: true };\n\t\t\t}\n\t\t}\n\n\t\titem = InkListItem.Null;\n\t\treturn { result: item, exists: false };\n\t}\n\tpublic TryGetValueForItem(item: InkListItem, /* out */ intVal: number): TryGetResult<number>{\n\t\tif (!item.itemName) return { result: 0, exists: false };\n\t\tlet value = this._itemNameToValues.get(item.itemName);\n\n\t\tif (!value) return { result: 0, exists: false };\n\t\treturn { result: value, exists: true };\n\t}\n}\n","import {InkListItem} from './InkList';\nimport {ListValue} from './Value';\nimport {ListDefinition} from './ListDefinition';\nimport {TryGetResult} from './TryGetResult';\nimport {throwNullException} from './NullException';\n\nexport class ListDefinitionsOrigin{\n\tprotected _lists: Map<string, ListDefinition>;\n\tprotected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n\tconstructor(lists: ListDefinition[]){\n\t\tthis._lists = new Map();\n\t\tthis._allUnambiguousListValueCache = new Map();\n\n\t\tfor (let list of lists){\n\t\t\tthis._lists.set(list.name, list);\n\n\t\t\tfor (let [key, val] of list.items){\n\t\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\t\tlet listValue = new ListValue(item, val);\n\n\t\t\t\tif (!item.itemName) { throw new Error('item.itemName is null or undefined.'); }\n\n\t\t\t\tthis._allUnambiguousListValueCache.set(item.itemName, listValue);\n\t\t\t\tthis._allUnambiguousListValueCache.set(item.fullName, listValue);\n\t\t\t}\n\t\t}\n\t}\n\tget lists(): ListDefinition[]{\n\t\tlet listOfLists: ListDefinition[] = [];\n\n\t\tfor (let [key, value] of this._lists){\n\t\t\tlistOfLists.push(value);\n\t\t}\n\n\t\treturn listOfLists;\n\t}\n\tpublic TryListGetDefinition(name: string | null, /* out */ def: ListDefinition | null): TryGetResult<ListDefinition | null>{\n\t\tif (name === null) { return {result: def, exists: false}; }\n\t\t// initially, this function returns a boolean and the second parameter is an out.\n\t\tlet definition = this._lists.get(name);\n\t\tif (!definition) return { result: def, exists: false };\n\n\t\treturn { result: definition, exists: true };\n\t}\n\tpublic FindSingleItemListWithName(name: string | null){\n\t\tif (name === null) { return throwNullException('name'); }\n\t\tlet val = this._allUnambiguousListValueCache.get(name);\n\n\t\tif (typeof val !== 'undefined'){\n\t\t\treturn val;\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import {Container} from './Container';\nimport {Value, IntValue, FloatValue, StringValue, DivertTargetValue, VariablePointerValue, ListValue} from './Value';\nimport {Glue} from './Glue';\nimport {ControlCommand} from './ControlCommand';\nimport {PushPopType} from './PushPop';\nimport {Divert} from './Divert';\nimport {ChoicePoint} from './ChoicePoint';\nimport {VariableReference} from './VariableReference';\nimport {VariableAssignment} from './VariableAssignment';\nimport {NativeFunctionCall} from './NativeFunctionCall';\nimport {Void} from './Void';\nimport {Tag} from './Tag';\nimport {Path} from './Path';\nimport {Choice} from './Choice';\nimport {ListDefinition} from './ListDefinition';\nimport {ListDefinitionsOrigin} from './ListDefinitionsOrigin';\nimport {InkListItem, InkList} from './InkList';\nimport {InkObject} from './Object';\nimport {JObject} from './JObject';\nimport {asOrNull, asNumberOrThrows} from './TypeAssertion';\nimport {throwNullException} from './NullException';\n\n// tslint:disable no-conditional-assignment\n\nexport class JsonSerialisation{\n\tpublic static ListToJArray(serialisables: InkObject[]){\n\t\tlet jArray: any[] = [];\n\t\tfor (let s of serialisables) {\n\t\t\tjArray.push(this.RuntimeObjectToJToken(s));\n\t\t}\n\t\treturn jArray;\n\t}\n\n\tpublic static JArrayToRuntimeObjList(jArray: any[], skipLast: boolean = false){\n\t\tlet count = jArray.length;\n\t\tif (skipLast)\n\t\t\tcount--;\n\n\t\tlet list: InkObject[] = [];\n\n\t\tfor (let i = 0; i < count; i++){\n\t\t\tlet jTok = jArray[i];\n\t\t\tlet runtimeObj = this.JTokenToRuntimeObject(jTok);\n\t\t\tif (runtimeObj === null) { return throwNullException('runtimeObj'); }\n\t\t\tlist.push(runtimeObj);\n\t\t}\n\n\t\treturn list;\n\t}\n\n\tpublic static DictionaryRuntimeObjsToJObject(dictionary: Map<string, InkObject>){\n\t\tlet jsonObj: JObject = {};\n\n\t\tfor (let [key, value] of dictionary){\n\t\t\tlet runtimeObj = asOrNull(value, InkObject);\n\t\t\tif (runtimeObj != null)\n\t\t\t\tjsonObj[key] = this.RuntimeObjectToJToken(runtimeObj);\n\t\t}\n\n\t\treturn jsonObj;\n\t}\n\n\tpublic static JObjectToDictionaryRuntimeObjs(jObject: JObject){\n\t\tlet dict: Map<string, InkObject> = new Map();\n\n\t\tfor (let key in jObject){\n\t\t\tif (jObject.hasOwnProperty(key)) {\n\t\t\t\tlet inkObject = this.JTokenToRuntimeObject(jObject[key]);\n\t\t\t\tif (inkObject === null) { return throwNullException('inkObject'); }\n\t\t\t\tdict.set(key, inkObject);\n\t\t\t}\n\t\t}\n\n\t\treturn dict;\n\t}\n\n\tpublic static JObjectToIntDictionary(jObject: JObject){\n\t\tlet dict: Map<string, number> = new Map();\n\t\tfor (let key in jObject){\n\t\t\tif (jObject.hasOwnProperty(key)) {\n\t\t\t\tdict.set(key, parseInt(jObject[key]));\n\t\t\t}\n\t\t}\n\t\treturn dict;\n\t}\n\tpublic static IntDictionaryToJObject(dict: Map<string, number>){\n\t\tlet jObj: JObject = {};\n\t\tfor (let [key, value] of dict){\n\t\t\tjObj[key] = asNumberOrThrows(value);\n\t\t}\n\t\treturn jObj;\n\t}\n\tpublic static JTokenToRuntimeObject(token: any): InkObject | null {\n\t\tif (typeof token === 'number' && !isNaN(token)){\n\t\t\treturn Value.Create(token);\n\t\t}\n\n\t\tif (typeof token === 'string'){\n\t\t\tlet str = token.toString();\n\n\t\t\t// String value\n\t\t\tlet firstChar = str[0];\n\t\t\tif (firstChar == '^')\n\t\t\t\treturn new StringValue(str.substring(1));\n\t\t\telse if(firstChar == '\\n' && str.length == 1)\n\t\t\t\treturn new StringValue('\\n');\n\n\t\t\t// Glue\n\t\t\tif (str == '<>') return new Glue();\n\n\t\t\t// Control commands (would looking up in a hash set be faster?)\n\t\t\tfor (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n\t\t\t\tlet cmdName = JsonSerialisation._controlCommandNames[i];\n\t\t\t\tif (str == cmdName) {\n\t\t\t\t\treturn new ControlCommand(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Native functions\n\t\t\tif (str == 'L^') str = '^';\n\t\t\tif( NativeFunctionCall.CallExistsWithName(str) )\n\t\t\t\treturn NativeFunctionCall.CallWithName(str);\n\n\t\t\t// Pop\n\t\t\tif (str == '->->')\n\t\t\t\treturn ControlCommand.PopTunnel();\n\t\t\telse if (str == '~ret')\n\t\t\t\treturn ControlCommand.PopFunction();\n\n\t\t\t// Void\n\t\t\tif (str == 'void')\n\t\t\t\treturn new Void ();\n\t\t}\n\n\t\tif (typeof token === 'object' && !Array.isArray(token)){\n\t\t\tlet obj: JObject = token;\n\t\t\tlet propValue;\n\n\t\t\t// Divert target value to path\n\t\t\tif (obj['^->']){\n\t\t\t\tpropValue = obj['^->'];\n\t\t\t\treturn new DivertTargetValue(new Path(propValue.toString()));\n\t\t\t}\n\n\t\t\t// VariablePointerValue\n\t\t\tif (obj['^var']) {\n\t\t\t\tpropValue = obj['^var'];\n\t\t\t\tlet varPtr = new VariablePointerValue(propValue.toString());\n\t\t\t\tif ('ci' in obj){\n\t\t\t\t\tpropValue = obj['ci'];\n\t\t\t\t\tvarPtr.contextIndex = parseInt(propValue);\n\t\t\t\t}\n\t\t\t\treturn varPtr;\n\t\t\t}\n\n\t\t\t// Divert\n\t\t\tlet isDivert = false;\n\t\t\tlet pushesToStack = false;\n\t\t\tlet divPushType = PushPopType.Function;\n\t\t\tlet external = false;\n\t\t\tif (propValue = obj['->']) {\n\t\t\t\tisDivert = true;\n\t\t\t}\n\t\t\telse if (propValue = obj['f()']) {\n\t\t\t\tisDivert = true;\n\t\t\t\tpushesToStack = true;\n\t\t\t\tdivPushType = PushPopType.Function;\n\t\t\t}\n\t\t\telse if (propValue = obj['->t->']) {\n\t\t\t\tisDivert = true;\n\t\t\t\tpushesToStack = true;\n\t\t\t\tdivPushType = PushPopType.Tunnel;\n\t\t\t}\n\t\t\telse if (propValue = obj['x()']) {\n\t\t\t\tisDivert = true;\n\t\t\t\texternal = true;\n\t\t\t\tpushesToStack = false;\n\t\t\t\tdivPushType = PushPopType.Function;\n\t\t\t}\n\n\t\t\tif (isDivert) {\n\t\t\t\tlet divert = new Divert();\n\t\t\t\tdivert.pushesToStack = pushesToStack;\n\t\t\t\tdivert.stackPushType = divPushType;\n\t\t\t\tdivert.isExternal = external;\n\n\t\t\t\tlet target = propValue.toString();\n\n\t\t\t\tif (propValue = obj['var'])\n\t\t\t\t\tdivert.variableDivertName = target;\n\t\t\t\telse\n\t\t\t\t\tdivert.targetPathString = target;\n\n\t\t\t\tdivert.isConditional = !!obj['c'];\n\n\t\t\t\tif (external) {\n\t\t\t\t\tif (propValue = obj['exArgs'])\n\t\t\t\t\t\tdivert.externalArgs = parseInt(propValue);\n\t\t\t\t}\n\n\t\t\t\treturn divert;\n\t\t\t}\n\n\t\t\t// Choice\n\t\t\tif (propValue = obj['*']) {\n\t\t\t\tlet choice = new ChoicePoint();\n\t\t\t\tchoice.pathStringOnChoice = propValue.toString();\n\n\t\t\t\tif (propValue = obj['flg'])\n\t\t\t\t\tchoice.flags = parseInt(propValue);\n\n\t\t\t\treturn choice;\n\t\t\t}\n\n\t\t\t// Variable reference\n\t\t\tif (propValue = obj['VAR?']) {\n\t\t\t\treturn new VariableReference(propValue.toString());\n\t\t\t} else if (propValue = obj['CNT?']) {\n\t\t\t\tlet readCountVarRef = new VariableReference();\n\t\t\t\treadCountVarRef.pathStringForCount = propValue.toString();\n\t\t\t\treturn readCountVarRef;\n\t\t\t}\n\n\t\t\t// Variable assignment\n\t\t\tlet isVarAss = false;\n\t\t\tlet isGlobalVar = false;\n\t\t\tif (propValue = obj['VAR=']) {\n\t\t\t\tisVarAss = true;\n\t\t\t\tisGlobalVar = true;\n\t\t\t} else if (propValue = obj['temp=']) {\n\t\t\t\tisVarAss = true;\n\t\t\t\tisGlobalVar = false;\n\t\t\t}\n\t\t\tif (isVarAss) {\n\t\t\t\tlet varName = propValue.toString();\n\t\t\t\tlet isNewDecl = !obj['re'];\n\t\t\t\tlet varAss = new VariableAssignment(varName, isNewDecl);\n\t\t\t\tvarAss.isGlobal = isGlobalVar;\n\t\t\t\treturn varAss;\n\t\t\t}\n\t\t\tif (obj['#'] !== undefined){\n\t\t\t\tpropValue = obj['#'];\n\t\t\t\treturn new Tag(propValue.toString());\n\t\t\t}\n\n\t\t\t// List value\n\t\t\tif (propValue = obj['list']) {\n\t\t\t\t// var listContent = (Dictionary<string, object>)propValue;\n\t\t\t\tlet listContent: JObject = propValue;\n\t\t\t\tlet rawList = new InkList();\n\t\t\t\tif (propValue = obj['origins']) {\n\t\t\t\t\t// var namesAsObjs = (List<object>)propValue;\n\t\t\t\t\tlet namesAsObjs = propValue as string[];\n\t\t\t\t\t// rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n\t\t\t\t\trawList.SetInitialOriginNames(namesAsObjs);\n\t\t\t\t}\n\n\t\t\t\tfor (let key in listContent){\n\t\t\t\t\tif (listContent.hasOwnProperty(key)) {\n\t\t\t\t\t\tlet nameToVal = listContent[key];\n\t\t\t\t\t\tlet item = new InkListItem(key);\n\t\t\t\t\t\tlet val = parseInt(nameToVal);\n\t\t\t\t\t\trawList.Add(item, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new ListValue(rawList);\n\t\t\t}\n\n\t\t\tif (obj['originalChoicePath'] != null)\n\t\t\t\treturn this.JObjectToChoice(obj);\n\t\t}\n\n\t\t// Array is always a Runtime.Container\n\t\tif (Array.isArray(token)){\n\t\t\treturn this.JArrayToContainer(token);\n\t\t}\n\n\t\tif (token === null || token === undefined)\n\t\t\treturn null;\n\n\t\tthrow new Error('Failed to convert token to runtime object: ' + JSON.stringify(token));\n\t}\n\n\tpublic static RuntimeObjectToJToken(obj: InkObject){\n\t\t// var container = obj as Container;\n\t\tlet container = asOrNull(obj, Container);\n\t\tif (container) {\n\t\t\treturn this.ContainerToJArray(container);\n\t\t}\n\n\t\t// var divert = obj as Divert;\n\t\tlet divert = asOrNull(obj, Divert);\n\t\tif (divert) {\n\t\t\tlet divTypeKey = '->';\n\t\t\tif (divert.isExternal)\n\t\t\t\tdivTypeKey = 'x()';\n\t\t\telse if (divert.pushesToStack) {\n\t\t\t\tif (divert.stackPushType == PushPopType.Function)\n\t\t\t\t\tdivTypeKey = 'f()';\n\t\t\t\telse if (divert.stackPushType == PushPopType.Tunnel)\n\t\t\t\t\tdivTypeKey = '->t->';\n\t\t\t}\n\n\t\t\tlet targetStr;\n\t\t\tif (divert.hasVariableTarget)\n\t\t\t\ttargetStr = divert.variableDivertName;\n\t\t\telse\n\t\t\t\ttargetStr = divert.targetPathString;\n\n\t\t\tlet jObj: JObject = {};\n\t\t\tjObj[divTypeKey] = targetStr;\n\n\t\t\tif (divert.hasVariableTarget)\n\t\t\t\tjObj['var'] = true;\n\n\t\t\tif (divert.isConditional)\n\t\t\t\tjObj['c'] = true;\n\n\t\t\tif (divert.externalArgs > 0)\n\t\t\t\tjObj['exArgs'] = divert.externalArgs;\n\n\t\t\treturn jObj;\n\t\t}\n\n\t\t// var choicePoint = obj as ChoicePoint;\n\t\tlet choicePoint = asOrNull(obj, ChoicePoint);\n\t\tif (choicePoint) {\n\t\t\tlet jObj: JObject = {};\n\t\t\tjObj['*'] = choicePoint.pathStringOnChoice;\n\t\t\tjObj['flg'] = choicePoint.flags;\n\t\t\treturn jObj;\n\t\t}\n\n\t\t// var intVal = obj as IntValue;\n\t\tlet intVal = asOrNull(obj, IntValue);\n\t\tif (intVal)\n\t\t\treturn intVal.value;\n\n\t\t// var floatVal = obj as FloatValue;\n\t\tlet floatVal = asOrNull(obj, FloatValue);\n\t\tif (floatVal)\n\t\t\treturn floatVal.value;\n\n\t\t// var strVal = obj as StringValue;\n\t\tlet strVal = asOrNull(obj, StringValue);\n\t\tif (strVal) {\n\t\t\tif (strVal.isNewline)\n\t\t\t\treturn '\\n';\n\t\t\telse\n\t\t\t\treturn '^' + strVal.value;\n\t\t}\n\n\t\t// var listVal = obj as ListValue;\n\t\tlet listVal = asOrNull(obj, ListValue);\n\t\tif (listVal) {\n\t\t\treturn this.InkListToJObject(listVal);\n\t\t}\n\n\t\t// var divTargetVal = obj as DivertTargetValue;\n\t\tlet divTargetVal = asOrNull(obj, DivertTargetValue);\n\t\tif (divTargetVal) {\n\t\t\tlet divTargetJsonObj: JObject = {};\n\t\t\tif (divTargetVal.value === null) { return throwNullException('divTargetVal.value'); }\n\t\t\tdivTargetJsonObj['^->'] = divTargetVal.value.componentsString;\n\t\t\treturn divTargetJsonObj;\n\t\t}\n\n\t\t// var varPtrVal = obj as VariablePointerValue;\n\t\tlet varPtrVal = asOrNull(obj, VariablePointerValue);\n\t\tif (varPtrVal) {\n\t\t\tlet varPtrJsonObj: JObject = {};\n\t\t\tvarPtrJsonObj['^var'] = varPtrVal.value;\n\t\t\tvarPtrJsonObj['ci'] = varPtrVal.contextIndex;\n\t\t\treturn varPtrJsonObj;\n\t\t}\n\n\t\t// var glue = obj as Runtime.Glue;\n\t\tlet glue = asOrNull(obj, Glue);\n\t\tif (glue) return '<>';\n\n\t\t// var controlCmd = obj as ControlCommand;\n\t\tlet controlCmd = asOrNull(obj, ControlCommand);\n\t\tif (controlCmd) {\n\t\t\treturn JsonSerialisation._controlCommandNames[controlCmd.commandType];\n\t\t}\n\n\t\t// var nativeFunc = obj as Runtime.NativeFunctionCall;\n\t\tlet nativeFunc = asOrNull(obj, NativeFunctionCall);\n\t\tif (nativeFunc) {\n\t\t\tlet name = nativeFunc.name;\n\n\t\t\tif (name == '^') name = 'L^';\n\t\t\treturn name;\n\t\t}\n\n\t\t// Variable reference\n\t\t// var varRef = obj as VariableReference;\n\t\tlet varRef = asOrNull(obj, VariableReference);\n\t\tif (varRef) {\n\t\t\tlet jObj: JObject = {};\n\t\t\tlet readCountPath = varRef.pathStringForCount;\n\t\t\tif (readCountPath != null) {\n\t\t\t\tjObj['CNT?'] = readCountPath;\n\t\t\t} else {\n\t\t\t\tjObj['VAR?'] = varRef.name;\n\t\t\t}\n\n\t\t\treturn jObj;\n\t\t}\n\n\t\t// Variable assignment\n\t\t// var varAss = obj as VariableAssignment;\n\t\tlet varAss = asOrNull(obj, VariableAssignment);\n\t\tif (varAss) {\n\t\t\tlet key = varAss.isGlobal ? 'VAR=' : 'temp=';\n\t\t\tlet jObj: JObject = {};\n\t\t\tjObj[key] = varAss.variableName;\n\n\t\t\t// Reassignment?\n\t\t\tif (!varAss.isNewDeclaration)\n\t\t\t\tjObj['re'] = true;\n\n\t\t\treturn jObj;\n\t\t}\n\n\t\t// var voidObj = obj as Void;\n\t\tlet voidObj = asOrNull(obj, Void);\n\t\tif (voidObj)\n\t\t\treturn 'void';\n\n\t\t// var tag = obj as Tag;\n\t\tlet tag = asOrNull(obj, Tag);\n\t\tif (tag) {\n\t\t\tlet jObj: JObject = {};\n\t\t\tjObj['#'] = tag.text;\n\t\t\treturn jObj;\n\t\t}\n\n\t\t// Used when serialising save state only\n\t\t// var choice = obj as Choice;\n\t\tlet choice = asOrNull(obj, Choice);\n\t\tif (choice)\n\t\t\treturn this.ChoiceToJObject(choice);\n\n\t\tthrow new Error('Failed to convert runtime object to Json token: ' + obj);\n\t}\n\n\tpublic static ContainerToJArray(container: Container){\n\t\tlet jArray = this.ListToJArray(container.content);\n\n\t\tlet namedOnlyContent = container.namedOnlyContent;\n\t\tlet countFlags = container.countFlags;\n\t\tif (namedOnlyContent != null && namedOnlyContent.size > 0 || countFlags > 0 || container.name != null) {\n\n\t\t\tlet terminatingObj;\n\t\t\tif (namedOnlyContent != null) {\n\t\t\t\tterminatingObj = this.DictionaryRuntimeObjsToJObject(namedOnlyContent);\n\n\t\t\t\tfor (let key in terminatingObj){\n\t\t\t\t\tif (terminatingObj.hasOwnProperty(key)) {\n\t\t\t\t\t\t// var subContainerJArray = namedContentObj.Value as JArray;\n\t\t\t\t\t\tlet subContainerJArray = terminatingObj[key];\n\t\t\t\t\t\tif (subContainerJArray != null) {\n\t\t\t\t\t\t\t// var attrJObj = subContainerJArray [subContainerJArray.Count - 1] as JObject;\n\t\t\t\t\t\t\tlet attrJObj = subContainerJArray[subContainerJArray.length - 1] as JObject;\n\t\t\t\t\t\t\tif (attrJObj != null) {\n\t\t\t\t\t\t\t\tdelete attrJObj['#n'];\n\t\t\t\t\t\t\t\tif (Object.keys(attrJObj).length == 0)\n\t\t\t\t\t\t\t\t\tsubContainerJArray[subContainerJArray.length - 1] = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else\n\t\t\t\tterminatingObj = {};\n\n\t\t\tif( countFlags > 0 )\n\t\t\t\tterminatingObj['#f'] = countFlags;\n\n\t\t\tif( container.name != null )\n\t\t\t\tterminatingObj['#n'] = container.name;\n\n\t\t\tjArray.push(terminatingObj);\n\t\t}\n\n\t\t// Add null terminator to indicate that there's no dictionary\n\t\telse {\n\t\t\tjArray.push(null);\n\t\t}\n\n\t\treturn jArray;\n\t}\n\n\tpublic static JArrayToContainer(jArray: any[]){\n\t\tlet container = new Container();\n\t\tcontainer.content = this.JArrayToRuntimeObjList(jArray, true);\n\n\t\tlet terminatingObj = jArray[jArray.length - 1] as JObject;\n\t\tif (terminatingObj != null) {\n\n\t\t\tlet namedOnlyContent = new Map();\n\n\t\t\tfor (let key in terminatingObj){\n\t\t\t\tif (key == '#f') {\n\t\t\t\t\tcontainer.countFlags = parseInt(terminatingObj[key]);\n\t\t\t\t} else if (key == '#n') {\n\t\t\t\t\tcontainer.name = terminatingObj[key].toString();\n\t\t\t\t} else {\n\t\t\t\t\tlet namedContentItem = this.JTokenToRuntimeObject(terminatingObj[key]);\n\t\t\t\t\t// var namedSubContainer = namedContentItem as Container;\n\t\t\t\t\tlet namedSubContainer = asOrNull(namedContentItem, Container);\n\t\t\t\t\tif (namedSubContainer)\n\t\t\t\t\t\tnamedSubContainer.name = key;\n\t\t\t\t\tnamedOnlyContent.set(key, namedContentItem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontainer.namedOnlyContent = namedOnlyContent;\n\t\t}\n\n\t\treturn container;\n\t}\n\n\tpublic static JObjectToChoice(jObj: JObject){\n\t\tlet choice = new Choice();\n\t\tchoice.text = jObj['text'].toString();\n\t\tchoice.index = parseInt(jObj['index']);\n\t\tchoice.sourcePath = jObj['originalChoicePath'].toString();\n\t\tchoice.originalThreadIndex = parseInt(jObj['originalThreadIndex']);\n\t\tchoice.pathStringOnChoice = jObj['targetPath'].toString();\n\t\treturn choice;\n\t}\n\n\tpublic static ChoiceToJObject(choice: Choice){\n\t\tlet jObj: JObject = {};\n\t\tjObj['text'] = choice.text;\n\t\tjObj['index'] = choice.index;\n\t\tjObj['originalChoicePath'] = choice.sourcePath;\n\t\tjObj['originalThreadIndex'] = choice.originalThreadIndex;\n\t\tjObj['targetPath'] = choice.pathStringOnChoice;\n\t\treturn jObj;\n\t}\n\n\tpublic static InkListToJObject(listVal: ListValue){\n\t\tlet rawList = listVal.value;\n\t\tif (rawList === null) { return throwNullException('rawList'); }\n\n\t\tlet dict: JObject = {};\n\n\t\tlet content: JObject = {};\n\n\t\tfor (let [key, val] of rawList) {\n\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\tcontent[item.toString()] = val;\n\t\t}\n\n\t\tdict['list'] = content;\n\n\t\tif (rawList.Count == 0 && rawList.originNames != null && rawList.originNames.length > 0) {\n\t\t\t// dict[\"origins\"] = rawList.originNames.Cast<object> ().ToList ();\n\t\t\tdict['origins'] = rawList.originNames;\n\t\t}\n\n\t\treturn dict;\n\t}\n\n\tpublic static ListDefinitionsToJToken(origin: ListDefinitionsOrigin){\n\t\tlet result: JObject = {};\n\n\t\tfor (let def of origin.lists) {\n\t\t\tlet listDefJson: JObject = {};\n\n\t\t\tfor (let [key, val] of def.items) {\n\t\t\t\tlet item = InkListItem.fromSerializedKey(key);\n\t\t\t\tif (item.itemName === null) { return throwNullException('item.itemName'); }\n\t\t\t\tlistDefJson[item.itemName] = val;\n\t\t\t}\n\n\t\t\tresult[def.name] = listDefJson;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic static JTokenToListDefinitions(obj: JObject){\n\t\t// var defsObj = (Dictionary<string, object>)obj;\n\t\tlet defsObj = obj;\n\n\t\tlet allDefs: ListDefinition[] = [];\n\n\t\tfor (let key in defsObj){\n\t\t\tif (defsObj.hasOwnProperty(key)) {\n\t\t\t\tlet name = key.toString();\n\t\t\t\t// var listDefJson = (Dictionary<string, object>)kv.Value;\n\t\t\t\tlet listDefJson: JObject = defsObj[key];\n\n\t\t\t\t// Cast (string, object) to (string, int) for items\n\t\t\t\tlet items: Map<string, number> = new Map();\n\n\t\t\t\tfor (let nameValueKey in listDefJson){\n\t\t\t\t\tif (defsObj.hasOwnProperty(key)) {\n\t\t\t\t\t\tlet nameValue = listDefJson[nameValueKey];\n\t\t\t\t\t\titems.set(nameValueKey, parseInt(nameValue));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet def = new ListDefinition(name, items);\n\t\t\t\tallDefs.push(def);\n\t\t\t}\n\t\t}\n\n\t\treturn new ListDefinitionsOrigin(allDefs);\n\t}\n\n\tprivate static _controlCommandNames = (() => {\n\t\tlet _controlCommandNames: string[] = [];\n\n\t\t_controlCommandNames[ControlCommand.CommandType.EvalStart] = 'ev';\n\t\t_controlCommandNames[ControlCommand.CommandType.EvalOutput] = 'out';\n\t\t_controlCommandNames[ControlCommand.CommandType.EvalEnd] = '/ev';\n\t\t_controlCommandNames[ControlCommand.CommandType.Duplicate] = 'du';\n\t\t_controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = 'pop';\n\t\t_controlCommandNames[ControlCommand.CommandType.PopFunction] = '~ret';\n\t\t_controlCommandNames[ControlCommand.CommandType.PopTunnel] = '->->';\n\t\t_controlCommandNames[ControlCommand.CommandType.BeginString] = 'str';\n\t\t_controlCommandNames[ControlCommand.CommandType.EndString] = '/str';\n\t\t_controlCommandNames[ControlCommand.CommandType.NoOp] = 'nop';\n\t\t_controlCommandNames[ControlCommand.CommandType.ChoiceCount] = 'choiceCnt';\n\t\t_controlCommandNames[ControlCommand.CommandType.Turns] = 'turn';\n\t\t_controlCommandNames[ControlCommand.CommandType.TurnsSince] = 'turns';\n\t\t_controlCommandNames[ControlCommand.CommandType.ReadCount] = 'readc';\n\t\t_controlCommandNames[ControlCommand.CommandType.Random] = 'rnd';\n\t\t_controlCommandNames[ControlCommand.CommandType.SeedRandom] = 'srnd';\n\t\t_controlCommandNames[ControlCommand.CommandType.VisitIndex] = 'visit';\n\t\t_controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] = 'seq';\n\t\t_controlCommandNames[ControlCommand.CommandType.StartThread] = 'thread';\n\t\t_controlCommandNames[ControlCommand.CommandType.Done] = 'done';\n\t\t_controlCommandNames[ControlCommand.CommandType.End] = 'end';\n\t\t_controlCommandNames[ControlCommand.CommandType.ListFromInt] = 'listInt';\n\t\t_controlCommandNames[ControlCommand.CommandType.ListRange] = 'range';\n\t\t_controlCommandNames[ControlCommand.CommandType.ListRandom] = 'lrnd';\n\n\t\tfor (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n\t\t\tif (_controlCommandNames[i] == null)\n\t\t\t\tthrow new Error('Control command not accounted for in serialisation');\n\t\t}\n\n\t\treturn _controlCommandNames;\n\t})();\n}\n","import {PushPopType} from './PushPop';\nimport {Path} from './Path';\nimport {Story} from './Story';\nimport {StoryException} from './StoryException';\nimport {JsonSerialisation} from './JsonSerialisation';\nimport {ListValue} from './Value';\nimport {StringBuilder} from './StringBuilder';\nimport {Pointer} from './Pointer';\nimport {InkObject} from './Object';\nimport {Container} from './Container';\nimport {Debug} from './Debug';\nimport {tryGetValueFromMap} from './TryGetResult';\nimport {throwNullException} from './NullException';\n\nexport class CallStack{\n\tget elements(){\n\t\treturn this.callStack;\n\t}\n\n\tget depth(){\n\t\treturn this.elements.length;\n\t}\n\n\tget currentElement(){\n\t\tlet thread = this._threads[this._threads.length - 1];\n\t\tlet cs = thread.callstack;\n\t\treturn cs[cs.length - 1];\n\t}\n\n\tget currentElementIndex(){\n\t\treturn this.callStack.length - 1;\n\t}\n\n\tget currentThread(): CallStack.Thread {\n\t\treturn this._threads[this._threads.length - 1];\n\t}\n\tset currentThread(value: CallStack.Thread){\n\t\tDebug.Assert(this._threads.length == 1, \"Shouldn't be directly setting the current thread when we have a stack of them\");\n\n\t\tthis._threads.length = 0;\n\t\tthis._threads.push(value);\n\t}\n\n\tget canPop(){\n\t\treturn this.callStack.length > 1;\n\t}\n\n\tconstructor(storyContext: Story)\n\tconstructor(toCopy: CallStack)\n\tconstructor(){\n\t\tif (arguments[0] instanceof Story) {\n\t\t\tlet storyContext = arguments[0] as Story;\n\n\t\t\tthis._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n\t\t\tthis.Reset();\n\t\t} else {\n\t\t\tlet toCopy = arguments[0] as CallStack;\n\n\t\t\tthis._threads = [];\n\t\t\tfor (let otherThread of toCopy._threads) {\n\t\t\t\tthis._threads.push(otherThread.Copy());\n\t\t\t}\n\t\t\tthis._startOfRoot = toCopy._startOfRoot;\n\t\t}\n\t}\n\n\tpublic Reset() {\n\t\tthis._threads = [];\n\t\tthis._threads.push(new CallStack.Thread());\n\n\t\tthis._threads[0].callstack.push(new CallStack.Element(PushPopType.Tunnel, this._startOfRoot));\n\t}\n\n\tpublic SetJsonToken(jObject: any, storyContext: Story){\n\t\tthis._threads.length = 0;\n\n\t\t// TODO: (List<object>) jObject [\"threads\"];\n\t\tlet jThreads: any[] = jObject['threads'];\n\n\t\tfor (let jThreadTok of jThreads) {\n\t\t\t// TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n\t\t\tlet jThreadObj = jThreadTok;\n\t\t\tlet thread = new CallStack.Thread(jThreadObj, storyContext);\n\t\t\tthis._threads.push(thread);\n\t\t}\n\n\t\t// TODO: (int)jObject [\"threadCounter\"];\n\t\tthis._threadCounter = parseInt(jObject['threadCounter']);\n\t\tthis._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n\t}\n\tpublic GetJsonToken(){\n\t\tlet jObject: any = {};\n\n\t\tlet jThreads: any[] = [];\n\n\t\tfor (let thread of this._threads) {\n\t\t\tjThreads.push(thread.jsonToken);\n\t\t}\n\n\t\tjObject['threads'] = jThreads;\n\t\tjObject['threadCounter'] = this._threadCounter;\n\n\t\treturn jObject;\n\t}\n\n\tpublic PushThread(){\n\t\tlet newThread = this.currentThread.Copy();\n\t\tthis._threadCounter++;\n\t\tnewThread.threadIndex = this._threadCounter;\n\t\tthis._threads.push(newThread);\n\t}\n\n\tpublic ForkThread(){\n\t\tlet forkedThread = this.currentThread.Copy();\n\t\tthis._threadCounter++;\n\t\tforkedThread.threadIndex = this._threadCounter;\n\t\treturn forkedThread;\n\t}\n\n\tpublic PopThread(){\n\t\tif (this.canPopThread) {\n\t\t\tthis._threads.splice(this._threads.indexOf(this.currentThread), 1);// should be equivalent to a pop()\n\t\t} else {\n\t\t\tthrow new Error(\"Can't pop thread\");\n\t\t}\n\t}\n\n\tget canPopThread(){\n\t\treturn this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n\t}\n\n\tget elementIsEvaluateFromGame(){\n\t\treturn this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n\t}\n\n\tpublic Push(type: PushPopType, externalEvaluationStackHeight: number = 0, outputStreamLengthWithPushed: number = 0){\n\t\tlet element = new CallStack.Element(\n\t\t\ttype,\n\t\t\tthis.currentElement.currentPointer,\n\t\t\tfalse,\n\t\t);\n\n\t\telement.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n\t\telement.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n\t\tthis.callStack.push (element);\n\t}\n\n\tpublic CanPop(type: PushPopType | null = null){\n\t\tif (!this.canPop)\n\t\t\treturn false;\n\n\t\tif (type == null)\n\t\t\treturn true;\n\n\t\treturn this.currentElement.type == type;\n\t}\n\n\tpublic Pop(type: PushPopType | null = null){\n\t\tif (this.CanPop(type)) {\n\t\t\tthis.callStack.pop();\n\t\t\treturn;\n\t\t} else {\n\t\t\tthrow new Error('Mismatched push/pop in Callstack');\n\t\t}\n\t}\n\n\tpublic GetTemporaryVariableWithName(name: string | null, contextIndex: number = -1){\n\n\t\tif (contextIndex == -1)\n\t\t\tcontextIndex = this.currentElementIndex + 1;\n\n\t\tlet contextElement = this.callStack[contextIndex - 1];\n\n\t\tlet varValue = tryGetValueFromMap(contextElement.temporaryVariables, name, null);\n\t\tif (varValue.exists) {\n\t\t\treturn varValue.result;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic SetTemporaryVariable(name: string, value: any, declareNew: boolean, contextIndex: number = -1){\n\n\t\tif (contextIndex == -1)\n\t\t\tcontextIndex = this.currentElementIndex + 1;\n\n\t\tlet contextElement = this.callStack[contextIndex - 1];\n\n\t\tif (!declareNew && !contextElement.temporaryVariables.get(name)) {\n\t\t\tthrow new StoryException('Could not find temporary variable to set: ' + name);\n\t\t}\n\n\t\tlet oldValue = tryGetValueFromMap(contextElement.temporaryVariables, name, null);\n\t\tif (oldValue.exists)\n\t\t\tListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n\t\tcontextElement.temporaryVariables.set(name, value);\n\t}\n\n\tpublic ContextForVariableNamed(name: string){\n\n\t\tif (this.currentElement.temporaryVariables.get(name)) {\n\t\t\treturn this.currentElementIndex + 1;\n\t\t}\n\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tpublic ThreadWithIndex(index: number){\n\t\tlet filtered = this._threads.filter((t) => {\n\t\t\tif (t.threadIndex == index) return t;\n\t\t});\n\n\t\treturn filtered[0];\n\t}\n\n\tget callStack(){\n\t\treturn this.currentThread.callstack;\n\t}\n\n\tget callStackTrace(){\n\t\tlet sb = new StringBuilder();\n\n\t\tfor (let t = 0; t < this._threads.length; t++) {\n\t\t\tlet thread = this._threads[t];\n\t\t\tlet isCurrent = (t == this._threads.length - 1);\n\t\t\tsb.AppendFormat('=== THREAD {0}/{1} {2}===\\n', (t+1), this._threads.length, (isCurrent ? '(current) ' : ''));\n\n\t\t\tfor (let i = 0; i < thread.callstack.length; i++) {\n\n\t\t\t\tif (thread.callstack[i].type == PushPopType.Function)\n\t\t\t\t\tsb.Append('  [FUNCTION] ');\n\t\t\t\telse\n\t\t\t\t\tsb.Append('  [TUNNEL] ');\n\n\t\t\t\tlet pointer = thread.callstack[i].currentPointer;\n\t\t\t\tif(!pointer.isNull) {\n\t\t\t\t\tsb.Append('<SOMEWHERE IN ');\n\t\t\t\t\tif (pointer.container === null) { return throwNullException('pointer.container'); }\n\t\t\t\t\tsb.Append(pointer.container.path.toString());\n\t\t\t\t\tsb.AppendLine('>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n\n\tpublic _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n\tpublic _threadCounter: number = 0;\n\tpublic _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n\texport class Element{\n\t\tpublic currentPointer: Pointer;\n\t\tpublic inExpressionEvaluation: boolean;\n\t\tpublic temporaryVariables: Map<string, InkObject>;\n\t\tpublic type: PushPopType;\n\n\t\tpublic evaluationStackHeightWhenPushed: number = 0;\n\t\tpublic functionStartInOutputStream: number = 0;\n\n\t\tconstructor(type: PushPopType, pointer: Pointer, inExpressionEvaluation: boolean = false){\n\t\t\tthis.currentPointer = pointer.copy();\n\t\t\tthis.inExpressionEvaluation = inExpressionEvaluation;\n\t\t\tthis.temporaryVariables = new Map();\n\t\t\tthis.type = type;\n\t\t}\n\n\t\tpublic Copy(){\n\t\t\tlet copy = new Element(this.type, this.currentPointer, this.inExpressionEvaluation);\n\t\t\tcopy.temporaryVariables = new Map(this.temporaryVariables);\n\t\t\tcopy.evaluationStackHeightWhenPushed = this.evaluationStackHeightWhenPushed;\n\t\t\tcopy.functionStartInOutputStream = this.functionStartInOutputStream;\n\t\t\treturn copy;\n\t\t}\n\t}\n\n\texport class Thread{\n\t\tpublic callstack: Element[];\n\t\tpublic threadIndex: number = 0;\n\t\tpublic previousPointer: Pointer = Pointer.Null;\n\n\t\tconstructor();\n\t\tconstructor(jThreadObj: any, storyContext: Story);\n\t\tconstructor(){\n\t\t\tthis.callstack = [];\n\n\t\t\tif (arguments[0] && arguments[1]){\n\t\t\t\tlet jThreadObj = arguments[0];\n\t\t\t\tlet storyContext = arguments[1];\n\n\t\t\t\t// TODO: (int) jThreadObj['threadIndex'] can raise;\n\t\t\t\tthis.threadIndex = parseInt(jThreadObj['threadIndex']);\n\n\t\t\t\tlet jThreadCallstack = jThreadObj['callstack'];\n\n\t\t\t\tfor (let jElTok of jThreadCallstack) {\n\t\t\t\t\tlet jElementObj = jElTok;\n\n\t\t\t\t\t// TODO: (int) jElementObj['type'] can raise;\n\t\t\t\t\tlet pushPopType: PushPopType = parseInt(jElementObj['type']);\n\n\t\t\t\t\tlet pointer = Pointer.Null;\n\n\t\t\t\t\tlet currentContainerPathStr: string;\n\t\t\t\t\t// TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n\t\t\t\t\tlet currentContainerPathStrToken = jElementObj['cPath'];\n\t\t\t\t\tif (typeof currentContainerPathStrToken !== 'undefined') {\n\t\t\t\t\t\tcurrentContainerPathStr = currentContainerPathStrToken.toString();\n\n\t\t\t\t\t\tlet threadPointerResult = storyContext.ContentAtPath(new Path(currentContainerPathStr));\n\t\t\t\t\t\tpointer.container = threadPointerResult.container;\n\t\t\t\t\t\tpointer.index = parseInt(jElementObj['idx']);\n\n\t\t\t\t\t\tif (threadPointerResult.obj == null)\n\t\t\t\t\t\t\tthrow new Error('When loading state, internal story location couldn\\'t be found: ' + currentContainerPathStr + '. Has the story changed since this save data was created?');\n\t\t\t\t\t\telse if (threadPointerResult.approximate) {\n\t\t\t\t\t\t\tif (pointer.container === null) { return throwNullException('pointer.container'); }\n\t\t\t\t\t\t\tstoryContext.Warning(\"When loading state, exact internal story location couldn't be found: '\" + currentContainerPathStr + \"', so it was approximated to '\"+pointer.container.path.toString()+\"' to recover. Has the story changed since this save data was created?\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet inExpressionEvaluation = !!jElementObj['exp'];\n\n\t\t\t\t\tlet el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n\t\t\t\t\tlet jObjTemps = jElementObj['temp'];\n\t\t\t\t\tel.temporaryVariables = JsonSerialisation.JObjectToDictionaryRuntimeObjs(jObjTemps);\n\n\t\t\t\t\tthis.callstack.push(el);\n\t\t\t\t}\n\n\t\t\t\tlet prevContentObjPath = jThreadObj['previousContentObject'];\n\t\t\t\tif(typeof prevContentObjPath !== 'undefined') {\n\t\t\t\t\tlet prevPath = new Path(prevContentObjPath.toString());\n\t\t\t\t\tthis.previousPointer = storyContext.PointerAtPath(prevPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic Copy(){\n\t\t\tlet copy = new Thread();\n\t\t\tcopy.threadIndex = this.threadIndex;\n\t\t\tfor (let e of this.callstack) {\n\t\t\t\tcopy.callstack.push(e.Copy());\n\t\t\t}\n\t\t\tcopy.previousPointer = this.previousPointer.copy();\n\t\t\treturn copy;\n\t\t}\n\n\t\tget jsonToken(){\n\t\t\tlet threadJObj: any = {};\n\n\t\t\tlet jThreadCallstack: any[] = [];\n\t\t\tfor (let el of this.callstack) {\n\t\t\t\tlet jObj: any = {};\n\t\t\t\tif (!el.currentPointer.isNull) {\n\t\t\t\t\tif (el.currentPointer.container === null) { return throwNullException('el.currentPointer.container'); }\n\t\t\t\t\tjObj['cPath'] = el.currentPointer.container.path.componentsString;\n\t\t\t\t\tjObj['idx'] = el.currentPointer.index;\n\t\t\t\t}\n\t\t\t\tjObj['exp'] = el.inExpressionEvaluation;\n\t\t\t\tjObj['type'] = el.type;\n\t\t\t\tjObj['temp'] = JsonSerialisation.DictionaryRuntimeObjsToJObject(el.temporaryVariables);\n\t\t\t\tjThreadCallstack.push(jObj);\n\t\t\t}\n\n\t\t\tthreadJObj['callstack'] = jThreadCallstack;\n\t\t\tthreadJObj['threadIndex'] = this.threadIndex;\n\n\t\t\tif (!this.previousPointer.isNull) {\n\t\t\t\tlet resolvedPointer = this.previousPointer.Resolve();\n\t\t\t\tif (resolvedPointer === null) { return throwNullException('this.previousPointer.Resolve()'); }\n\t\t\t\tthreadJObj['previousContentObject'] = resolvedPointer.path.toString();\n\t\t\t}\n\n\t\t\treturn threadJObj;\n\t\t}\n\t}\n}\n","import {AbstractValue, Value, VariablePointerValue, ListValue} from './Value';\nimport {VariableAssignment} from './VariableAssignment';\nimport {InkObject} from './Object';\nimport {ListDefinitionsOrigin} from './ListDefinitionsOrigin';\nimport {StoryException} from './StoryException';\nimport {JsonSerialisation} from './JsonSerialisation';\nimport {asOrThrows, asOrNull} from './TypeAssertion';\nimport {tryGetValueFromMap} from './TryGetResult';\nimport {throwNullException} from './NullException';\nimport {CallStack} from './CallStack';\n\nexport class VariablesState{\n\t// The way variableChangedEvent is a bit different than the reference implementation.\n\t// Originally it uses the C# += operator to add delegates, but in js we need to maintain\n\t// an actual collection of delegates (ie. callbacks) to register a new one, there is a\n\t// special ObserveVariableChange method below.\n\tpublic variableChangedEventCallbacks: Array<(variableName: string, newValue: InkObject) => void> = [];\n\tpublic variableChangedEvent(variableName: string, newValue: InkObject): void {\n\t\tfor (let callback of this.variableChangedEventCallbacks) {\n\t\t\tcallback(variableName, newValue);\n\t\t}\n\t}\n\n\tget batchObservingVariableChanges(){\n\t\treturn this._batchObservingVariableChanges;\n\t}\n\tset batchObservingVariableChanges(value: boolean){\n\t\tthis._batchObservingVariableChanges = value;\n\t\tif (value) {\n\t\t\tthis._changedVariables = new Set();\n\t\t}\n\n\t\telse {\n\t\t\tif (this._changedVariables != null) {\n\t\t\t\tfor (let variableName of this._changedVariables) {\n\t\t\t\t\tlet currentValue = this._globalVariables.get(variableName);\n\t\t\t\t\tif (!currentValue) {\n\t\t\t\t\t\tthrowNullException('currentValue');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.variableChangedEvent(variableName, currentValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget callStack(){\n\t\treturn this._callStack;\n\t}\n\tset callStack(callStack){\n\t\tthis._callStack = callStack;\n\t}\n\n\tprivate _batchObservingVariableChanges: boolean = false;\n\n\t// the original code uses a magic getter and setter for global variables,\n\t// allowing things like variableState['varname]. This is not quite possible\n\t// in js without a Proxy, so it is replaced with this $ function.\n\tpublic $(variableName: string, value: InkObject){\n\t\tif (typeof value === 'undefined'){\n\t\t\tlet varContents = this._globalVariables.get(variableName);\n\n\t\t\tif ( typeof varContents === 'undefined' ) {\n\t\t\t\tvarContents = this._defaultGlobalVariables.get(variableName);\n\t\t\t}\n\n\t\t\tif ( typeof varContents !== 'undefined' )\n\t\t\t\treturn (varContents as AbstractValue).valueObject;\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n\t\telse{\n\t\t\tif (typeof this._defaultGlobalVariables.get(variableName) === 'undefined')\n\t\t\t\tthrow new StoryException('Cannot assign to a variable ('+variableName+\") that hasn't been declared in the story\");\n\n\t\t\tlet val = Value.Create(value);\n\t\t\tif (val == null) {\n\t\t\t\tif (value == null) {\n\t\t\t\t\tthrow new StoryException('Cannot pass null to VariableState');\n\t\t\t\t} else {\n\t\t\t\t\tthrow new StoryException('Invalid value passed to VariableState: '+value.toString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.SetGlobal(variableName, val);\n\t\t}\n\t}\n\n\tconstructor(callStack: CallStack, listDefsOrigin: ListDefinitionsOrigin | null){\n\t\tthis._globalVariables = new Map();\n\t\tthis._callStack = callStack;\n\t\tthis._listDefsOrigin = listDefsOrigin;\n\n\t\t// if es6 proxies are available, use them.\n\t\ttry{\n\t\t\t// the proxy is used to allow direct manipulation of global variables.\n\t\t\t// It first tries to access the objects own property, and if none is\n\t\t\t// found it delegates the call to the $ method, defined below\n\t\t\tlet p = new Proxy(this, {\n\t\t\t\tget(target: any, name){\n\t\t\t\t\treturn (name in target) ? target[name] : target.$(name);\n\t\t\t\t},\n\t\t\t\tset(target: any, name, value){\n\t\t\t\t\tif (name in target) target[name] = value;\n\t\t\t\t\telse target.$(name, value);\n\t\t\t\t\treturn true; // returning a falsy value make the trap fail\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn p;\n\t\t}\n\t\tcatch(e){\n\t\t\t// thr proxy object is not available in this context. we should warn the\n\t\t\t// dev but writting to the console feels a bit intrusive.\n\t\t\t// console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n\t\t}\n\t}\n\n\tpublic CopyFrom(toCopy: VariablesState){\n\t\tthis._globalVariables = new Map(toCopy._globalVariables);\n\t\tthis._defaultGlobalVariables = new Map(toCopy._defaultGlobalVariables);\n\n\t\tthis.variableChangedEvent = toCopy.variableChangedEvent;\n\t\tthis.variableChangedEventCallbacks = toCopy.variableChangedEventCallbacks; // inkjs specificity that has to be copied along the rest of the structure\n\n\t\tif (toCopy.batchObservingVariableChanges != this.batchObservingVariableChanges) {\n\n\t\t\tif (toCopy.batchObservingVariableChanges) {\n\t\t\t\tthis._batchObservingVariableChanges = true;\n\t\t\t\tif (toCopy._changedVariables === null) { return throwNullException('toCopy._changedVariables'); }\n\t\t\t\tthis._changedVariables = new Set(toCopy._changedVariables);\n\t\t\t} else {\n\t\t\t\tthis._batchObservingVariableChanges = false;\n\t\t\t\tthis._changedVariables = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tget jsonToken(){\n\t\treturn JsonSerialisation.DictionaryRuntimeObjsToJObject(this._globalVariables);\n\t}\n\tset jsonToken(value){\n\t\tthis._globalVariables = JsonSerialisation.JObjectToDictionaryRuntimeObjs(value);\n\t}\n\n\tpublic TryGetDefaultVariableValue(name: string | null): InkObject | null\n\t{\n\t\tlet val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n\t\treturn val.exists ? val.result : null;\n\t}\n\n\tpublic GlobalVariableExistsWithName(name: string){\n\t\treturn this._globalVariables.has(name);\n\t}\n\n\tpublic GetVariableWithName(name: string | null, contextIndex: number = -1): InkObject | null {\n\t\tlet varValue = this.GetRawVariableWithName(name, contextIndex);\n\n\t\t// var varPointer = varValue as VariablePointerValue;\n\t\tlet varPointer = asOrNull(varValue, VariablePointerValue);\n\t\tif (varPointer !== null) {\n\t\t\tvarValue = this.ValueAtVariablePointer(varPointer);\n\t\t}\n\n\t\treturn varValue;\n\t}\n\n\tpublic GetRawVariableWithName(name: string | null, contextIndex: number) {\n\t\tlet varValue: InkObject | null = null;\n\n\t\tif (contextIndex == 0 || contextIndex == -1) {\n\t\t\t// this is a conditional assignment\n\t\t\tlet variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n\t\t\tif (variableValue.exists)\n\t\t\t\treturn variableValue.result;\n\n\t\t\tif (this._listDefsOrigin === null) return throwNullException('VariablesState._listDefsOrigin');\n\t\t\tlet listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n\t\t\tif (listItemValue)\n\t\t\t\treturn listItemValue;\n\t\t}\n\n\t\tvarValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n\t\treturn varValue;\n\t}\n\n\tpublic ValueAtVariablePointer(pointer: VariablePointerValue){\n\t\t return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n\t}\n\n\tpublic Assign(varAss: VariableAssignment, value: InkObject){\n\t\tlet name = varAss.variableName;\n\t\tif (name === null) { return throwNullException('name'); }\n\t\tlet contextIndex = -1;\n\n\t\tlet setGlobal = false;\n\t\tif (varAss.isNewDeclaration) {\n\t\t\tsetGlobal = varAss.isGlobal;\n\t\t} else {\n\t\t\tsetGlobal = this._globalVariables.has(name);\n\t\t}\n\n\t\tif (varAss.isNewDeclaration) {\n\t\t\t// var varPointer = value as VariablePointerValue;\n\t\t\tlet varPointer = asOrNull(value, VariablePointerValue);\n\t\t\tif (varPointer !== null) {\n\t\t\t\tlet fullyResolvedVariablePointer = this.ResolveVariablePointer(varPointer);\n\t\t\t\tvalue = fullyResolvedVariablePointer;\n\t\t\t}\n\n\t\t}\n\n\t\telse {\n\n\t\t\tlet existingPointer = null;\n\t\t\tdo {\n\t\t\t\t// existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n\t\t\t\texistingPointer = asOrNull(this.GetRawVariableWithName(name, contextIndex), VariablePointerValue);\n\t\t\t\tif (existingPointer != null) {\n\t\t\t\t\tname = existingPointer.variableName;\n\t\t\t\t\tcontextIndex = existingPointer.contextIndex;\n\t\t\t\t\tsetGlobal = (contextIndex == 0);\n\t\t\t\t}\n\t\t\t} while(existingPointer != null);\n\t\t}\n\n\t\tif (setGlobal) {\n\t\t\tthis.SetGlobal(name, value);\n\t\t} else {\n\t\t\tthis._callStack.SetTemporaryVariable(name, value, varAss.isNewDeclaration, contextIndex);\n\t\t}\n\t}\n\n\tpublic SnapshotDefaultGlobals(){\n\t\tthis._defaultGlobalVariables = new Map(this._globalVariables);\n\t}\n\n\tpublic RetainListOriginsForAssignment(oldValue: InkObject, newValue: InkObject){\n\t\tlet oldList = asOrThrows(oldValue, ListValue);\n\t\tlet newList = asOrThrows(newValue, ListValue);\n\n\t\tif (oldList.value && newList.value && newList.value.Count == 0) {\n\t\t\tnewList.value.SetInitialOriginNames(oldList.value.originNames);\n\t\t}\n\t}\n\n\tpublic SetGlobal(variableName: string | null, value: InkObject){\n\t\tlet oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n\n\t\tif (oldValue.exists) {\n\t\t\tListValue.RetainListOriginsForAssignment(oldValue.result!, value);\n\t\t}\n\n\t\tif (variableName === null) { return throwNullException('variableName'); }\n\t\tthis._globalVariables.set(variableName, value);\n\n\t\t// TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n\t\tif (this.variableChangedEvent != null && value !== oldValue.result) {\n\n\t\t\tif (this.batchObservingVariableChanges) {\n\t\t\t\tif (this._changedVariables === null) { return throwNullException('this._changedVariables'); }\n\t\t\t\tthis._changedVariables.add(variableName);\n\t\t\t} else {\n\t\t\t\tthis.variableChangedEvent(variableName, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ResolveVariablePointer(varPointer: VariablePointerValue){\n\t\tlet contextIndex = varPointer.contextIndex;\n\n\t\tif( contextIndex == -1 )\n\t\t\tcontextIndex = this.GetContextIndexOfVariableNamed(varPointer.variableName);\n\n\t\tlet valueOfVariablePointedTo = this.GetRawVariableWithName(varPointer.variableName, contextIndex);\n\n\t\t// var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n\t\tlet doubleRedirectionPointer = asOrNull(valueOfVariablePointedTo, VariablePointerValue);\n\t\tif (doubleRedirectionPointer != null) {\n\t\t\treturn doubleRedirectionPointer;\n\t\t}\n\n\t\telse {\n\t\t\treturn new VariablePointerValue(varPointer.variableName, contextIndex);\n\t\t}\n\t}\n\n\tpublic GetContextIndexOfVariableNamed(varName: string){\n\t\tif (this._globalVariables.get(varName))\n\t\t\treturn 0;\n\n\t\treturn this._callStack.currentElementIndex;\n\t}\n\n\t\t/**\n\t\t * This function is specific to the js version of ink. It allows to register a\n\t\t * callback that will be called when a variable changes. The original code uses\n\t\t * `state.variableChangedEvent += callback` instead.\n\t\t * @param {function} callback\n\t\t */\n\tpublic ObserveVariableChange(callback: (variableName: string, newValue: InkObject) => void){\n\t\tthis.variableChangedEventCallbacks.push(callback);\n\t}\n\n\tprivate _globalVariables: Map<string, InkObject>;\n\tprivate _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n\tprivate _callStack: CallStack;\n\tprivate _changedVariables: Set<string> | null = new Set();\n\tprivate _listDefsOrigin: ListDefinitionsOrigin | null;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG{\n\n\tprivate seed: number;\n\n\tconstructor(seed: number){\n\t\tthis.seed = seed % 2147483647;\n\t\tif (this.seed <= 0) this.seed += 2147483646;\n\t}\n\tpublic next(): number{\n\t\treturn this.seed = this.seed * 16807 % 2147483647;\n\t}\n\tpublic nextFloat(): number{\n\t\treturn (this.next() - 1) / 2147483646;\n\t}\n}\n","import {CallStack} from './CallStack';\nimport {VariablesState} from './VariablesState';\nimport {ValueType, Value, StringValue, ListValue} from './Value';\nimport {PushPopType} from './PushPop';\nimport {Tag} from './Tag';\nimport {Glue} from './Glue';\nimport {Path} from './Path';\nimport {ControlCommand} from './ControlCommand';\nimport {StoryException} from './StoryException';\nimport {StringBuilder} from './StringBuilder';\nimport {JsonSerialisation} from './JsonSerialisation';\nimport {PRNG} from './PRNG';\nimport {Void} from './Void';\nimport {Pointer} from './Pointer';\nimport {tryGetValueFromMap} from './TryGetResult';\nimport {Choice} from './Choice';\nimport {asOrNull, asOrThrows, nullIfUndefined} from './TypeAssertion';\nimport {JObject} from './JObject';\nimport {Debug} from './Debug';\nimport {Container} from './Container';\nimport {InkObject} from './Object';\nimport { throwNullException } from './NullException';\nimport { Story } from './Story';\n\nexport class StoryState{\n\n\tpublic readonly kInkSaveStateVersion = 8;\n\tpublic readonly kMinCompatibleLoadVersion = 8;\n\n\tpublic ToJson(indented: boolean = false){\n\t\treturn JSON.stringify(this.jsonToken, null, (indented) ? 2 : 0);\n\t}\n\tpublic toJson(indented: boolean = false){\n\t\treturn this.ToJson(indented);\n\t}\n\n\tpublic LoadJson(json: string){\n\t\tthis.jsonToken = JSON.parse(json);\n\t}\n\n\tpublic VisitCountAtPathString(pathString: string){\n\t\tlet visitCountOut = tryGetValueFromMap(this.visitCounts, pathString, null);\n\t\tif (visitCountOut.exists)\n\t\t\treturn visitCountOut.result;\n\n\t\treturn 0;\n\t}\n\n\tget callstackDepth(){\n\t\treturn this.callStack.depth;\n\t}\n\n\tget outputStream(){\n\t\treturn this._outputStream;\n\t}\n\n\tget currentChoices(){\n\t\t// If we can continue generating text content rather than choices,\n\t\t// then we reflect the choice list as being empty, since choices\n\t\t// should always come at the end.\n\t\tif ( this.canContinue ) return [];\n\t\treturn this._currentChoices;\n\t}\n\n\tget generatedChoices(){\n\t\treturn this._currentChoices;\n\t}\n\n\tget currentErrors(){\n\t\treturn this._currentErrors;\n\t}\n\tprivate _currentErrors: string[] | null = null;\n\n\tget currentWarnings(){\n\t\treturn this._currentWarnings;\n\t}\n\tprivate _currentWarnings: string[] | null = null;\n\n\tget variablesState(){\n\t\treturn this._variablesState;\n\t}\n\tprivate _variablesState: VariablesState;\n\n\tpublic callStack: CallStack;\n\n\tget evaluationStack(){\n\t\treturn this._evaluationStack;\n\t}\n\tprivate _evaluationStack: InkObject[];\n\n\tpublic divertedPointer: Pointer = Pointer.Null;\n\n\tget visitCounts(){\n\t\treturn this._visitCounts;\n\t}\n\tprivate _visitCounts: Map<string, number>;\n\n\tget turnIndices(){\n\t\treturn this._turnIndices;\n\t}\n\tprivate _turnIndices: Map<string, number>;\n\n\tget currentTurnIndex(){\n\t\treturn this._currentTurnIndex;\n\t}\n\tprivate _currentTurnIndex: number = 0;\n\n\tpublic storySeed: number = 0;\n\tpublic previousRandom: number = 0;\n\tpublic didSafeExit: boolean = false;\n\n\tpublic story: Story;\n\n\tget currentPathString(){\n\t\tlet pointer = this.currentPointer;\n\t\tif (pointer.isNull) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif (pointer.path === null) { return throwNullException('pointer.path'); }\n\t\t\treturn pointer.path.toString();\n\t\t}\n\t}\n\n\tget currentPointer(){\n\t\treturn this.callStack.currentElement.currentPointer.copy();\n\t}\n\n\tset currentPointer(value){\n\t\tthis.callStack.currentElement.currentPointer = value.copy();\n\t}\n\n\tget previousPointer(){\n\t\treturn this.callStack.currentThread.previousPointer.copy();\n\t}\n\n\tset previousPointer(value){\n\t\tthis.callStack.currentThread.previousPointer = value.copy();\n\t}\n\n\tget canContinue(){\n\t\treturn !this.currentPointer.isNull && !this.hasError;\n\t}\n\n\tget hasError(){\n\t\treturn this.currentErrors != null && this.currentErrors.length > 0;\n\t}\n\n\tget hasWarning(){\n\t\treturn this.currentWarnings != null && this.currentWarnings.length > 0;\n\t}\n\n\tget currentText(){\n\t\tif( this._outputStreamTextDirty ) {\n\t\t\tlet sb = new StringBuilder();\n\n\t\t\tfor (let outputObj of this._outputStream) {\n\t\t\t\t// var textContent = outputObj as StringValue;\n\t\t\t\tlet textContent = asOrNull(outputObj, StringValue);\n\t\t\t\tif (textContent !== null) {\n\t\t\t\t\tsb.Append(textContent.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._currentText = this.CleanOutputWhitespace(sb.toString());\n\t\t\tthis._outputStreamTextDirty = false;\n\t\t}\n\n\t\treturn this._currentText;\n\t}\n\tprivate _currentText: string | null = null;\n\n\tpublic CleanOutputWhitespace(str: string){\n\t\tlet sb = new StringBuilder();\n\n\t\tlet currentWhitespaceStart = -1;\n\t\tlet startOfLine = 0;\n\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tlet c = str.charAt(i);\n\n\t\t\tlet isInlineWhitespace = (c == ' ') || (c == '\\t');\n\n\t\t\tif (isInlineWhitespace && currentWhitespaceStart == -1)\n\t\t\t\tcurrentWhitespaceStart = i;\n\n\t\t\tif (!isInlineWhitespace) {\n\t\t\t\tif (c != '\\n' && currentWhitespaceStart > 0 && currentWhitespaceStart != startOfLine) {\n\t\t\t\t\tsb.Append(' ');\n\t\t\t\t}\n\t\t\t\tcurrentWhitespaceStart = -1;\n\t\t\t}\n\n\t\t\tif (c == '\\n')\n\t\t\t\tstartOfLine = i + 1;\n\n\t\t\tif (!isInlineWhitespace)\n\t\t\t\tsb.Append(c);\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n\n\tget currentTags(){\n\t\tif( this._outputStreamTagsDirty ) {\n\t\t\tthis._currentTags = [];\n\n\t\t\tfor(let outputObj of this._outputStream) {\n\t\t\t\t// var tag = outputObj as Tag;\n\t\t\t\tlet tag = asOrNull(outputObj, Tag);\n\t\t\t\tif (tag !== null) {\n\t\t\t\t\tthis._currentTags.push(tag.text);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._outputStreamTagsDirty = false;\n\t\t}\n\n\t\treturn this._currentTags;\n\t}\n\tprivate _currentTags: string[] | null = null;\n\n\tget inExpressionEvaluation(){\n\t\treturn this.callStack.currentElement.inExpressionEvaluation;\n\t}\n\tset inExpressionEvaluation(value){\n\t\tthis.callStack.currentElement.inExpressionEvaluation = value;\n\t}\n\n\tconstructor(story: Story){\n\t\tthis.story = story;\n\n\t\tthis._outputStream = [];\n\t\tthis.OutputStreamDirty();\n\n\t\tthis._evaluationStack = [];\n\n\t\tthis.callStack = new CallStack(story);\n\t\tthis._variablesState = new VariablesState(this.callStack, story.listDefinitions);\n\n\t\tthis._visitCounts = new Map();\n\t\tthis._turnIndices = new Map();\n\t\tthis._currentTurnIndex = -1;\n\n\t\tlet timeSeed = (new Date()).getTime();\n\t\tthis.storySeed = (new PRNG(timeSeed)).next() % 100;\n\t\tthis.previousRandom = 0;\n\n\t\tthis._currentChoices = [];\n\n\t\tthis.GoToStart();\n\t}\n\n\tpublic GoToStart(){\n\t\tthis.callStack.currentElement.currentPointer = Pointer.StartOf(this.story.mainContentContainer);\n\t}\n\n\tpublic Copy(){\n\t\tlet copy = new StoryState(this.story);\n\n\t\tcopy.outputStream.push.apply(copy.outputStream, this._outputStream);\n\t\tthis.OutputStreamDirty();\n\n\t\tcopy._currentChoices.push.apply(copy._currentChoices, this._currentChoices);\n\n\t\tif (this.hasError) {\n\t\t\tcopy._currentErrors = [];\n\t\t\tcopy._currentErrors.push.apply(copy._currentErrors, this.currentErrors || []);\n\t\t}\n\n\t\tif (this.hasWarning) {\n\t\t\tcopy._currentWarnings = [];\n\t\t\tcopy._currentWarnings.push.apply(copy._currentWarnings, this.currentWarnings || []);\n\t\t}\n\n\t\tcopy.callStack = new CallStack(this.callStack);\n\n\t\tcopy._variablesState = new VariablesState(copy.callStack, this.story.listDefinitions);\n\t\tcopy.variablesState.CopyFrom(this.variablesState);\n\n\t\tcopy.evaluationStack.push.apply(copy.evaluationStack, this.evaluationStack);\n\n\t\tif (!this.divertedPointer.isNull)\n\t\t\tcopy.divertedPointer = this.divertedPointer.copy();\n\n\t\tcopy.previousPointer = this.previousPointer.copy();\n\n\t\tcopy._visitCounts = new Map(this.visitCounts);\n\t\tcopy._turnIndices = new Map(this.turnIndices);\n\n\t\tcopy._currentTurnIndex = this.currentTurnIndex;\n\t\tcopy.storySeed = this.storySeed;\n\t\tcopy.previousRandom = this.previousRandom;\n\n\t\tcopy.didSafeExit = this.didSafeExit;\n\n\t\treturn copy;\n\t}\n\n\tget jsonToken(){\n\t\tlet obj: JObject = {};\n\n\t\tlet choiceThreads: JObject | undefined;\n\t\tfor (let c of this._currentChoices) {\n\t\t\tif (c.threadAtGeneration === null) { return throwNullException('c.threadAtGeneration'); }\n\t\t\tc.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n\t\t\tif( this.callStack.ThreadWithIndex(c.originalThreadIndex) == null ) {\n\t\t\t\tif( choiceThreads == null )\n\t\t\t\t\tchoiceThreads = new Map();\n\n\t\t\t\tchoiceThreads[c.originalThreadIndex.toString()] = c.threadAtGeneration.jsonToken;\n\t\t\t}\n\t\t}\n\n\t\tif (choiceThreads != null)\n\t\t\tobj['choiceThreads'] = choiceThreads;\n\n\t\tobj['callstackThreads'] = this.callStack.GetJsonToken();\n\t\tobj['variablesState'] = this.variablesState.jsonToken;\n\n\t\tobj['evalStack'] = JsonSerialisation.ListToJArray(this.evaluationStack);\n\n\t\tobj['outputStream'] = JsonSerialisation.ListToJArray(this._outputStream);\n\n\t\tobj['currentChoices'] = JsonSerialisation.ListToJArray(this._currentChoices);\n\n\t\tif(!this.divertedPointer.isNull) {\n\t\t\tif (this.divertedPointer.path === null) { return throwNullException('this.divertedPointer.path'); }\n\t\t\tobj['currentDivertTarget'] = this.divertedPointer.path.componentsString;\n\t\t}\n\n\t\tobj['visitCounts'] = JsonSerialisation.IntDictionaryToJObject(this.visitCounts);\n\t\tobj['turnIndices'] = JsonSerialisation.IntDictionaryToJObject(this.turnIndices);\n\t\tobj['turnIdx'] = this.currentTurnIndex;\n\t\tobj['storySeed'] = this.storySeed;\n\t\tobj['previousRandom'] = this.previousRandom;\n\n\t\tobj['inkSaveVersion'] = this.kInkSaveStateVersion;\n\n\t\t// Not using this right now, but could do in future.\n\t\tobj['inkFormatVersion'] = this.story.inkVersionCurrent;\n\n\t\treturn obj;\n\t}\n\tset jsonToken(value: JObject){\n\t\tlet jObject = value;\n\n\t\tlet jSaveVersion = jObject['inkSaveVersion'];\n\t\tif (jSaveVersion == null) {\n\t\t\tthrow new StoryException(\"ink save format incorrect, can't load.\");\n\t\t}\n\t\telse if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n\t\t\tthrow new StoryException(\"Ink save format isn't compatible with the current version (saw '\"+jSaveVersion+\"', but minimum is \"+this.kMinCompatibleLoadVersion+\"), so can't load.\");\n\t\t}\n\n\t\tthis.callStack.SetJsonToken(jObject['callstackThreads'], this.story);\n\t\tthis.variablesState.jsonToken = jObject['variablesState'];\n\n\t\tthis._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(jObject['evalStack']);\n\n\t\tthis._outputStream = JsonSerialisation.JArrayToRuntimeObjList(jObject['outputStream']);\n\t\tthis.OutputStreamDirty();\n\n\t\t// currentChoices = Json.JArrayToRuntimeObjList<Choice>((JArray)jObject [\"currentChoices\"]);\n\t\tthis._currentChoices = JsonSerialisation.JArrayToRuntimeObjList(jObject['currentChoices']) as Choice[];\n\n\t\tlet currentDivertTargetPath = jObject['currentDivertTarget'];\n\t\tif (currentDivertTargetPath != null) {\n\t\t\tlet divertPath = new Path(currentDivertTargetPath.toString());\n\t\t\tthis.divertedPointer = this.story.PointerAtPath(divertPath);\n\t\t}\n\n\t\tthis._visitCounts = JsonSerialisation.JObjectToIntDictionary(jObject['visitCounts']) as Map<string, number>;\n\t\tthis._turnIndices = JsonSerialisation.JObjectToIntDictionary(jObject['turnIndices']) as Map<string, number>;\n\t\tthis._currentTurnIndex = parseInt(jObject['turnIdx']);\n\t\tthis.storySeed = parseInt(jObject['storySeed']);\n\t\tthis.previousRandom = parseInt(jObject['previousRandom']);\n\n\t\t// var jChoiceThreads = jObject[\"choiceThreads\"] as JObject;\n\t\tlet jChoiceThreads = jObject['choiceThreads'];\n\n\t\tfor(let c of this._currentChoices) {\n\t\t\tlet foundActiveThread = this.callStack.ThreadWithIndex(c.originalThreadIndex);\n\t\t\tif( foundActiveThread != null ) {\n\t\t\t\tc.threadAtGeneration = foundActiveThread.Copy();\n\t\t\t} else {\n\t\t\t\tlet jSavedChoiceThread = jChoiceThreads[c.originalThreadIndex.toString()];\n\t\t\t\tc.threadAtGeneration = new CallStack.Thread(jSavedChoiceThread, this.story);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ResetErrors(){\n\t\tthis._currentErrors = null;\n\t\tthis._currentWarnings = null;\n\t}\n\tpublic ResetOutput(objs: InkObject[] | null = null){\n\t\tthis._outputStream.length = 0;\n\t\tif (objs !== null) this._outputStream.push.apply(this._outputStream, objs);\n\t\tthis.OutputStreamDirty();\n\t}\n\n\tpublic PushToOutputStream(obj: InkObject | null){\n\t\t// var text = obj as StringValue;\n\t\tlet text = asOrNull(obj, StringValue);\n\t\tif (text !== null) {\n\t\t\tlet listText = this.TrySplittingHeadTailWhitespace(text);\n\t\t\tif (listText !== null) {\n\t\t\t\tfor(let textObj of listText) {\n\t\t\t\t\tthis.PushToOutputStreamIndividual(textObj);\n\t\t\t\t}\n\t\t\t\tthis.OutputStreamDirty();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.PushToOutputStreamIndividual(obj);\n\t\tthis.OutputStreamDirty();\n\t}\n\n\tpublic PopFromOutputStream(count: number){\n\t\tthis.outputStream.splice(this.outputStream.length - count, count);\n\t\tthis.OutputStreamDirty();\n\t}\n\n\tpublic TrySplittingHeadTailWhitespace(single: StringValue) {\n\t\tlet str = single.value;\n\t\tif (str === null) { return throwNullException('single.value'); }\n\n\t\tlet headFirstNewlineIdx = -1;\n\t\tlet headLastNewlineIdx = -1;\n\t\tfor (let i = 0; i < str.length; ++i) {\n\t\t\tlet c = str[i];\n\t\t\tif (c == '\\n') {\n\t\t\t\tif (headFirstNewlineIdx == -1)\n\t\t\t\t\theadFirstNewlineIdx = i;\n\t\t\t\theadLastNewlineIdx = i;\n\t\t\t}\n\t\t\telse if (c == ' ' || c == '\\t')\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet tailLastNewlineIdx = -1;\n\t\tlet tailFirstNewlineIdx = -1;\n\t\tfor (let i = 0; i < str.length; ++i) {\n\t\t\tlet c = str[i];\n\t\t\tif (c == '\\n') {\n\t\t\t\tif (tailLastNewlineIdx == -1)\n\t\t\t\t\ttailLastNewlineIdx = i;\n\t\t\t\ttailFirstNewlineIdx = i;\n\t\t\t}\n\t\t\telse if (c == ' ' || c == '\\t')\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// No splitting to be done?\n\t\tif (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1)\n\t\t\treturn null;\n\n\t\tlet listTexts: StringValue[] = [];\n\t\tlet innerStrStart = 0;\n\t\tlet innerStrEnd = str.length;\n\n\t\tif (headFirstNewlineIdx != -1) {\n\t\t\tif (headFirstNewlineIdx > 0) {\n\t\t\t\tlet leadingSpaces = new StringValue(str.substring(0, headFirstNewlineIdx));\n\t\t\t\tlistTexts.push(leadingSpaces);\n\t\t\t}\n\t\t\tlistTexts.push(new StringValue('\\n'));\n\t\t\tinnerStrStart = headLastNewlineIdx + 1;\n\t\t}\n\n\t\tif (tailLastNewlineIdx != -1) {\n\t\t\tinnerStrEnd = tailFirstNewlineIdx;\n\t\t}\n\n\t\tif (innerStrEnd > innerStrStart) {\n\t\t\tlet innerStrText = str.substring(innerStrStart, innerStrEnd - innerStrStart);\n\t\t\tlistTexts.push(new StringValue(innerStrText));\n\t\t}\n\n\t\tif (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n\t\t\tlistTexts.push(new StringValue('\\n'));\n\t\t\tif (tailLastNewlineIdx < str.length - 1) {\n\t\t\t\tlet numSpaces = (str.length - tailLastNewlineIdx) - 1;\n\t\t\t\tlet trailingSpaces = new StringValue(str.substring(tailLastNewlineIdx + 1, numSpaces));\n\t\t\t\tlistTexts.push(trailingSpaces);\n\t\t\t}\n\t\t}\n\n\t\treturn listTexts;\n\t}\n\n\tpublic PushToOutputStreamIndividual(obj: InkObject | null){\n\t\tlet glue = asOrNull(obj, Glue);\n\t\tlet text = asOrNull(obj, StringValue);\n\n\t\tlet includeInOutput = true;\n\n\t\tif (glue) {\n\t\t\tthis.TrimNewlinesFromOutputStream();\n\t\t\tincludeInOutput = true;\n\t\t}\n\n\t\telse if( text ) {\n\n\t\t\tlet functionTrimIndex = -1;\n\t\t\tlet currEl = this.callStack.currentElement;\n\t\t\tif (currEl.type == PushPopType.Function) {\n\t\t\t\tfunctionTrimIndex = currEl.functionStartInOutputStream;\n\t\t\t}\n\n\t\t\tlet glueTrimIndex = -1;\n\t\t\tfor (let i = this._outputStream.length - 1; i >= 0; i--) {\n\t\t\t\tlet o = this._outputStream[i];\n\t\t\t\tlet c = (o instanceof ControlCommand) ? o : null;\n\t\t\t\tlet g = (o instanceof Glue) ? o : null;\n\n\t\t\t\tif (g != null) {\n\t\t\t\t\tglueTrimIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\telse if (c != null && c.commandType == ControlCommand.CommandType.BeginString) {\n\t\t\t\t\tif (i >= functionTrimIndex) {\n\t\t\t\t\t\tfunctionTrimIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet trimIndex = -1;\n\t\t\tif (glueTrimIndex != -1 && functionTrimIndex != -1)\n\t\t\t\ttrimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n\t\t\telse if (glueTrimIndex != -1)\n\t\t\t\ttrimIndex = glueTrimIndex;\n\t\t\telse\n\t\t\t\ttrimIndex = functionTrimIndex;\n\n\t\t\tif (trimIndex != -1) {\n\n\t\t\t\tif (text.isNewline) {\n\t\t\t\t\tincludeInOutput = false;\n\t\t\t\t}\n\n\t\t\t\telse if (text.isNonWhitespace) {\n\n\t\t\t\t\tif (glueTrimIndex > -1)\n\t\t\t\t\t\tthis.RemoveExistingGlue();\n\n\t\t\t\t\tif (functionTrimIndex > -1) {\n\t\t\t\t\t\tlet callStackElements = this.callStack.elements;\n\t\t\t\t\t\tfor (let i = callStackElements.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tlet el = callStackElements[i];\n\t\t\t\t\t\t\tif (el.type == PushPopType.Function) {\n\t\t\t\t\t\t\t\tel.functionStartInOutputStream = -1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (text.isNewline) {\n\t\t\t\tif (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n\t\t\t\t\tincludeInOutput = false;\n\t\t\t}\n\t\t}\n\n\t\tif (includeInOutput) {\n\t\t\tif (obj === null) { return throwNullException('obj'); }\n\t\t\tthis._outputStream.push(obj);\n\t\t\tthis.OutputStreamDirty();\n\t\t}\n\t}\n\n\tpublic TrimNewlinesFromOutputStream(){\n\t\tlet removeWhitespaceFrom = -1;\n\n\t\tlet i = this._outputStream.length-1;\n\t\twhile (i >= 0) {\n\t\t\tlet obj = this._outputStream[i];\n\t\t\tlet cmd = asOrNull(obj, ControlCommand);\n\t\t\tlet txt = asOrNull(obj, StringValue);\n\n\t\t\tif (cmd != null || (txt != null && txt.isNonWhitespace)) {\n\t\t\t\tbreak;\n\t\t\t} else if (txt != null && txt.isNewline) {\n\t\t\t\tremoveWhitespaceFrom = i;\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\n\t\t// Remove the whitespace\n\t\tif (removeWhitespaceFrom >= 0) {\n\t\t\ti=removeWhitespaceFrom;\n\t\t\twhile(i < this._outputStream.length) {\n\t\t\t\tlet text = asOrNull(this._outputStream[i], StringValue);\n\t\t\t\tif (text) {\n\t\t\t\t\tthis._outputStream.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.OutputStreamDirty();\n\t}\n\n\tpublic RemoveExistingGlue(){\n\t\tfor (let i = this._outputStream.length - 1; i >= 0; i--) {\n\t\t\tlet c = this._outputStream[i];\n\t\t\tif (c instanceof Glue) {\n\t\t\t\tthis._outputStream.splice(i, 1);\n\t\t\t} else if( c instanceof ControlCommand ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.OutputStreamDirty();\n\t}\n\n\tget outputStreamEndsInNewline(){\n\t\tif (this._outputStream.length > 0) {\n\n\t\t\tfor (let i = this._outputStream.length - 1; i >= 0; i--) {\n\t\t\t\tlet obj = this._outputStream[i];\n\t\t\t\tif (obj instanceof ControlCommand)\n\t\t\t\t\tbreak;\n\t\t\t\tlet text = this._outputStream[i];\n\t\t\t\tif (text instanceof StringValue) {\n\t\t\t\t\tif (text.isNewline)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\telse if (text.isNonWhitespace)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tget outputStreamContainsContent(){\n\t\tfor (let i = 0; i < this._outputStream.length; i++){\n\t\t\tif (this._outputStream[i] instanceof StringValue)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget inStringEvaluation(){\n\t\tfor (let i = this._outputStream.length - 1; i >= 0; i--) {\n\t\t\t// var cmd = this._outputStream[i] as ControlCommand;\n\t\t\tlet cmd = asOrNull(this._outputStream[i], ControlCommand);\n\t\t\tif (cmd instanceof ControlCommand && cmd.commandType == ControlCommand.CommandType.BeginString) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic PushEvaluationStack(obj: InkObject | null){\n\t\t// var listValue = obj as ListValue;\n\t\tlet listValue = asOrNull(obj, ListValue);\n\t\tif (listValue) {\n\n\t\t\t// Update origin when list is has something to indicate the list origin\n\t\t\tlet rawList = listValue.value;\n\t\t\tif (rawList === null) { return throwNullException('rawList'); }\n\n\t\t\tif (rawList.originNames != null) {\n\t\t\t\tif (!rawList.origins) rawList.origins = [];\n\t\t\t\trawList.origins.length = 0;\n\n\t\t\t\tfor (let n of rawList.originNames) {\n\t\t\t\t\tif (this.story.listDefinitions === null) return throwNullException('StoryState.story.listDefinitions');\n\t\t\t\t\tlet def = this.story.listDefinitions.TryListGetDefinition(n, null);\n\t\t\t\t\tif (def.result === null) return throwNullException('StoryState def.result');\n\t\t\t\t\tif (rawList.origins.indexOf(def.result) < 0) rawList.origins.push(def.result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (obj === null) { return throwNullException('obj'); }\n\t\tthis.evaluationStack.push(obj);\n\t}\n\n\tpublic PopEvaluationStack(): InkObject;\n\tpublic PopEvaluationStack(numberOfObjects: number): InkObject[];\n\tpublic PopEvaluationStack(numberOfObjects?: number){\n\t\tif (typeof numberOfObjects === 'undefined'){\n\t\t\tlet obj = this.evaluationStack.pop();\n\t\t\treturn nullIfUndefined(obj);\n\t\t} else {\n\t\t\tif(numberOfObjects > this.evaluationStack.length) {\n\t\t\t\tthrow new Error('trying to pop too many objects');\n\t\t\t}\n\n\t\t\tlet popped = this.evaluationStack.splice(this.evaluationStack.length - numberOfObjects, numberOfObjects);\n\t\t\treturn nullIfUndefined(popped);\n\t\t}\n\t}\n\n\tpublic PeekEvaluationStack(){\n\t\t return this.evaluationStack[this.evaluationStack.length - 1];\n\t}\n\n\tpublic ForceEnd(){\n\t\tthis.callStack.Reset();\n\n\t\tthis._currentChoices.length = 0;\n\n\t\tthis.currentPointer = Pointer.Null;\n\t\tthis.previousPointer = Pointer.Null;\n\n\t\tthis.didSafeExit = true;\n\t}\n\n\tpublic TrimWhitespaceFromFunctionEnd(){\n\t\tDebug.Assert (this.callStack.currentElement.type == PushPopType.Function);\n\t\tlet functionStartPoint = this.callStack.currentElement.functionStartInOutputStream;\n\n\t\tif (functionStartPoint == -1) {\n\t\t\tfunctionStartPoint = 0;\n\t\t}\n\n\t\tfor (let i = this._outputStream.length - 1; i >= functionStartPoint; i--) {\n\t\t\tlet obj = this._outputStream[i];\n\t\t\tlet txt = asOrNull(obj, StringValue);\n\t\t\tlet cmd = asOrNull(obj, ControlCommand);\n\n\t\t\tif (txt == null) continue;\n\t\t\tif (cmd) break;\n\n\t\t\tif (txt.isNewline || txt.isInlineWhitespace) {\n\t\t\t\tthis._outputStream.splice(i, 1);\n\t\t\t\tthis.OutputStreamDirty();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic PopCallStack(popType: PushPopType | null = null) {\n\t\tif (this.callStack.currentElement.type == PushPopType.Function)\n\t\t\tthis.TrimWhitespaceFromFunctionEnd();\n\n\t\tthis.callStack.Pop(popType);\n\t}\n\n\tpublic SetChosenPath(path: Path, incrementingTurnIndex: boolean){\n\t\t// Changing direction, assume we need to clear current set of choices\n\t\tthis._currentChoices.length = 0;\n\n\t\tlet newPointer = this.story.PointerAtPath(path);\n\t\tif (!newPointer.isNull && newPointer.index == -1)\n\t\t\tnewPointer.index = 0;\n\n\t\tthis.currentPointer = newPointer;\n\n\t\tif (incrementingTurnIndex)\n\t\t\tthis._currentTurnIndex++;\n\t}\n\n\tpublic StartFunctionEvaluationFromGame(funcContainer: Container, args: any[]){\n\t\tthis.callStack.Push(PushPopType.FunctionEvaluationFromGame, this.evaluationStack.length);\n\t\tthis.callStack.currentElement.currentPointer = Pointer.StartOf(funcContainer);\n\n\t\tthis.PassArgumentsToEvaluationStack(args);\n\t}\n\n\tpublic PassArgumentsToEvaluationStack(args: any[]){\n\t\t// Pass arguments onto the evaluation stack\n\t\tif (args != null) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tif (!(typeof args[i] === 'number' || typeof args[i] === 'string')) {\n\t\t\t\t\tthrow new Error('ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters  must be int, float or string');\n\t\t\t\t}\n\n\t\t\t\tthis.PushEvaluationStack(Value.Create(args[i]));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic TryExitFunctionEvaluationFromGame(){\n\t\tif (this.callStack.currentElement.type == PushPopType.FunctionEvaluationFromGame) {\n\t\t\tthis.currentPointer = Pointer.Null;\n\t\t\tthis.didSafeExit = true;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic CompleteFunctionEvaluationFromGame(){\n\t\tif (this.callStack.currentElement.type != PushPopType.FunctionEvaluationFromGame) {\n\t\t\tthrow new StoryException('Expected external function evaluation to be complete. Stack trace: '+this.callStack.callStackTrace);\n\t\t}\n\n\t\tlet originalEvaluationStackHeight = this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n\t\tlet returnedObj: InkObject | null = null;\n\t\twhile (this.evaluationStack.length > originalEvaluationStackHeight) {\n\t\t\tlet poppedObj = this.PopEvaluationStack();\n\t\t\tif (returnedObj === null)\n\t\t\t\treturnedObj = poppedObj;\n\t\t}\n\n\t\tthis.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n\t\tif (returnedObj) {\n\t\t\tif (returnedObj instanceof Void)\n\t\t\t\treturn null;\n\n\t\t\t// Some kind of value, if not void\n\t\t\t// var returnVal = returnedObj as Runtime.Value;\n\t\t\tlet returnVal = asOrThrows(returnedObj, Value);\n\n\t\t\t// DivertTargets get returned as the string of components\n\t\t\t// (rather than a Path, which isn't public)\n\t\t\tif (returnVal.valueType == ValueType.DivertTarget) {\n\t\t\t\treturn returnVal.valueObject.toString();\n\t\t\t}\n\n\t\t\t// Other types can just have their exact object type:\n\t\t\t// int, float, string. VariablePointers get returned as strings.\n\t\t\treturn returnVal.valueObject;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic AddError(message: string, isWarning: boolean){\n\t\tif (!isWarning) {\n\t\t\tif (this._currentErrors == null) this._currentErrors = [];\n\t\t\tthis._currentErrors.push(message);\n\t\t} else {\n\t\t\tif (this._currentWarnings == null) this._currentWarnings = [];\n\t\t\tthis._currentWarnings.push(message);\n\t\t}\n\t}\n\n\tpublic OutputStreamDirty(){\n\t\tthis._outputStreamTextDirty = true;\n\t\tthis._outputStreamTagsDirty = true;\n\t}\n\n\tprivate _outputStream: InkObject[];\n\tprivate _outputStreamTextDirty = true;\n\tprivate _outputStreamTagsDirty = true;\n\tprivate _currentChoices: Choice[];\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n\n\tprivate startTime: number | undefined;\n\n\tconstructor(){\n\t\tthis.startTime = undefined;\n\t}\n\n\tget ElapsedMilliseconds(): number{\n\t\tif (typeof this.startTime === 'undefined'){\n\t\t\treturn 0;\n\t\t}\n\t\treturn (new Date().getTime()) - this.startTime;\n\t}\n\n\tpublic Start(){\n\t\tthis.startTime = new Date().getTime();\n\t}\n\tpublic Stop(){\n\t\tthis.startTime = undefined;\n\t}\n}\n","import {Container} from './Container';\nimport {InkObject} from './Object';\nimport {JsonSerialisation} from './JsonSerialisation';\nimport {StoryState} from './StoryState';\nimport {ControlCommand} from './ControlCommand';\nimport {PushPopType} from './PushPop';\nimport {ChoicePoint} from './ChoicePoint';\nimport {Choice} from './Choice';\nimport {Divert} from './Divert';\nimport {Value, StringValue, IntValue, DivertTargetValue, VariablePointerValue, ListValue} from './Value';\nimport {Path} from './Path';\nimport {Void} from './Void';\nimport {Tag} from './Tag';\nimport {VariableAssignment} from './VariableAssignment';\nimport {VariableReference} from './VariableReference';\nimport {NativeFunctionCall} from './NativeFunctionCall';\nimport {StoryException} from './StoryException';\nimport {PRNG} from './PRNG';\nimport {StringBuilder} from './StringBuilder';\nimport {ListDefinitionsOrigin} from './ListDefinitionsOrigin';\nimport {ListDefinition} from './ListDefinition';\nimport {Stopwatch} from './StopWatch';\nimport {Pointer} from './Pointer';\nimport {InkList, InkListItem, KeyValuePair} from './InkList';\nimport {JObject} from './JObject';\nimport {asOrNull, asOrThrows} from './TypeAssertion';\nimport {DebugMetadata} from './DebugMetadata';\nimport {throwNullException} from './NullException';\n\nexport {InkList} from './InkList';\n\n// tslint:disable no-conditional-assignment\n\nif (!Number.isInteger) {\n\tNumber.isInteger = function isInteger(nVal: any) {\n\t\treturn typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;\n\t};\n}\n\nexport class Story extends InkObject{\n\n\tpublic inkVersionCurrent = 19;\n\n\tpublic inkVersionMinimumCompatible = 18;\n\n\tget currentChoices(){\n\t\tlet choices: Choice[] = [];\n\n\t\tif (this._state === null) { return throwNullException('this._state'); }\n\t\tfor(let c of this._state.currentChoices) {\n\t\t\tif (!c.isInvisibleDefault) {\n\t\t\t\tc.index = choices.length;\n\t\t\t\tchoices.push(c);\n\t\t\t}\n\t\t}\n\n\t\treturn choices;\n\t}\n\n\tget currentText(){\n\t\tthis.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n\t\treturn this.state.currentText;\n\t}\n\n\tget currentTags(){\n\t\tthis.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n\t\treturn this.state.currentTags;\n\t}\n\n\tget currentErrors(){\n\t\treturn this.state.currentErrors;\n\t}\n\n\tget currentWarnings(){\n\t\treturn this.state.currentWarnings;\n\t}\n\n\tget hasError(){\n\t\treturn this.state.hasError;\n\t}\n\n\tget hasWarning(){\n\t\treturn this.state.hasWarning;\n\t}\n\n\tget variablesState(){\n\t\treturn this.state.variablesState;\n\t}\n\n\tget listDefinitions(){\n\t\treturn this._listDefinitions;\n\t}\n\n\tget state(){\n\t\treturn this._state;\n\t}\n\n\t// TODO: Implement Profiler\n\tpublic StartProfiling(){ /* */ }\n\tpublic EndProfiling(){ /* */ }\n\n\tconstructor(contentContainer: Container, lists: ListDefinition[] | null);\n\tconstructor(jsonString: string);\n\tconstructor(json: JObject);\n\tconstructor(){\n\t\tsuper();\n\n\t\t// Discrimination between constructors\n\t\tlet contentContainer: Container;\n\t\tlet lists: ListDefinition[] | null = null;\n\t\tlet json: JObject | null = null;\n\n\t\tif (arguments[0] instanceof Container) {\n\t\t\tcontentContainer = arguments[0] as Container;\n\n\t\t\tif (typeof arguments[1] !== 'undefined') {\n\t\t\t\tlists = arguments[1] as ListDefinition[];\n\t\t\t}\n\n\t\t\t// ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n\t\t\tthis._mainContentContainer = contentContainer;\n\t\t\t// ------\n\t\t} else {\n\t\t\tif (typeof arguments[0] === 'string') {\n\t\t\t\tlet jsonString = arguments[0] as string;\n\t\t\t\tjson = JSON.parse(jsonString);\n\t\t\t} else {\n\t\t\t\tjson = arguments[0] as JObject;\n\t\t\t}\n\t\t}\n\n\t\t// ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n\t\tif (lists != null)\n\t\t\tthis._listDefinitions = new ListDefinitionsOrigin(lists);\n\n\t\tthis._externals = new Map();\n\t\t// ------\n\n\t\t// ------ Story(string jsonString) : this((Container)null)\n\t\tif (json !== null) {\n\t\t\tlet rootObject: JObject = json;\n\n\t\t\tlet versionObj = rootObject['inkVersion'];\n\t\t\tif (versionObj == null)\n\t\t\t\tthrow new Error(\"ink version number not found. Are you sure it's a valid .ink.json file?\");\n\n\t\t\tlet formatFromFile = parseInt(versionObj);\n\t\t\tif (formatFromFile > this.inkVersionCurrent){\n\t\t\t\tthrow new Error('Version of ink used to build story was newer than the current version of the engine');\n\t\t\t}\n\t\t\telse if (formatFromFile < this.inkVersionMinimumCompatible){\n\t\t\t\tthrow new Error('Version of ink used to build story is too old to be loaded by this version of the engine');\n\t\t\t}\n\t\t\telse if (formatFromFile != this.inkVersionCurrent){\n\t\t\t\tconsole.warn(\"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\");\n\t\t\t}\n\n\t\t\tlet rootToken = rootObject['root'];\n\t\t\tif (rootToken == null)\n\t\t\t\tthrow new Error(\"Root node for ink not found. Are you sure it's a valid .ink.json file?\");\n\n\t\t\tlet listDefsObj;\n\t\t\tif (listDefsObj = rootObject['listDefs']) {\n\t\t\t\tthis._listDefinitions = JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n\t\t\t}\n\n\t\t\tthis._mainContentContainer = asOrThrows(JsonSerialisation.JTokenToRuntimeObject(rootToken), Container);\n\n\t\t\tthis.ResetState();\n\t\t}\n\t\t// ------\n\t}\n\n\tpublic ToJsonString(){\n\t\tlet rootContainerJsonList = JsonSerialisation.RuntimeObjectToJToken(this._mainContentContainer);\n\n\t\tlet  rootObject: JObject = {};\n\t\trootObject['inkVersion'] = this.inkVersionCurrent;\n\t\trootObject['root'] = rootContainerJsonList;\n\n\t\tif (this._listDefinitions != null)\n\t\t\trootObject['listDefs'] = JsonSerialisation.ListDefinitionsToJToken(this._listDefinitions);\n\n\t\treturn JSON.stringify(rootObject);\n\t}\n\n\tpublic ResetState(){\n\t\tthis.IfAsyncWeCant('ResetState');\n\n\t\tthis._state = new StoryState(this);\n\t\tthis._state.variablesState.ObserveVariableChange(this.VariableStateDidChangeEvent.bind(this));\n\n\t\tthis.ResetGlobals();\n\t}\n\n\tpublic ResetErrors(){\n\t\tif (this._state === null) { return throwNullException('this._state'); }\n\t\tthis._state.ResetErrors();\n\t}\n\n\tpublic ResetCallstack(){\n\t\tthis.IfAsyncWeCant('ResetCallstack');\n\t\tif (this._state === null) { return throwNullException('this._state'); }\n\t\tthis._state.ForceEnd();\n\t}\n\n\tpublic ResetGlobals(){\n\t\tif (this._mainContentContainer.namedContent.get('global decl')){\n\t\t\tlet originalPointer = this.state.currentPointer.copy();\n\n\t\t\tthis.ChoosePath(new Path('global decl'), false);\n\n\t\t\tthis.ContinueInternal();\n\n\t\t\tthis.state.currentPointer = originalPointer;\n\t\t}\n\n\t\tthis.state.variablesState.SnapshotDefaultGlobals();\n\t}\n\n\tpublic Continue(){\n\t\tthis.ContinueAsync(0);\n\t\treturn this.currentText;\n\t}\n\n\tget canContinue(){\n\t\treturn this.state.canContinue;\n\t}\n\n\tget asyncContinueComplete(){\n\t\treturn !this._asyncContinueActive;\n\t}\n\n\tpublic ContinueAsync(millisecsLimitAsync: number){\n\t\tif (!this._hasValidatedExternals)\n\t\t\tthis.ValidateExternalBindings();\n\n\t\tthis.ContinueInternal(millisecsLimitAsync);\n\t}\n\n\tpublic ContinueInternal(millisecsLimitAsync = 0){\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PreContinue();\n\n\t\tlet isAsyncTimeLimited = millisecsLimitAsync > 0;\n\t\tthis._recursiveContinueCount++;\n\n\t\tif (!this._asyncContinueActive) {\n\t\t\tthis._asyncContinueActive = isAsyncTimeLimited;\n\n\t\t\tif (!this.canContinue) {\n\t\t\t\tthrow new StoryException(\"Can't continue - should check canContinue before calling Continue\");\n\t\t\t}\n\n\t\t\tthis._state.didSafeExit = false;\n\t\t\tthis._state.ResetOutput();\n\n\t\t\tif (this._recursiveContinueCount == 1)\n\t\t\t\tthis._state.variablesState.batchObservingVariableChanges = true;\n\t\t}\n\n\t\tlet durationStopwatch = new Stopwatch();\n\t\tdurationStopwatch.Start();\n\n\t\tlet outputStreamEndsInNewline = false;\n\t\tdo {\n\t\t\ttry {\n\t\t\t\toutputStreamEndsInNewline = this.ContinueSingleStep();\n\t\t\t} catch (e) {\n\t\t\t\tif (!(e instanceof StoryException)) throw e;\n\n\t\t\t\tthis.AddError(e.message, undefined, e.useEndLineNumber);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (outputStreamEndsInNewline)\n\t\t\t\tbreak;\n\n\t\t\tif (this._asyncContinueActive && durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t} while(this.canContinue);\n\n\t\tdurationStopwatch.Stop();\n\n\t\tif (outputStreamEndsInNewline || !this.canContinue) {\n\t\t\tif (this._stateAtLastNewline != null) {\n\t\t\t\tthis.RestoreStateSnapshot(this._stateAtLastNewline);\n\t\t\t\tthis._stateAtLastNewline = null;\n\t\t\t}\n\n\t\t\tif (!this.canContinue) {\n\t\t\t\tif (this.state.callStack.canPopThread)\n\t\t\t\t\tthis.AddError('Thread available to pop, threads should always be flat by the end of evaluation?');\n\n\t\t\t\tif (this.state.generatedChoices.length == 0 && !this.state.didSafeExit && this._temporaryEvaluationContainer == null) {\n\t\t\t\t\tif (this.state.callStack.CanPop(PushPopType.Tunnel))\n\t\t\t\t\t\tthis.AddError (\"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\");\n\t\t\t\t\telse if (this.state.callStack.CanPop(PushPopType.Function))\n\t\t\t\t\t\tthis.AddError (\"unexpectedly reached end of content. Do you need a '~ return'?\");\n\t\t\t\t\telse if (!this.state.callStack.canPop)\n\t\t\t\t\t\tthis.AddError (\"ran out of content. Do you need a '-> DONE' or '-> END'?\");\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.AddError ('unexpectedly reached end of content for unknown reason. Please debug compiler!');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state.didSafeExit = false;\n\n\t\t\tif (this._recursiveContinueCount == 1)\n\t\t\t\tthis._state.variablesState.batchObservingVariableChanges = false;\n\n\t\t\tthis._asyncContinueActive = false;\n\t\t}\n\n\t\tthis._recursiveContinueCount--;\n\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PostContinue();\n\t}\n\n\tpublic ContinueSingleStep(){\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PreStep();\n\n\t\tthis.Step();\n\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PostStep();\n\n\t\tif (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n\t\t\tthis.TryFollowDefaultInvisibleChoice();\n\t\t}\n\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PreSnapshot();\n\n\t\tif (!this.state.inStringEvaluation) {\n\n\t\t\tif (this._stateAtLastNewline != null) {\n\n\t\t\t\tif (this._stateAtLastNewline.currentTags === null) { return throwNullException('this._stateAtLastNewline.currentTags'); }\n\t\t\t\tif (this.state.currentTags === null) { return throwNullException('this.state.currentTags'); }\n\n\t\t\t\tlet change = this.CalculateNewlineOutputStateChange (\n\t\t\t\t\tthis._stateAtLastNewline.currentText, this.state.currentText,\n\t\t\t\t\tthis._stateAtLastNewline.currentTags.length, this.state.currentTags.length,\n\t\t\t\t);\n\n\t\t\t\tif (change == Story.OutputStateChange.ExtendedBeyondNewline) {\n\n\t\t\t\t\tthis.RestoreStateSnapshot(this._stateAtLastNewline);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\telse if (change == Story.OutputStateChange.NewlineRemoved) {\n\t\t\t\t\tthis._stateAtLastNewline = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.state.outputStreamEndsInNewline) {\n\t\t\t\tif (this.canContinue) {\n\t\t\t\t\tif (this._stateAtLastNewline == null)\n\t\t\t\t\t\tthis._stateAtLastNewline = this.StateSnapshot();\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tthis._stateAtLastNewline = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.PostSnapshot();\n\n\t\treturn false;\n\t}\n\n\tpublic CalculateNewlineOutputStateChange(prevText: string | null, currText: string | null, prevTagCount: number, currTagCount: number){\n\t\tif (prevText === null) { return throwNullException('prevText'); }\n\t\tif (currText === null) { return throwNullException('currText'); }\n\n\t\tlet newlineStillExists = currText.length >= prevText.length && currText.charAt(prevText.length - 1) == '\\n';\n\t\tif (prevTagCount == currTagCount && prevText.length == currText.length && newlineStillExists)\n\t\t\treturn Story.OutputStateChange.NoChange;\n\n\t\tif (!newlineStillExists) {\n\t\t\treturn Story.OutputStateChange.NewlineRemoved;\n\t\t}\n\n\t\tif (currTagCount > prevTagCount)\n\t\t\treturn Story.OutputStateChange.ExtendedBeyondNewline;\n\n\t\tfor (let i = prevText.length; i < currText.length; i++) {\n\t\t\tlet c = currText.charAt(i);\n\t\t\tif (c != ' ' && c != '\\t') {\n\t\t\t\treturn Story.OutputStateChange.ExtendedBeyondNewline;\n\t\t\t}\n\t\t}\n\n\t\treturn Story.OutputStateChange.NoChange;\n\t}\n\n\tpublic ContinueMaximally(){\n\t\tthis.IfAsyncWeCant('ContinueMaximally');\n\n\t\tlet sb = new StringBuilder();\n\n\t\twhile (this.canContinue) {\n\t\t\tsb.Append(this.Continue());\n\t\t}\n\n\t\treturn sb.toString();\n\t}\n\n\tpublic ContentAtPath(path: Path){\n\t\treturn this.mainContentContainer.ContentAtPath(path);\n\t}\n\n\tpublic KnotContainerWithName(name: string){\n\t\tlet namedContainer = this.mainContentContainer.namedContent.get(name);\n\t\tif (namedContainer instanceof Container)\n\t\t\treturn namedContainer;\n\t\telse\n\t\t\treturn null;\n\t}\n\n\tpublic PointerAtPath(path: Path) {\n\t\tif (path.length == 0)\n\t\t\treturn Pointer.Null;\n\n\t\tlet p = new Pointer();\n\n\t\tlet pathLengthToUse = path.length;\n\n\t\tlet result = null;\n\t\tif (path.lastComponent === null) { return throwNullException('path.lastComponent'); }\n\n\t\tif (path.lastComponent.isIndex) {\n\t\t\tpathLengthToUse = path.length - 1;\n\t\t\tresult = this.mainContentContainer.ContentAtPath(path, undefined, pathLengthToUse);\n\t\t\tp.container = result.container;\n\t\t\tp.index = path.lastComponent.index;\n\t\t} else {\n\t\t\tresult = this.mainContentContainer.ContentAtPath(path);\n\t\t\tp.container = result.container;\n\t\t\tp.index = -1;\n\t\t}\n\n\t\tif (result.obj == null || result.obj == this.mainContentContainer && pathLengthToUse > 0) {\n\t\t\tthis.Error(\"Failed to find content at path '\" + path + \"', and no approximation of it was possible.\");\n\t\t} else if (result.approximate)\n\t\t\tthis.Warning(\"Failed to find content at path '\" + path + \"', so it was approximated to: '\"+result.obj.path+\"'.\");\n\n\t\treturn p;\n\t}\n\n\tpublic StateSnapshot(){\n\t\treturn this.state.Copy();\n\t}\n\n\tpublic RestoreStateSnapshot(state: StoryState){\n\t\tthis._state = state;\n\t}\n\n\tpublic Step(){\n\n\t\tlet shouldAddToStream = true;\n\n\t\tlet pointer = this.state.currentPointer.copy();\n\t\tif (pointer.isNull) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Container containerToEnter = pointer.Resolve () as Container;\n\t\tlet containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n\t\twhile(containerToEnter) {\n\n\t\t\tthis.VisitContainer(containerToEnter, true);\n\n\t\t\t// No content? the most we can do is step past it\n\t\t\tif (containerToEnter.content.length == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tpointer = Pointer.StartOf(containerToEnter);\n\t\t\t// containerToEnter = pointer.Resolve() as Container;\n\t\t\tcontainerToEnter = asOrNull(pointer.Resolve(), Container);\n\t\t}\n\n\t\tthis.state.currentPointer = pointer.copy();\n\n\t\tif (this._profiler != null)\n\t\t\tthis._profiler.Step(this.state.callStack);\n\n\t\t// Is the current content object:\n\t\t//  - Normal content\n\t\t//  - Or a logic/flow statement - if so, do it\n\t\t// Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n\t\t// that was diverted to rather than called as a function)\n\t\tlet currentContentObj = pointer.Resolve();\n\t\tlet isLogicOrFlowControl = this.PerformLogicAndFlowControl(currentContentObj);\n\n\t\t// Has flow been forced to end by flow control above?\n\t\tif (this.state.currentPointer.isNull) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isLogicOrFlowControl) {\n\t\t\tshouldAddToStream = false;\n\t\t}\n\n\t\t// Choice with condition?\n\t\t// var choicePoint = currentContentObj as ChoicePoint;\n\t\tlet choicePoint = asOrNull(currentContentObj, ChoicePoint);\n\t\tif (choicePoint) {\n\t\t\tlet choice = this.ProcessChoice(choicePoint);\n\t\t\tif (choice) {\n\t\t\t\tthis.state.generatedChoices.push(choice);\n\t\t\t}\n\n\t\t\tcurrentContentObj = null;\n\t\t\tshouldAddToStream = false;\n\t\t}\n\n\t\t// If the container has no content, then it will be\n\t\t// the \"content\" itself, but we skip over it.\n\t\tif (currentContentObj instanceof Container) {\n\t\t\tshouldAddToStream = false;\n\t\t}\n\n\t\t// Content to add to evaluation stack or the output stream\n\t\tif (shouldAddToStream) {\n\n\t\t\t// If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n\t\t\t// to our current (possibly temporary) context index. And make a copy of the pointer\n\t\t\t// so that we're not editing the original runtime object.\n\t\t\t// var varPointer = currentContentObj as VariablePointerValue;\n\t\t\tlet varPointer = asOrNull(currentContentObj, VariablePointerValue);\n\t\t\tif (varPointer && varPointer.contextIndex == -1) {\n\n\t\t\t\t// Create new object so we're not overwriting the story's own data\n\t\t\t\tlet contextIdx = this.state.callStack.ContextForVariableNamed(varPointer.variableName);\n\t\t\t\tcurrentContentObj = new VariablePointerValue(varPointer.variableName, contextIdx);\n\t\t\t}\n\n\t\t\t// Expression evaluation content\n\t\t\tif (this.state.inExpressionEvaluation) {\n\t\t\t\tthis.state.PushEvaluationStack(currentContentObj);\n\t\t\t}\n\t\t\t// Output stream content (i.e. not expression evaluation)\n\t\t\telse {\n\t\t\t\tthis.state.PushToOutputStream(currentContentObj);\n\t\t\t}\n\t\t}\n\n\t\t// Increment the content pointer, following diverts if necessary\n\t\tthis.NextContent();\n\n\t\t// Starting a thread should be done after the increment to the content pointer,\n\t\t// so that when returning from the thread, it returns to the content after this instruction.\n\t\t// var controlCmd = currentContentObj as ;\n\t\tlet controlCmd = asOrNull(currentContentObj, ControlCommand);\n\t\tif (controlCmd && controlCmd.commandType == ControlCommand.CommandType.StartThread) {\n\t\t\tthis.state.callStack.PushThread();\n\t\t}\n\t}\n\n\tpublic VisitContainer(container: Container, atStart: boolean){\n\t\tif (!container.countingAtStartOnly || atStart) {\n\t\t\tif (container.visitsShouldBeCounted)\n\t\t\t\tthis.IncrementVisitCountForContainer(container);\n\n\t\t\tif (container.turnIndexShouldBeCounted)\n\t\t\t\tthis.RecordTurnIndexVisitToContainer(container);\n\t\t}\n\t}\n\n\tprivate _prevContainers: Container[] = [];\n\tpublic VisitChangedContainersDueToDivert(){\n\t\tlet previousPointer = this.state.previousPointer.copy();\n\t\tlet pointer = this.state.currentPointer.copy();\n\n\t\tif (pointer.isNull || pointer.index == -1)\n\t\t\treturn;\n\n\t\tthis._prevContainers.length = 0;\n\t\tif (!previousPointer.isNull) {\n\t\t\t// Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n\t\t\tlet resolvedPreviousAncestor = previousPointer.Resolve();\n\t\t\tlet prevAncestor = asOrNull(resolvedPreviousAncestor, Container) || asOrNull(previousPointer.container, Container);\n\t\t\twhile (prevAncestor) {\n\t\t\t\tthis._prevContainers.push(prevAncestor);\n\t\t\t\t// prevAncestor = prevAncestor.parent as Container;\n\t\t\t\tprevAncestor = asOrNull(prevAncestor.parent, Container);\n\t\t\t}\n\t\t}\n\n\t\tlet currentChildOfContainer = pointer.Resolve();\n\n\t\tif (currentChildOfContainer == null) return;\n\n\t\t// Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n\t\tlet currentContainerAncestor = asOrNull(currentChildOfContainer.parent, Container);\n\t\twhile (currentContainerAncestor && (this._prevContainers.indexOf(currentContainerAncestor) < 0 || currentContainerAncestor.countingAtStartOnly)) {\n\n\t\t\t// Check whether this ancestor container is being entered at the start,\n\t\t\t// by checking whether the child object is the first.\n\t\t\tlet enteringAtStart = currentContainerAncestor.content.length > 0\n\t\t\t\t&& currentChildOfContainer == currentContainerAncestor.content[0];\n\n\t\t\t// Mark a visit to this container\n\t\t\tthis.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n\t\t\tcurrentChildOfContainer = currentContainerAncestor;\n\t\t\t// currentContainerAncestor = currentContainerAncestor.parent as Container;\n\t\t\tcurrentContainerAncestor = asOrNull(currentContainerAncestor.parent, Container);\n\t\t}\n\t}\n\n\tpublic ProcessChoice(choicePoint: ChoicePoint){\n\t\tlet showChoice = true;\n\n\t\t// Don't create choice if choice point doesn't pass conditional\n\t\tif (choicePoint.hasCondition) {\n\t\t\tlet conditionValue = this.state.PopEvaluationStack();\n\t\t\tif (!this.IsTruthy(conditionValue)) {\n\t\t\t\tshowChoice = false;\n\t\t\t}\n\t\t}\n\n\t\tlet startText = '';\n\t\tlet choiceOnlyText = '';\n\n\t\tif (choicePoint.hasChoiceOnlyContent) {\n\t\t\t// var choiceOnlyStrVal = state.PopEvaluationStack () as StringValue;\n\t\t\tlet choiceOnlyStrVal = asOrThrows(this.state.PopEvaluationStack(), StringValue);\n\t\t\tchoiceOnlyText = choiceOnlyStrVal.value || '';\n\t\t}\n\n\t\tif (choicePoint.hasStartContent) {\n\t\t\t// var startStrVal = state.PopEvaluationStack () as StringValue;\n\t\t\tlet startStrVal = asOrThrows(this.state.PopEvaluationStack(), StringValue);\n\t\t\tstartText = startStrVal.value || '';\n\t\t}\n\n\t\t// Don't create choice if player has already read this content\n\t\tif (choicePoint.onceOnly) {\n\t\t\tlet visitCount = this.VisitCountForContainer(choicePoint.choiceTarget);\n\t\t\tif (visitCount > 0) {\n\t\t\t\tshowChoice = false;\n\t\t\t}\n\t\t}\n\n\t\t// We go through the full process of creating the choice above so\n\t\t// that we consume the content for it, since otherwise it'll\n\t\t// be shown on the output stream.\n\t\tif (!showChoice) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet choice = new Choice();\n\t\tchoice.targetPath = choicePoint.pathOnChoice;\n\t\tchoice.sourcePath = choicePoint.path.toString();\n\t\tchoice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n\t\tchoice.threadAtGeneration = this.state.callStack.ForkThread();\n\n\t\tchoice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, '');\n\n\t\treturn choice;\n\t}\n\n\tpublic IsTruthy(obj: InkObject){\n\t\tlet truthy = false;\n\t\tif (obj instanceof Value) {\n\t\t\tlet val = obj;\n\n\t\t\tif (val instanceof DivertTargetValue) {\n\t\t\t\tlet divTarget = val;\n\t\t\t\tthis.Error(\"Shouldn't use a divert target (to \" + divTarget.targetPath + \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn val.isTruthy;\n\t\t}\n\t\treturn truthy;\n\t}\n\n\tpublic PerformLogicAndFlowControl(contentObj: InkObject | null){\n\t\tif( contentObj == null ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Divert\n\t\tif (contentObj instanceof Divert) {\n\t\t\tlet currentDivert = contentObj;\n\n\t\t\tif (currentDivert.isConditional) {\n\t\t\t\tlet conditionValue = this.state.PopEvaluationStack();\n\n\t\t\t\t// False conditional? Cancel divert\n\t\t\t\tif (!this.IsTruthy(conditionValue))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (currentDivert.hasVariableTarget) {\n\t\t\t\tlet varName = currentDivert.variableDivertName;\n\n\t\t\t\tlet varContents = this.state.variablesState.GetVariableWithName(varName);\n\n\t\t\t\tif (varContents == null) {\n\t\t\t\t\tthis.Error('Tried to divert using a target from a variable that could not be found (' + varName + ')');\n\t\t\t\t}\n\t\t\t\telse if (!(varContents instanceof DivertTargetValue)) {\n\n\t\t\t\t\t// var intContent = varContents as IntValue;\n\t\t\t\t\tlet intContent = asOrNull(varContents, IntValue);\n\n\t\t\t\t\tlet errorMessage = 'Tried to divert to a target from a variable, but the variable (' + varName + \") didn't contain a divert target, it \";\n\t\t\t\t\tif (intContent instanceof IntValue && intContent.value == 0) {\n\t\t\t\t\t\terrorMessage += 'was empty/null (the value 0).';\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrorMessage += \"contained '\" + varContents + \"'.\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.Error(errorMessage);\n\t\t\t\t}\n\n\t\t\t\tlet target = asOrThrows(varContents, DivertTargetValue);\n\t\t\t\tthis.state.divertedPointer = this.PointerAtPath(target.targetPath);\n\n\t\t\t} else if (currentDivert.isExternal) {\n\t\t\t\tthis.CallExternalFunction(currentDivert.targetPathString, currentDivert.externalArgs);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthis.state.divertedPointer = currentDivert.targetPointer.copy();\n\t\t\t}\n\n\t\t\tif (currentDivert.pushesToStack) {\n\t\t\t\tthis.state.callStack.Push(\n\t\t\t\t\tcurrentDivert.stackPushType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.state.outputStream.length,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n\n\t\t\t\tif (currentDivert && currentDivert.debugMetadata && currentDivert.debugMetadata.sourceName != null) {\n\t\t\t\t\tthis.Error(\"Divert target doesn't exist: \" + currentDivert.debugMetadata.sourceName);\n\t\t\t\t} else {\n\t\t\t\t\tthis.Error('Divert resolution failed: ' + currentDivert);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Start/end an expression evaluation? Or print out the result?\n\t\telse if( contentObj instanceof ControlCommand ) {\n\t\t\tlet evalCommand = contentObj;\n\n\t\t\tswitch (evalCommand.commandType) {\n\n\t\t\tcase ControlCommand.CommandType.EvalStart:\n\t\t\t\tthis.Assert(this.state.inExpressionEvaluation === false, 'Already in expression evaluation?');\n\t\t\t\tthis.state.inExpressionEvaluation = true;\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.EvalEnd:\n\t\t\t\tthis.Assert(this.state.inExpressionEvaluation === true, 'Not in expression evaluation mode');\n\t\t\t\tthis.state.inExpressionEvaluation = false;\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.EvalOutput:\n\n\t\t\t\t// If the expression turned out to be empty, there may not be anything on the stack\n\t\t\t\tif (this.state.evaluationStack.length > 0) {\n\n\t\t\t\t\tlet output = this.state.PopEvaluationStack();\n\n\t\t\t\t\t// Functions may evaluate to Void, in which case we skip output\n\t\t\t\t\tif (!(output instanceof Void)) {\n\t\t\t\t\t\t// TODO: Should we really always blanket convert to string?\n\t\t\t\t\t\t// It would be okay to have numbers in the output stream the\n\t\t\t\t\t\t// only problem is when exporting text for viewing, it skips over numbers etc.\n\t\t\t\t\t\tlet text = new StringValue(output.toString());\n\n\t\t\t\t\t\tthis.state.PushToOutputStream(text);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.NoOp:\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.Duplicate:\n\t\t\t\tthis.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.PopEvaluatedValue:\n\t\t\t\tthis.state.PopEvaluationStack();\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.PopFunction:\n\t\t\tcase ControlCommand.CommandType.PopTunnel:\n\n\t\t\t\tlet popType = evalCommand.commandType == ControlCommand.CommandType.PopFunction ?\n\t\t\t\t\tPushPopType.Function : PushPopType.Tunnel;\n\n\t\t\t\tlet overrideTunnelReturnTarget: DivertTargetValue | null = null;\n\t\t\t\tif (popType == PushPopType.Tunnel) {\n\t\t\t\t\tlet popped = this.state.PopEvaluationStack();\n\t\t\t\t\t// overrideTunnelReturnTarget = popped as DivertTargetValue;\n\t\t\t\t\toverrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n\t\t\t\t\tif (overrideTunnelReturnTarget === null) {\n\t\t\t\t\t\tthis.Assert(popped instanceof Void, \"Expected void if ->-> doesn't override target\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.state.TryExitFunctionEvaluationFromGame()){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (this.state.callStack.currentElement.type != popType || !this.state.callStack.canPop) {\n\n\t\t\t\t\tlet names: Map<PushPopType, string> = new Map();\n\t\t\t\t\tnames.set(PushPopType.Function, 'function return statement (~ return)');\n\t\t\t\t\tnames.set(PushPopType.Tunnel, 'tunnel onwards statement (->->)');\n\n\t\t\t\t\tlet expected = names.get(this.state.callStack.currentElement.type);\n\t\t\t\t\tif (!this.state.callStack.canPop) {\n\t\t\t\t\t\texpected = 'end of flow (-> END or choice)';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet errorMsg = 'Found ' + names.get(popType) + ', when expected ' + expected;\n\n\t\t\t\t\tthis.Error(errorMsg);\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tthis.state.PopCallStack();\n\n\t\t\t\t\tif (overrideTunnelReturnTarget)\n\t\t\t\t\t\tthis.state.divertedPointer = this.PointerAtPath(overrideTunnelReturnTarget.targetPath);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.BeginString:\n\t\t\t\tthis.state.PushToOutputStream(evalCommand);\n\n\t\t\t\tthis.Assert(this.state.inExpressionEvaluation === true, 'Expected to be in an expression when evaluating a string');\n\t\t\t\tthis.state.inExpressionEvaluation = false;\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.EndString:\n\n\t\t\t\tlet contentStackForString: InkObject[] = [];\n\n\t\t\t\tlet outputCountConsumed = 0;\n\t\t\t\tfor (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n\t\t\t\t\tlet obj = this.state.outputStream[i];\n\n\t\t\t\t\toutputCountConsumed++;\n\n\t\t\t\t\t// var command = obj as ControlCommand;\n\t\t\t\t\tlet command = asOrNull(obj, ControlCommand);\n\t\t\t\t\tif (command && command.commandType == ControlCommand.CommandType.BeginString) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( obj instanceof StringValue ) {\n\t\t\t\t\t\tcontentStackForString.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Consume the content that was produced for this string\n\t\t\t\tthis.state.PopFromOutputStream(outputCountConsumed);\n\n\t\t\t\t// The C# version uses a Stack for contentStackForString, but we're\n\t\t\t\t// using a simple array, so we need to reverse it before using it\n\t\t\t\tcontentStackForString = contentStackForString.reverse();\n\n\t\t\t\t// Build string out of the content we collected\n\t\t\t\tlet sb = new StringBuilder();\n\t\t\t\tfor (let c of contentStackForString) {\n\t\t\t\t\tsb.Append(c.toString());\n\t\t\t\t}\n\n\t\t\t\t// Return to expression evaluation (from content mode)\n\t\t\t\tthis.state.inExpressionEvaluation = true;\n\t\t\t\tthis.state.PushEvaluationStack(new StringValue(sb.toString()));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.ChoiceCount:\n\t\t\t\tlet choiceCount = this.state.generatedChoices.length;\n\t\t\t\tthis.state.PushEvaluationStack(new IntValue(choiceCount));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.Turns:\n\t\t\t\tthis.state.PushEvaluationStack (new IntValue (this.state.currentTurnIndex+1));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.TurnsSince:\n\t\t\tcase ControlCommand.CommandType.ReadCount:\n\t\t\t\tlet target = this.state.PopEvaluationStack();\n\t\t\t\tif( !(target instanceof DivertTargetValue) ) {\n\t\t\t\t\tlet extraNote = '';\n\t\t\t\t\tif( target instanceof IntValue )\n\t\t\t\t\t\textraNote = \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n\t\t\t\t\tthis.Error('TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw '+target+extraNote);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// var divertTarget = target as DivertTargetValue;\n\t\t\t\tlet divertTarget = asOrThrows(target, DivertTargetValue);\n\t\t\t\t// var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n\t\t\t\tlet container = asOrNull(this.ContentAtPath(divertTarget.targetPath).correctObj, Container);\n\n\t\t\t\tlet eitherCount;\n\t\t\t\tif (container != null) {\n\t\t\t\t\tif (evalCommand.commandType == ControlCommand.CommandType.TurnsSince)\n\t\t\t\t\t\teitherCount = this.TurnsSinceForContainer(container);\n\t\t\t\t\telse\n\t\t\t\t\t\teitherCount = this.VisitCountForContainer(container);\n\t\t\t\t} else {\n\t\t\t\t\tif (evalCommand.commandType == ControlCommand.CommandType.TurnsSince)\n\t\t\t\t\t\teitherCount = -1;\n\t\t\t\t\telse\n\t\t\t\t\t\teitherCount = 0;\n\n\t\t\t\t\tthis.Warning('Failed to find container for ' + evalCommand.toString() + ' lookup at ' + divertTarget.targetPath.toString());\n\t\t\t\t}\n\n\t\t\t\tthis.state.PushEvaluationStack(new IntValue(eitherCount));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.Random: {\n\t\t\t\tlet maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\t\t\t\tlet minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n\t\t\t\tif (minInt == null || minInt instanceof IntValue === false)\n\t\t\t\t\treturn this.Error('Invalid value for minimum parameter of RANDOM(min, max)');\n\n\t\t\t\tif (maxInt == null || minInt instanceof IntValue === false)\n\t\t\t\t\treturn this.Error('Invalid value for maximum parameter of RANDOM(min, max)');\n\n\t\t\t\t// Originally a primitive type, but here, can be null.\n\t\t\t\t// TODO: Replace by default value?\n\t\t\t\tif (maxInt.value === null) { return throwNullException('maxInt.value'); }\n\t\t\t\tif (minInt.value === null) { return throwNullException('minInt.value'); }\n\n\t\t\t\tlet randomRange = maxInt.value - minInt.value + 1;\n\t\t\t\tif (randomRange <= 0)\n\t\t\t\t\tthis.Error('RANDOM was called with minimum as ' + minInt.value + ' and maximum as ' + maxInt.value + '. The maximum must be larger');\n\n\t\t\t\tlet resultSeed = this.state.storySeed + this.state.previousRandom;\n\t\t\t\tlet random = new PRNG(resultSeed);\n\n\t\t\t\tlet nextRandom = random.next();\n\t\t\t\tlet chosenValue = (nextRandom % randomRange) + minInt.value;\n\t\t\t\tthis.state.PushEvaluationStack(new IntValue(chosenValue));\n\n\t\t\t\t// Next random number (rather than keeping the Random object around)\n\t\t\t\tthis.state.previousRandom = nextRandom;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase ControlCommand.CommandType.SeedRandom:\n\t\t\t\tlet seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\t\t\t\tif (seed == null || seed instanceof IntValue === false)\n\t\t\t\t\treturn this.Error('Invalid value passed to SEED_RANDOM');\n\n\t\t\t\t// Originally a primitive type, but here, can be null.\n\t\t\t\t// TODO: Replace by default value?\n\t\t\t\tif (seed.value === null) { return throwNullException('minInt.value'); }\n\n\t\t\t\tthis.state.storySeed = seed.value;\n\t\t\t\tthis.state.previousRandom = 0;\n\n\t\t\t\tthis.state.PushEvaluationStack(new Void());\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.VisitIndex:\n\t\t\t\tlet count = this.VisitCountForContainer(this.state.currentPointer.container) - 1; // index not count\n\t\t\t\tthis.state.PushEvaluationStack(new IntValue(count));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.SequenceShuffleIndex:\n\t\t\t\tlet shuffleIndex = this.NextSequenceShuffleIndex();\n\t\t\t\tthis.state.PushEvaluationStack(new IntValue(shuffleIndex));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.StartThread:\n\t\t\t\t// Handled in main step function\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.Done:\n\t\t\t\t// We may exist in the context of the initial\n\t\t\t\t// act of creating the thread, or in the context of\n\t\t\t\t// evaluating the content.\n\t\t\t\tif (this.state.callStack.canPopThread) {\n\t\t\t\t\tthis.state.callStack.PopThread();\n\t\t\t\t}\n\n\t\t\t\t// In normal flow - allow safe exit without warning\n\t\t\t\telse {\n\t\t\t\t\tthis.state.didSafeExit = true;\n\n\t\t\t\t\t// Stop flow in current thread\n\t\t\t\t\tthis.state.currentPointer = Pointer.Null;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t// Force flow to end completely\n\t\t\tcase ControlCommand.CommandType.End:\n\t\t\t\tthis.state.ForceEnd();\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.ListFromInt:\n\t\t\t\t// var intVal = state.PopEvaluationStack () as IntValue;\n\t\t\t\tlet intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\t\t\t\t// var listNameVal = state.PopEvaluationStack () as StringValue;\n\t\t\t\tlet listNameVal = asOrThrows(this.state.PopEvaluationStack(), StringValue);\n\n\t\t\t\tif (intVal === null) {\n\t\t\t\t\tthrow new StoryException('Passed non-integer when creating a list element from a numerical value.');\n\t\t\t\t}\n\n\t\t\t\tlet generatedListValue = null;\n\n\t\t\t\tif (this.listDefinitions === null) { return throwNullException('this.listDefinitions'); }\n\t\t\t\tlet foundListDef = this.listDefinitions.TryListGetDefinition(listNameVal.value, null);\n\t\t\t\tif (foundListDef.exists) {\n\t\t\t\t\t// Originally a primitive type, but here, can be null.\n\t\t\t\t\t// TODO: Replace by default value?\n\t\t\t\t\tif (intVal.value === null) { return throwNullException('minInt.value'); }\n\n\t\t\t\t\tlet foundItem = foundListDef.result!.TryGetItemWithValue(intVal.value, InkListItem.Null);\n\t\t\t\t\tif (foundItem.exists) {\n\t\t\t\t\t\tgeneratedListValue = new ListValue(foundItem.result!, intVal.value);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new StoryException('Failed to find LIST called ' + listNameVal.value);\n\t\t\t\t}\n\n\t\t\t\tif (generatedListValue == null)\n\t\t\t\t\tgeneratedListValue = new ListValue();\n\n\t\t\t\tthis.state.PushEvaluationStack(generatedListValue);\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.ListRange:\n\t\t\t\tlet max = asOrNull(this.state.PopEvaluationStack(), Value);\n\t\t\t\tlet min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n\t\t\t\t// var targetList = state.PopEvaluationStack () as ListValue;\n\t\t\t\tlet targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n\t\t\t\tif (targetList === null || min === null || max === null)\n\t\t\t\t\tthrow new StoryException('Expected list, minimum and maximum for LIST_RANGE');\n\n\t\t\t\tif (targetList.value === null) { return throwNullException('targetList.value'); }\n\t\t\t\tlet result = targetList.value.ListWithSubRange(min.valueObject, max.valueObject);\n\n\t\t\t\tthis.state.PushEvaluationStack (new ListValue(result));\n\t\t\t\tbreak;\n\n\t\t\tcase ControlCommand.CommandType.ListRandom: {\n\t\t\t\tlet listVal = this.state.PopEvaluationStack() as ListValue;\n\t\t\t\tif (listVal === null)\n\t\t\t\t\tthrow new StoryException('Expected list for LIST_RANDOM');\n\n\t\t\t\tlet list = listVal.value;\n\n\t\t\t\tlet newList: InkList | null = null;\n\n\t\t\t\tif (list === null) { throw throwNullException('list'); }\n\t\t\t\tif (list.Count == 0) {\n\t\t\t\t\tnewList = new InkList();\n\t\t\t\t} else {\n\t\t\t\t\t// Generate a random index for the element to take\n\t\t\t\t\tlet resultSeed = this.state.storySeed + this.state.previousRandom;\n\t\t\t\t\tlet random = new PRNG(resultSeed);\n\n\t\t\t\t\tlet nextRandom = random.next();\n\t\t\t\t\tlet listItemIndex = nextRandom % list.Count;\n\n\t\t\t\t\t// This bit is a little different from the original\n\t\t\t\t\t// C# code, since iterators do not work in the same way.\n\t\t\t\t\t// First, we iterate listItemIndex - 1 times, calling next().\n\t\t\t\t\t// The listItemIndex-th time is made outside of the loop,\n\t\t\t\t\t// in order to retrieve the value.\n\t\t\t\t\tlet listEnumerator = list.entries();\n\t\t\t\t\tfor (let i = 0; i <= listItemIndex - 1; i++) {\n\t\t\t\t\t\tlistEnumerator.next();\n\t\t\t\t\t}\n\t\t\t\t\tlet value = listEnumerator.next().value;\n\t\t\t\t\tlet randomItem: KeyValuePair<InkListItem, number> = {\n\t\t\t\t\t\tKey: InkListItem.fromSerializedKey(value[0]),\n\t\t\t\t\t\tValue: value[1],\n\t\t\t\t\t};\n\n\t\t\t\t\t// Origin list is simply the origin of the one element\n\t\t\t\t\tif (randomItem.Key.originName === null) { return throwNullException('randomItem.Key.originName'); }\n\t\t\t\t\tnewList = new InkList(randomItem.Key.originName, this);\n\t\t\t\t\tnewList.Add(randomItem.Key, randomItem.Value);\n\n\t\t\t\t\tthis.state.previousRandom = nextRandom;\n\t\t\t\t}\n\n\t\t\t\tthis.state.PushEvaluationStack(new ListValue(newList));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthis.Error('unhandled ControlCommand: ' + evalCommand);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Variable assignment\n\t\telse if( contentObj instanceof VariableAssignment ) {\n\t\t\tlet varAss = contentObj;\n\t\t\tlet assignedVal = this.state.PopEvaluationStack();\n\n\t\t\tthis.state.variablesState.Assign(varAss, assignedVal);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Variable reference\n\t\telse if( contentObj instanceof VariableReference ) {\n\t\t\tlet varRef = contentObj;\n\t\t\tlet foundValue = null;\n\n\t\t\t// Explicit read count value\n\t\t\tif (varRef.pathForCount != null) {\n\n\t\t\t\tlet container = varRef.containerForCount;\n\t\t\t\tlet count = this.VisitCountForContainer(container);\n\t\t\t\tfoundValue = new IntValue(count);\n\t\t\t}\n\n\t\t\t// Normal variable reference\n\t\t\telse {\n\n\t\t\t\tfoundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n\t\t\t\tif (foundValue == null) {\n\t\t\t\t\tlet defaultVal = this.state.variablesState.TryGetDefaultVariableValue (varRef.name);\n\t\t\t\t\tif (defaultVal != null) {\n\t\t\t\t\t\tthis.Warning(\"Variable not found in save state: '\" + varRef.name + \"', but seems to have been newly created. Assigning value from latest ink's declaration: \" + defaultVal);\n\t\t\t\t\t\tfoundValue = defaultVal;\n\n\t\t\t\t\t\t// Save for future usage, preventing future errors\n\t\t\t\t\t\t// Only do this for variables that are known to be globals, not those that may be missing temps.\n\t\t\t\t\t\tthis.state.variablesState.SetGlobal(varRef.name, foundValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.Warning (\"Variable not found: '\" + varRef.name + \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit.\");\n\t\t\t\t\t\tfoundValue = new IntValue(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.state.PushEvaluationStack(foundValue);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Native function call\n\t\telse if (contentObj instanceof NativeFunctionCall) {\n\t\t\tlet func = contentObj;\n\t\t\tlet funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n\t\t\tlet result = func.Call(funcParams);\n\t\t\tthis.state.PushEvaluationStack(result);\n\t\t\treturn true;\n\t\t}\n\n\t\t// No control content, must be ordinary content\n\t\treturn false;\n\t}\n\n\tpublic ChoosePathString(path: string, resetCallstack = true, args: any[] = []){\n\t\tthis.IfAsyncWeCant ('call ChoosePathString right now');\n\n\t\tif (resetCallstack) {\n\t\t\tthis.ResetCallstack();\n\t\t} else {\n\t\t\tif (this.state.callStack.currentElement.type == PushPopType.Function) {\n\t\t\t\tlet funcDetail = '';\n\t\t\t\tlet container = this.state.callStack.currentElement.currentPointer.container;\n\t\t\t\tif (container != null) {\n\t\t\t\t\tfuncDetail = '('+container.path.toString ()+') ';\n\t\t\t\t}\n\t\t\t\tthrow new Error('Story was running a function '+funcDetail+'when you called ChoosePathString('+path+') - this is almost certainly not not what you want! Full stack trace: \\n'+this.state.callStack.callStackTrace);\n\t\t\t}\n\t\t}\n\n\t\tthis.state.PassArgumentsToEvaluationStack(args);\n\t\tthis.ChoosePath(new Path(path));\n\t}\n\n\tpublic IfAsyncWeCant(activityStr: string)\n\t{\n\t\tif (this._asyncContinueActive)\n\t\t\tthrow new Error(\"Can't \" + activityStr + '. Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.');\n\t}\n\n\tpublic ChoosePath(p: Path, incrementingTurnIndex: boolean = true){\n\t\tthis.state.SetChosenPath(p, incrementingTurnIndex);\n\n\t\t// Take a note of newly visited containers for read counts etc\n\t\tthis.VisitChangedContainersDueToDivert();\n\t}\n\n\tpublic ChooseChoiceIndex(choiceIdx: number){\n\t\tchoiceIdx = choiceIdx;\n\t\tlet choices = this.currentChoices;\n\t\tthis.Assert(choiceIdx >= 0 && choiceIdx < choices.length, 'choice out of range');\n\n\t\tlet choiceToChoose = choices[choiceIdx];\n\t\tif (choiceToChoose.threadAtGeneration === null) { return throwNullException('choiceToChoose.threadAtGeneration'); }\n\t\tif (choiceToChoose.targetPath === null) { return throwNullException('choiceToChoose.targetPath'); }\n\n\t\tthis.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n\t\tthis.ChoosePath(choiceToChoose.targetPath);\n\t}\n\n\tpublic HasFunction(functionName: string){\n\t\ttry {\n\t\t\treturn this.KnotContainerWithName(functionName) != null;\n\t\t} catch(e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic EvaluateFunction(functionName: string, args: any[] = [], returnTextOutput: boolean = false): Story.EvaluateFunctionTextOutput | any{\n\t\t// EvaluateFunction behaves slightly differently than the C# version.\n\t\t// In C#, you can pass a (second) parameter `out textOutput` to get the\n\t\t// text outputted by the function. This is not possible in js. Instead,\n\t\t// we maintain the regular signature (functionName, args), plus an\n\t\t// optional third parameter returnTextOutput. If set to true, we will\n\t\t// return both the textOutput and the returned value, as an object.\n\n\t\tthis.IfAsyncWeCant('evaluate a function');\n\n\t\tif (functionName == null) {\n\t\t\tthrow new Error('Function is null');\n\t\t}\n\t\telse if (functionName == '' || functionName.trim() == '') {\n\t\t\tthrow new Error('Function is empty or white space.');\n\t\t}\n\n\t\tlet funcContainer = this.KnotContainerWithName(functionName);\n\t\tif (funcContainer == null) {\n\t\t\tthrow new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n\t\t}\n\n\t\tlet outputStreamBefore: InkObject[] = [];\n\t\toutputStreamBefore.push.apply(outputStreamBefore, this.state.outputStream);\n\t\tthis._state.ResetOutput();\n\n\t\tthis.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n\t\t// Evaluate the function, and collect the string output\n\t\tlet stringOutput = new StringBuilder();\n\t\twhile (this.canContinue) {\n\t\t\tstringOutput.Append(this.Continue());\n\t\t}\n\t\tlet textOutput = stringOutput.toString();\n\n\t\tthis._state.ResetOutput(outputStreamBefore);\n\n\t\tlet result = this.state.CompleteFunctionEvaluationFromGame();\n\n\t\treturn (returnTextOutput) ? {returned: result, output: textOutput} : result;\n\t}\n\n\tpublic EvaluateExpression(exprContainer: Container){\n\t\tlet startCallStackHeight = this.state.callStack.elements.length;\n\n\t\tthis.state.callStack.Push(PushPopType.Tunnel);\n\n\t\tthis._temporaryEvaluationContainer = exprContainer;\n\n\t\tthis.state.GoToStart();\n\n\t\tlet evalStackHeight = this.state.evaluationStack.length;\n\n\t\tthis.Continue();\n\n\t\tthis._temporaryEvaluationContainer = null;\n\n\t\t// Should have fallen off the end of the Container, which should\n\t\t// have auto-popped, but just in case we didn't for some reason,\n\t\t// manually pop to restore the state (including currentPath).\n\t\tif (this.state.callStack.elements.length > startCallStackHeight) {\n\t\t\tthis.state.PopCallStack();\n\t\t}\n\n\t\tlet endStackHeight = this.state.evaluationStack.length;\n\t\tif (endStackHeight > evalStackHeight) {\n\t\t\treturn this.state.PopEvaluationStack();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic allowExternalFunctionFallbacks: boolean = false;\n\n\tpublic CallExternalFunction(funcName: string | null, numberOfArguments: number){\n\t\tif (funcName === null) { return throwNullException('funcName'); }\n\t\tlet func = this._externals.get(funcName);\n\t\tlet fallbackFunctionContainer = null;\n\n\t\tlet foundExternal = typeof func !== 'undefined';\n\n\t\t// Try to use fallback function?\n\t\tif (!foundExternal) {\n\t\t\tif (this.allowExternalFunctionFallbacks) {\n\t\t\t\tfallbackFunctionContainer = this.KnotContainerWithName(funcName);\n\t\t\t\tthis.Assert(fallbackFunctionContainer !== null, \"Trying to call EXTERNAL function '\" + funcName + \"' which has not been bound, and fallback ink function could not be found.\");\n\n\t\t\t\t// Divert direct into fallback function and we're done\n\t\t\t\tthis.state.callStack.Push(\n\t\t\t\t\tPushPopType.Function,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.state.outputStream.length,\n\t\t\t\t);\n\t\t\t\tthis.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n\t\t\t\treturn;\n\n\t\t\t} else {\n\t\t\t\tthis.Assert(false, \"Trying to call EXTERNAL function '\" + funcName + \"' which has not been bound (and ink fallbacks disabled).\");\n\t\t\t}\n\t\t}\n\n\t\t// Pop arguments\n\t\tlet args: any[] = [];\n\t\tfor (let i = 0; i < numberOfArguments; ++i) {\n\t\t\t// var poppedObj = state.PopEvaluationStack () as Value;\n\t\t\tlet poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n\t\t\tlet valueObj = poppedObj.valueObject;\n\t\t\targs.push(valueObj);\n\t\t}\n\n\t\t// Reverse arguments from the order they were popped,\n\t\t// so they're the right way round again.\n\t\targs.reverse();\n\n\t\t// Run the function!\n\t\tlet funcResult = func!(args);\n\n\t\t// Convert return value (if any) to the a type that the ink engine can use\n\t\tlet returnObj = null;\n\t\tif (funcResult != null) {\n\t\t\treturnObj = Value.Create(funcResult);\n\t\t\tthis.Assert(returnObj !== null, 'Could not create ink value from returned object of type ' + (typeof funcResult));\n\t\t} else {\n\t\t\treturnObj = new Void();\n\t\t}\n\n\t\tthis.state.PushEvaluationStack(returnObj);\n\t}\n\n\tpublic BindExternalFunctionGeneral(funcName: string, func: Story.ExternalFunction){\n\t\tthis.IfAsyncWeCant('bind an external function');\n\t\tthis.Assert(!this._externals.has(funcName), \"Function '\" + funcName + \"' has already been bound.\");\n\t\tthis._externals.set(funcName, func);\n\t}\n\n\tpublic TryCoerce(value: any){\n\t\t// We're skipping type coercition in this implementation. First of, js\n\t\t// is loosely typed, so it's not that important. Secondly, there is no\n\t\t// clean way (AFAIK) for the user to describe what type of parameters\n\t\t// they expect.\n\t\treturn value;\n\t}\n\n\tpublic BindExternalFunction(funcName: string, func: Story.ExternalFunction){\n\t\tthis.Assert(func != null, \"Can't bind a null function\");\n\n\t\tthis.BindExternalFunctionGeneral(funcName, (args: any) => {\n\t\t\tthis.Assert(args.length >= func.length, 'External function expected ' + func.length + ' arguments');\n\n\t\t\tlet coercedArgs = [];\n\t\t\tfor (let i = 0, l = args.length; i < l; i++){\n\t\t\t\tcoercedArgs[i] = this.TryCoerce(args[i]);\n\t\t\t}\n\t\t\treturn func.apply(null, coercedArgs);\n\t\t});\n\t}\n\n\tpublic UnbindExternalFunction(funcName: string){\n\t\tthis.IfAsyncWeCant('unbind an external a function');\n\t\tthis.Assert(this._externals.has(funcName), \"Function '\" + funcName + \"' has not been bound.\");\n\t\tthis._externals.delete(funcName);\n\t}\n\n\tpublic ValidateExternalBindings(): void;\n\tpublic ValidateExternalBindings(c: Container | null, missingExternals: Set<string>): void;\n\tpublic ValidateExternalBindings(o: InkObject | null, missingExternals: Set<string>): void;\n\tpublic ValidateExternalBindings(){\n\n\t\tlet c: Container | null = null;\n\t\tlet o: InkObject | null = null;\n\t\tlet missingExternals: Set<string> = arguments[1] || new Set();\n\n\t\tif (arguments[0] instanceof Container) {\n\t\t\tc = arguments[0];\n\t\t}\n\n\t\tif (arguments[0] instanceof InkObject) {\n\t\t\to = arguments[0];\n\t\t}\n\n\t\tif (c === null && o === null) {\n\t\t\tthis.ValidateExternalBindings(this._mainContentContainer, missingExternals);\n\t\t\tthis._hasValidatedExternals = true;\n\n\t\t\t// No problem! Validation complete\n\t\t\tif( missingExternals.size == 0 ) {\n\t\t\t\tthis._hasValidatedExternals = true;\n\t\t\t} else {\n\t\t\t\tlet message = 'Error: Missing function binding for external';\n\t\t\t\tmessage += (missingExternals.size > 1) ? 's' : '';\n\t\t\t\tmessage += \": '\";\n\t\t\t\tmessage += Array.from(missingExternals).join(\"', '\");\n\t\t\t\tmessage += \"' \";\n\t\t\t\tmessage += (this.allowExternalFunctionFallbacks) ? ', and no fallback ink function found.' : ' (ink fallbacks disabled)';\n\n\t\t\t\tthis.Error(message);\n\t\t\t}\n\t\t} else if (c != null) {\n\t\t\tfor (let innerContent of c.content) {\n\t\t\t\tlet container = innerContent as Container;\n\t\t\t\tif (container == null || !container.hasValidName)\n\t\t\t\t\tthis.ValidateExternalBindings (innerContent, missingExternals);\n\t\t\t}\n\t\t\tfor (let [key, value] of c.namedContent) {\n\t\t\t\tthis.ValidateExternalBindings (asOrNull(value, InkObject), missingExternals);\n\t\t\t}\n\t\t} else if (o != null) {\n\t\t\tlet divert = asOrNull(o, Divert);\n\t\t\tif (divert && divert.isExternal) {\n\t\t\t\tlet name = divert.targetPathString;\n\t\t\t\tif (name === null) { return throwNullException('name'); }\n\t\t\t\tif (!this._externals.has(name)) {\n\t\t\t\t\tif (this.allowExternalFunctionFallbacks) {\n\t\t\t\t\t\tlet fallbackFound = this.mainContentContainer.namedContent.has(name);\n\t\t\t\t\t\tif (!fallbackFound) {\n\t\t\t\t\t\t\tmissingExternals.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmissingExternals.add(name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ObserveVariable(variableName: string, observer: Story.VariableObserver){\n\t\tthis.IfAsyncWeCant('observe a new variable');\n\n\t\tif (this._variableObservers === null)\n\t\t\tthis._variableObservers = new Map();\n\n\t\tif(!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n\t\t\tthrow new StoryException(\"Cannot observe variable '\"+variableName+\"' because it wasn't declared in the ink story.\");\n\n\t\tif (this._variableObservers.has(variableName)) {\n\t\t\tthis._variableObservers.get(variableName)!.push(observer);\n\t\t} else {\n\t\t\tthis._variableObservers.set(variableName, [observer]);\n\t\t}\n\t}\n\n\tpublic ObserveVariables(variableNames: string[], observers: Story.VariableObserver[]){\n\t\tfor (let i = 0, l = variableNames.length; i < l; i++){\n\t\t\tthis.ObserveVariable(variableNames[i], observers[i]);\n\t\t}\n\t}\n\n\tpublic RemoveVariableObserver(observer: Story.VariableObserver, specificVariableName: string){\n\t\tthis.IfAsyncWeCant('remove a variable observer');\n\n\t\tif (this._variableObservers === null)\n\t\t\treturn;\n\n\t\tif (typeof specificVariableName !== 'undefined') {\n\t\t\tif (this._variableObservers.has(specificVariableName)) {\n\t\t\t\tlet observers = this._variableObservers.get(specificVariableName)!;\n\t\t\t\tobservers.splice(observers.indexOf(observer), 1);\n\t\t\t}\n\t\t} else {\n\t\t\tlet keys = this._variableObservers.keys();\n\n\t\t\tfor (let varName of keys){\n\t\t\t\tlet observers = this._variableObservers.get(varName)!;\n\t\t\t\tobservers.splice(observers.indexOf(observer), 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic VariableStateDidChangeEvent(variableName: string, newValueObj: InkObject){\n\t\tif (this._variableObservers === null)\n\t\t\treturn;\n\n\t\tlet observers = this._variableObservers.get(variableName);\n\t\tif (typeof observers !== 'undefined') {\n\t\t\tif (!(newValueObj instanceof Value)) {\n\t\t\t\tthrow new Error(\"Tried to get the value of a variable that isn't a standard type\");\n\t\t\t}\n\t\t\t// var val = newValueObj as Value;\n\t\t\tlet val = asOrThrows(newValueObj, Value);\n\n\t\t\tfor (let observer of observers) {\n\t\t\t\tobserver(variableName, val.valueObject);\n\t\t\t}\n\t\t}\n\t}\n\n\tget globalTags(){\n\t\treturn this.TagsAtStartOfFlowContainerWithPathString('');\n\t}\n\n\tpublic TagsForContentAtPath(path: string){\n\t\treturn this.TagsAtStartOfFlowContainerWithPathString(path);\n\t}\n\n\tpublic TagsAtStartOfFlowContainerWithPathString(pathString: string){\n\t\tlet path = new Path(pathString);\n\n\t\tlet flowContainer = this.ContentAtPath(path).container;\n\t\tif (flowContainer === null) { return throwNullException('flowContainer'); }\n\t\twhile(true) {\n\t\t\tlet firstContent: InkObject = flowContainer.content[0];\n\t\t\tif (firstContent instanceof Container)\n\t\t\t\tflowContainer = firstContent;\n\t\t\telse break;\n\t\t}\n\n\t\tlet tags: string[] | null = null;\n\n\t\tfor(let c of flowContainer.content) {\n\t\t\t// var tag = c as Runtime.Tag;\n\t\t\tlet tag = asOrNull(c, Tag);\n\t\t\tif (tag) {\n\t\t\t\tif (tags == null) tags = [];\n\t\t\t\ttags.push(tag.text);\n\t\t\t} else break;\n\t\t}\n\n\t\treturn tags;\n\t}\n\n\tpublic BuildStringOfHierarchy(){\n\t\tlet sb = new StringBuilder();\n\n\t\tthis.mainContentContainer.BuildStringOfHierarchy(sb, 0, this.state.currentPointer.Resolve());\n\n\t\treturn sb.toString();\n\t}\n\n\tpublic BuildStringOfContainer(container: Container){\n\t\tlet sb = new StringBuilder();\n\t\tcontainer.BuildStringOfHierarchy(sb, 0, this.state.currentPointer.Resolve());\n\t\treturn sb.toString();\n\t}\n\n\tpublic NextContent(){\n\t\tthis.state.previousPointer = this.state.currentPointer.copy();\n\n\t\tif (!this.state.divertedPointer.isNull) {\n\n\t\t\tthis.state.currentPointer = this.state.divertedPointer.copy();\n\t\t\tthis.state.divertedPointer = Pointer.Null;\n\n\t\t\tthis.VisitChangedContainersDueToDivert();\n\n\t\t\tif (!this.state.currentPointer.isNull) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tlet successfulPointerIncrement = this.IncrementContentPointer();\n\n\t\tif (!successfulPointerIncrement) {\n\n\t\t\tlet didPop = false;\n\n\t\t\tif (this.state.callStack.CanPop(PushPopType.Function)) {\n\n\t\t\t\tthis.state.PopCallStack(PushPopType.Function);\n\n\t\t\t\tif (this.state.inExpressionEvaluation) {\n\t\t\t\t\tthis.state.PushEvaluationStack(new Void());\n\t\t\t\t}\n\n\t\t\t\tdidPop = true;\n\t\t\t} else if (this.state.callStack.canPopThread) {\n\t\t\t\tthis.state.callStack.PopThread();\n\n\t\t\t\tdidPop = true;\n\t\t\t} else {\n\t\t\t\tthis.state.TryExitFunctionEvaluationFromGame();\n\t\t\t}\n\n\t\t\tif (didPop && !this.state.currentPointer.isNull) {\n\t\t\t\tthis.NextContent();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic IncrementContentPointer(){\n\t\tlet successfulIncrement = true;\n\n\t\tlet pointer = this.state.callStack.currentElement.currentPointer.copy();\n\t\tpointer.index++;\n\n\t\tif (pointer.container === null) { return throwNullException('pointer.container'); }\n\t\twhile (pointer.index >= pointer.container.content.length) {\n\n\t\t\tsuccessfulIncrement = false;\n\n\t\t\t// Container nextAncestor = pointer.container.parent as Container;\n\t\t\tlet nextAncestor = asOrNull(pointer.container.parent, Container);\n\t\t\tif (nextAncestor instanceof Container === false) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n\t\t\tif (indexInAncestor == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tpointer = new Pointer(nextAncestor, indexInAncestor);\n\n\t\t\tpointer.index++;\n\n\t\t\tsuccessfulIncrement = true;\n\t\t\tif (pointer.container === null) { return throwNullException('pointer.container'); }\n\t\t}\n\n\t\tif (!successfulIncrement) pointer = Pointer.Null;\n\n\t\tthis.state.callStack.currentElement.currentPointer = pointer.copy();\n\n\t\treturn successfulIncrement;\n\t}\n\n\tpublic TryFollowDefaultInvisibleChoice(){\n\t\tlet allChoices = this._state.currentChoices;\n\n\t\tlet invisibleChoices = allChoices.filter((c) => {\n\t\t\treturn c.isInvisibleDefault;\n\t\t});\n\n\t\tif (invisibleChoices.length == 0 || allChoices.length > invisibleChoices.length)\n\t\t\treturn false;\n\n\t\tlet choice = invisibleChoices[0];\n\n\t\tif (choice.targetPath === null) { return throwNullException('choice.targetPath'); }\n\n\t\tif (choice.threadAtGeneration === null) { return throwNullException('choice.threadAtGeneration'); }\n\n\t\tthis.state.callStack.currentThread = choice.threadAtGeneration;\n\n\t\tthis.ChoosePath(choice.targetPath, false);\n\n\t\treturn true;\n\t}\n\n\tpublic VisitCountForContainer(container: Container | null){\n\t\tif (container === null) { return throwNullException('container'); }\n\t\tif( !container.visitsShouldBeCounted ) {\n\t\t\tconsole.warn('Read count for target ('+container.name+' - on '+container.debugMetadata+') unknown. The story may need to be compiled with countAllVisits flag (-c).');\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet count = 0;\n\t\tlet containerPathStr = container.path.toString();\n\t\tcount = this.state.visitCounts.get(containerPathStr) || count;\n\t\treturn count;\n\t}\n\n\tpublic IncrementVisitCountForContainer(container: Container){\n\t\tlet count = 0;\n\t\tlet containerPathStr = container.path.toString();\n\t\tif (this.state.visitCounts.has(containerPathStr)) count = this.state.visitCounts.get(containerPathStr)!;\n\t\tcount++;\n\t\tthis.state.visitCounts.set(containerPathStr, count);\n\t}\n\n\tpublic RecordTurnIndexVisitToContainer(container: Container){\n\t\tlet containerPathStr = container.path.toString();\n\t\tthis.state.turnIndices.set(containerPathStr, this.state.currentTurnIndex);\n\t}\n\n\tpublic TurnsSinceForContainer(container: Container){\n\t\tif( !container.turnIndexShouldBeCounted ) {\n\t\t\tthis.Error('TURNS_SINCE() for target ('+container.name+' - on '+container.debugMetadata+') unknown. The story may need to be compiled with countAllVisits flag (-c).');\n\t\t}\n\n\t\tlet containerPathStr = container.path.toString();\n\t\tlet index = this.state.turnIndices.get(containerPathStr);\n\t\tif (typeof index !== 'undefined') {\n\t\t\treturn this.state.currentTurnIndex - index;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tpublic NextSequenceShuffleIndex(){\n\t\t// var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n\t\tlet numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\t\tif (!(numElementsIntVal instanceof IntValue)) {\n\t\t\tthis.Error('expected number of elements in sequence for shuffle index');\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet seqContainer = this.state.currentPointer.container;\n\t\tif (seqContainer === null) { return throwNullException('seqContainer'); }\n\n\t\t// Originally a primitive type, but here, can be null.\n\t\t// TODO: Replace by default value?\n\t\tif (numElementsIntVal.value === null) { return throwNullException('numElementsIntVal.value'); }\n\t\tlet numElements = numElementsIntVal.value;\n\n\t\t// var seqCountVal = state.PopEvaluationStack () as IntValue;\n\t\tlet seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n\t\tlet seqCount = seqCountVal.value;\n\n\t\t// Originally a primitive type, but here, can be null.\n\t\t// TODO: Replace by default value?\n\t\tif (seqCount === null) { return throwNullException('seqCount'); }\n\n\t\tlet loopIndex = seqCount / numElements;\n\t\tlet iterationIndex = seqCount % numElements;\n\n\t\tlet seqPathStr = seqContainer.path.toString();\n\t\tlet sequenceHash = 0;\n\t\tfor (let i = 0, l = seqPathStr.length; i < l; i++){\n\t\t\tsequenceHash += seqPathStr.charCodeAt(i) || 0;\n\t\t}\n\t\tlet randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n\t\tlet random = new PRNG(Math.floor(randomSeed));\n\n\t\tlet unpickedIndices = [];\n\t\tfor (let i = 0; i < numElements; ++i) {\n\t\t\tunpickedIndices.push(i);\n\t\t}\n\n\t\tfor (let i = 0; i <= iterationIndex; ++i) {\n\t\t\tlet chosen = random.next() % unpickedIndices.length;\n\t\t\tlet chosenIndex = unpickedIndices[chosen];\n\t\t\tunpickedIndices.splice(chosen, 1);\n\n\t\t\tif (i == iterationIndex) {\n\t\t\t\treturn chosenIndex;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('Should never reach here');\n\t}\n\n\tpublic Error(message: string, useEndLineNumber = false): never{\n\t\tlet e = new StoryException(message);\n\t\te.useEndLineNumber = useEndLineNumber;\n\t\tthrow e;\n\t}\n\n\tpublic Warning(message: string){\n\t\tthis.AddError(message, true);\n\t}\n\n\tpublic AddError(message: string, isWarning = false, useEndLineNumber = false){\n\t\tlet dm = this.currentDebugMetadata;\n\n\t\tlet errorTypeStr = isWarning ? 'WARNING' : 'ERROR';\n\n\t\tif (dm != null) {\n\t\t\tlet lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n\t\t\tmessage = 'RUNTIME ' + errorTypeStr + \": '\" + dm.fileName + \"' line \" + lineNum + ': ' + message;\n\t\t}\n\t\telse if(!this.state.currentPointer.isNull) {\n\t\t\tmessage = 'RUNTIME ' + errorTypeStr + ': (' + this.state.currentPointer + '): ' + message;\n\t\t}\n\t\telse {\n\t\t\tmessage = 'RUNTIME ' + errorTypeStr + ': ' + message;\n\t\t}\n\n\t\tthis.state.AddError(message, isWarning);\n\n\t\t// In a broken state don't need to know about any other errors.\n\t\tif (!isWarning)\n\t\t\tthis.state.ForceEnd();\n\t}\n\n\tpublic Assert(condition: boolean, message: string | null = null) {\n\t\tif (condition == false) {\n\t\t\tif (message == null) {\n\t\t\t\tmessage = 'Story assert';\n\t\t\t}\n\n\t\t\tthrow new Error(message + ' ' + this.currentDebugMetadata);\n\t\t}\n\t}\n\n\tget currentDebugMetadata(): DebugMetadata | null {\n\t\tlet dm: DebugMetadata | null;\n\n\t\tlet pointer = this.state.currentPointer;\n\t\tif (!pointer.isNull && pointer.Resolve() !== null) {\n\t\t\tdm = pointer.Resolve()!.debugMetadata;\n\t\t\tif (dm !== null) {\n\t\t\t\treturn dm;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n\t\t\tpointer = this.state.callStack.elements [i].currentPointer;\n\t\t\tif (!pointer.isNull && pointer.Resolve() !== null) {\n\t\t\t\tdm = pointer.Resolve()!.debugMetadata;\n\t\t\t\tif (dm !== null) {\n\t\t\t\t\treturn dm;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n\t\t\tlet outputObj = this.state.outputStream [i];\n\t\t\tdm = outputObj.debugMetadata;\n\t\t\tif (dm !== null) {\n\t\t\t\treturn dm;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tget mainContentContainer(){\n\t\tif (this._temporaryEvaluationContainer) {\n\t\t\treturn this._temporaryEvaluationContainer;\n\t\t} else {\n\t\t\treturn this._mainContentContainer;\n\t\t}\n\t}\n\n\t/**\n\t * `_mainContentContainer` is almost guaranteed to be set in the\n\t * constructor, unless the json is malformed.\n\t */\n\tprivate _mainContentContainer!: Container;\n\tprivate _listDefinitions: ListDefinitionsOrigin | null = null;\n\n\tprivate _externals: Map<string, Story.ExternalFunction>;\n\tprivate _variableObservers: Map<string, Story.VariableObserver[]> | null = null;\n\tprivate _hasValidatedExternals: boolean = false;\n\n\tprivate _temporaryEvaluationContainer: Container | null = null;\n\n\t/**\n\t * `state` is almost guaranteed to be set in the constructor, unless\n\t * using the compiler-specific constructor which will likely not be used in\n\t * the real world.\n\t */\n\tprivate _state!: StoryState;\n\n\tprivate _asyncContinueActive: boolean = false;\n\tprivate _stateAtLastNewline: StoryState | null = null;\n\n\tprivate _recursiveContinueCount: number = 0;\n\n\tprivate _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story{\n\texport enum OutputStateChange {\n\t\tNoChange = 0,\n\t\tExtendedBeyondNewline = 1,\n\t\tNewlineRemoved = 2,\n\t}\n\n\texport interface EvaluateFunctionTextOutput {\n\t\treturned: any;\n\t\toutput: string;\n\t}\n\n\texport type VariableObserver = (variableName: string, newValue: any) => void;\n\texport type ExternalFunction = (...args: any) => any;\n}\n"],"names":["Path","[object Object]","this","_components","_componentsString","_isRelative","arguments","componentsString","Component","head","tail","push","concat","Array","relative","isRelative","componentCount","length","tailComps","slice","self","lastComponent","lastComponentIdx","containsNamedComponent","i","l","isIndex","path","index","pathToAppend","p","upwardMoves","isParent","join","value","substring","componentStrings","split","str","test","parseInt","otherPath","Equals","c","apply","Debug","ValueType","PushPopType","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asNumberOrThrows","asINamedContentOrNull","hasValidName","name","nullIfUndefined","indexOrName","parentId","toString","otherComp","Assert","condition","message","console","warn","trace","variable","NullException","throwNullException","InkObject","debugMetadata","_debugMetadata","parent","ownDebugMetadata","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","_path","comps","child","container","Container","namedChild","unshift","content","indexOf","nearestContainer","GetComponent","contentContainer","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","newPathComps","up","ToParent","down","globalPathStr","relativePathStr","PathByAppendingPath","ConvertPathToRelative","ancestor","prop","StringBuilder","string","Length","Append","format","args","replace","match","num","InkListItem","originName","itemName","nameParts","Null","isNull","fullName","otherItem","JSON","stringify","key","parse","isLikeInkListItem","inkListItem","item","hasOwnProperty","InkList","Map","super","otherList","_originNames","singleOriginListName","originStory","SetInitialOriginName","def","listDefinitions","TryListGetDefinition","exists","origins","result","singleElement","Add","Key","Value","itemOrItemName","AddItem","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","itemVal","ValueForItem","fromSerializedKey","has","serialized","serializedKey","set","delete","Count","size","originOfMaxItem","maxOriginName","maxItem","every","originNames","initialOriginName","initialOriginNames","max","minItem","inverse","list","items","ContainsKey","all","union","intersection","listToRemove","minBound","maxBound","ordered","orderedItems","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","SetInitialOriginNames","otherInkList","sort","x","y","localeCompare","sb","NaN","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","AbstractValue","StringValue","String","IntValue","isNaN","DivertTargetValue","ListValue","FloatValue","Create","targetType","valueObject","valueType","isTruthy","Int","newType","Float","BadCastException","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","isNonWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","targetPath","DivertTarget","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","List","listOrSingleItem","singleValue","oldValue","newValue","oldList","newList","SearchResult","correctObj","approximate","searchResult","_content","AddContent","namedOnlyContent","namedOnlyContentDict","namedContent","inkObject","named","existingNamedOnly","AddToNamedContentOnly","countFlags","flags","visitsShouldBeCounted","CountFlags","Visits","turnIndexShouldBeCounted","Turns","countingAtStartOnly","CountStartOnly","flag","pathToFirstLeafContent","_pathToFirstLeafContent","internalPathToFirstLeafContent","components","contentObjOrList","contentList","contentObj","TryAddNamedContent","namedContentObj","AssertType","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","AppendFormat","AppendLine","onlyNamed","Glue","ControlCommand","commandType","_commandType","CommandType","NotSet","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","Pointer","PathByAppendingComponent","Divert","stackPushType","pushesToStack","_targetPath","targetObj","targetPointer","Resolve","_targetPointer","ResolvePath","StartOf","copy","targetPathString","CompactPathString","hasVariableTarget","variableDivertName","otherDivert","targetStr","isConditional","Function","ChoicePoint","onceOnly","pathOnChoice","_pathOnChoice","choiceTargetObj","choiceTarget","pathStringOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","VariableReference","containerForCount","pathForCount","pathStringForCount","VariableAssignment","isNewDeclaration","isGlobal","Void","NativeFunctionCall","GenerateNativeFunctionsIfNecessary","numberOfParameters","_isPrototype","functionName","_nativeFunctions","_name","_prototype","_numberOfParameters","parameters","Call","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","_operationFuncs","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","inkObjectVal","castedValue","Cast","t","AddIntBinaryOp","Subtract","Multiply","Divide","round","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","GreaterThanOrEquals","LessThanOrEquals","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","floor","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","Union","Without","Contains","Intersect","GreaterThan","LessThan","AddListUnaryOp","Invert","All","ListMin","MinAsList","ListMax","MaxAsList","ValueOfList","divertTargetsEqual","d1","d2","divertTargetsNotEqual","AddOpToNativeFunc","nativeFunc","AddOpFuncForType","Tag","tagText","text","Choice","ListDefinition","_items","_itemNameToValues","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listValue","listOfLists","definition","JsonSerialisation","serialisables","jArray","s","RuntimeObjectToJToken","skipLast","count","jTok","runtimeObj","JTokenToRuntimeObject","dictionary","jsonObj","jObject","dict","jObj","token","firstChar","_controlCommandNames","CallExistsWithName","CallWithName","isArray","propValue","varPtr","isDivert","divPushType","external","Tunnel","divert","isExternal","target","externalArgs","choice","readCountVarRef","isVarAss","isGlobalVar","varName","isNewDecl","varAss","undefined","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","ContainerToJArray","divTypeKey","choicePoint","floatVal","strVal","InkListToJObject","divTargetVal","divTargetJsonObj","varPtrVal","varPtrJsonObj","controlCmd","varRef","readCountPath","tag","ChoiceToJObject","ListToJArray","terminatingObj","DictionaryRuntimeObjsToJObject","subContainerJArray","attrJObj","Object","keys","JArrayToRuntimeObjList","namedContentItem","namedSubContainer","sourcePath","originalThreadIndex","listDefJson","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","Story","storyContext","_startOfRoot","Reset","toCopy","_threads","otherThread","Copy","elements","callStack","depth","currentElement","cs","callstack","currentElementIndex","currentThread","canPop","Thread","Element","jThreads","jThreadTok","jThreadObj","thread","_threadCounter","jsonToken","newThread","threadIndex","forkedThread","canPopThread","splice","elementIsEvaluateFromGame","FunctionEvaluationFromGame","externalEvaluationStackHeight","outputStreamLengthWithPushed","element","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","CanPop","pop","varValue","temporaryVariables","declareNew","contextElement","RetainListOriginsForAssignment","filter","callStackTrace","isCurrent","pointer","inExpressionEvaluation","jThreadCallstack","jElTok","currentContainerPathStr","jElementObj","pushPopType","currentContainerPathStrToken","threadPointerResult","Warning","el","jObjTemps","JObjectToDictionaryRuntimeObjs","prevContentObjPath","prevPath","previousPointer","PointerAtPath","e","threadJObj","resolvedPointer","VariablesState","listDefsOrigin","Set","_globalVariables","_callStack","_listDefsOrigin","Proxy","$","callback","variableChangedEventCallbacks","batchObservingVariableChanges","_batchObservingVariableChanges","_changedVariables","currentValue","variableChangedEvent","varContents","_defaultGlobalVariables","SetGlobal","GetRawVariableWithName","varPointer","ValueAtVariablePointer","variableValue","FindSingleItemListWithName","GetTemporaryVariableWithName","GetVariableWithName","setGlobal","ResolveVariablePointer","existingPointer","SetTemporaryVariable","add","GetContextIndexOfVariableNamed","doubleRedirectionPointer","PRNG","seed","next","StoryState","story","_outputStream","OutputStreamDirty","_evaluationStack","_variablesState","_visitCounts","_turnIndices","_currentTurnIndex","timeSeed","Date","getTime","storySeed","previousRandom","_currentChoices","GoToStart","indented","ToJson","json","pathString","visitCountOut","visitCounts","callstackDepth","outputStream","currentChoices","canContinue","generatedChoices","currentErrors","_currentErrors","currentWarnings","_currentWarnings","variablesState","evaluationStack","turnIndices","currentTurnIndex","currentPathString","hasError","hasWarning","currentText","_outputStreamTextDirty","outputObj","textContent","_currentText","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","currentTags","_outputStreamTagsDirty","_currentTags","mainContentContainer","CopyFrom","divertedPointer","didSafeExit","choiceThreads","threadAtGeneration","ThreadWithIndex","GetJsonToken","IntDictionaryToJObject","kInkSaveStateVersion","inkVersionCurrent","jSaveVersion","kMinCompatibleLoadVersion","SetJsonToken","currentDivertTargetPath","divertPath","JObjectToIntDictionary","jChoiceThreads","foundActiveThread","jSavedChoiceThread","objs","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","glue","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","currEl","glueTrimIndex","o","trimIndex","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","cmd","txt","inStringEvaluation","n","numberOfObjects","functionStartPoint","popType","TrimWhitespaceFromFunctionEnd","Pop","incrementingTurnIndex","newPointer","funcContainer","Push","PassArgumentsToEvaluationStack","PushEvaluationStack","originalEvaluationStackHeight","returnedObj","poppedObj","PopEvaluationStack","PopCallStack","returnVal","isWarning","Stopwatch","startTime","ElapsedMilliseconds","nVal","isFinite","_mainContentContainer","jsonString","_listDefinitions","_externals","rootObject","versionObj","formatFromFile","inkVersionMinimumCompatible","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","choices","_state","IfAsyncWeCant","state","rootContainerJsonList","ListDefinitionsToJToken","ObserveVariableChange","VariableStateDidChangeEvent","bind","ResetGlobals","ResetErrors","ForceEnd","originalPointer","ChoosePath","ContinueInternal","SnapshotDefaultGlobals","ContinueAsync","asyncContinueComplete","_asyncContinueActive","millisecsLimitAsync","_hasValidatedExternals","ValidateExternalBindings","_profiler","PreContinue","isAsyncTimeLimited","_recursiveContinueCount","ResetOutput","durationStopwatch","Start","ContinueSingleStep","AddError","Stop","_stateAtLastNewline","RestoreStateSnapshot","_temporaryEvaluationContainer","PostContinue","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","Continue","namedContainer","pathLengthToUse","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","ContextForVariableNamed","PushToOutputStream","NextContent","PushThread","atStart","IncrementVisitCountForContainer","RecordTurnIndexVisitToContainer","_prevContainers","prevAncestor","currentChildOfContainer","currentContainerAncestor","enteringAtStart","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","VisitCountForContainer","ForkThread","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","sourceName","evalCommand","output","PeekEvaluationStack","overrideTunnelReturnTarget","popped","TryExitFunctionEvaluationFromGame","names","expected","errorMsg","contentStackForString","outputCountConsumed","command","PopFromOutputStream","reverse","choiceCount","extraNote","eitherCount","divertTarget","TurnsSinceForContainer","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","PopThread","listNameVal","generatedListValue","foundItem","targetList","ListWithSubRange","listItemIndex","listEnumerator","entries","randomItem","assignedVal","Assign","foundValue","defaultVal","TryGetDefaultVariableValue","func","funcParams","resetCallstack","ResetCallstack","funcDetail","activityStr","SetChosenPath","VisitChangedContainersDueToDivert","choiceIdx","choiceToChoose","KnotContainerWithName","returnTextOutput","trim","outputStreamBefore","StartFunctionEvaluationFromGame","stringOutput","textOutput","CompleteFunctionEvaluationFromGame","returned","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","fallbackFunctionContainer","allowExternalFunctionFallbacks","valueObj","funcResult","returnObj","BindExternalFunctionGeneral","coercedArgs","TryCoerce","missingExternals","from","innerContent","observer","_variableObservers","GlobalVariableExistsWithName","variableNames","observers","ObserveVariable","specificVariableName","newValueObj","globalTags","TagsAtStartOfFlowContainerWithPathString","flowContainer","firstContent","tags","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","allChoices","invisibleChoices","containerPathStr","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","charCodeAt","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","endLineNumber","fileName"],"mappings":"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"}